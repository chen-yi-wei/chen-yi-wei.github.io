<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/01/28/JavaScript%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/28/JavaScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><h3 id="JavaScript的数据类型有几种？"><a href="#JavaScript的数据类型有几种？" class="headerlink" title="JavaScript的数据类型有几种？"></a>JavaScript的数据类型有几种？</h3><p>8种，但是红宝书是7，没有bigint</p><p>基本数据类型</p><p>Number 数字类型</p><p>String 字符串类型</p><p>Boolean 布尔类型</p><p>Undefined 未定义类型</p><p>Null 空类型</p><p>Symbol symbol类型</p><p>Bigint 大数字类型</p><p>引用数据类型</p><p>Object 对象类型</p><h3 id="undeclared-与-undefined的区别？"><a href="#undeclared-与-undefined的区别？" class="headerlink" title="undeclared 与 undefined的区别？"></a>undeclared 与 undefined的区别？</h3><p>undefined：声明了变量，但是没有赋值</p><p>undecalared：没有声明变量就直接使用</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undecalared</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组、字符串一些方法"><a href="#数组、字符串一些方法" class="headerlink" title="数组、字符串一些方法"></a>数组、字符串一些方法</h3><p>splice 与 slice 的区别？（待完善。。。）</p><table><thead><tr><th>方法</th><th>参数</th><th>用法区别</th><th></th></tr></thead><tbody><tr><td>splice</td><td>splice(start, num, item1, item2, …)</td><td>从数组中添加或删除元素，然后返回被删除的数组元素，会改变原始数组</td><td>1个参数的位置开始一直截取到最后 ；</td></tr><tr><td>slice</td><td>slice(start, end)</td><td>从已有的数组中返回你选择的某段数组元素，不会改变原始数组（左闭右开）</td><td></td></tr></tbody></table><p>substr 和 substring 的区别？</p><table><thead><tr><th>方法</th><th>参数</th></tr></thead><tbody><tr><td>substr</td><td>substr(start,length)</td></tr><tr><td>substring</td><td>substring(start,end)</td></tr></tbody></table><p>includes 比 indexOf好在哪？</p><p>includes可以检测<code>NaN</code>，indexOf不能检测<code>NaN</code>，includes内部使用了<code>Number.isNaN</code>对<code>NaN</code>进行了匹配</p><h3 id="判断变量类型的方式"><a href="#判断变量类型的方式" class="headerlink" title="判断变量类型的方式"></a>判断变量类型的方式</h3><p><strong>typeof</strong></p><p>能判断string、number、undefined、boolean、function(返回function)、object（null是object）</p><p>适合判断一个变量是否是字符串、数值、布尔值、undefined</p><p><strong>instanceof</strong></p><p>适合判断引用类型</p><p><strong>Object.prototype.toString.call()</strong></p><p><code>Object.prototype.toString.call(b)//[object Number]</code></p><p>能判断大部分数据类型</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="转化为String"><a href="#转化为String" class="headerlink" title="转化为String"></a>转化为String</h4><p>方法一：</p><p>调用被转换数据类型.toString()方法</p><p>但是null,undefined不能用这种方法,会报错</p><p><code>var a=12;</code></p><p>&#96;&#96;console.log(a.toString());&#96;</p><p>可以用toString()的原理是，因为如上例的a是Number()(其实它是原生函数来的，类似构造函数）的一个实例，所以根据原型链继承的内容，就可以知道之所以各种类型可以调用toString（）方法，其实是继承自Object.prototype，调用的是Object.prototype.toString方法。因为null和undefined没有原生函数，所以不能调用这个方法。</p><p>    方法二：</p><p>    调用String(),括号填转的数据</p><p>    null-&gt;”null”</p><p>    undefined-&gt;”undefined”</p><p>    方法三(隐式转换)</p><p>    使用+、-、*、&#x2F;拼接字符串的方法实现转换效果</p><p>    var num&#x3D;15</p><p>    console.log(num+’ ‘);</p><p>补充，其实JSON.stringify也可以算转换，但是其实它用到的还是toString,JSON的具体会在后面展开。</p><h4 id="转化为Number"><a href="#转化为Number" class="headerlink" title="转化为Number"></a>转化为Number</h4><p>    方法一：</p><p>    Number()函数</p><p>    字符串转数字，如果是纯属数字，就直接转； 如果有非数字，则  转化为NaN；如果是空串或者空格串，转为0</p><p>    布尔转数字：true-&gt;1，false-&gt;0</p><p>     null-&gt;0</p><p>     undefined-&gt;NaN</p><p>    Symbol无法转换为数字，会报错：Uncaught TypeError:   Cannot convert a Symbol value to a number</p><p>BigInt会去除n</p><p>Number(12n)&#x2F;&#x2F;12</p><p>对象转换为数字，会按照下面的步骤去执行</p><p>1.对对象进行Toprimitive操作</p><p>2.进行内部操作DefaultValue,检查该值是否有valueof方法，有则返回基本类型值，使用该值进行强制类型转换；没有则使用toString()的返回值进行强制类型转换，都没有则TypeError</p><p><code>var obj=&#123;</code></p><p><code>valueOf:()=&gt;23</code></p><p><code>&#125;</code></p><p><code>console.log(Number(obj));//23</code></p><p>      parseInt()把字符串里有效的整数读出转为整数</p><p>      parseFloat()把字符串转为浮点数</p><p>      如果是非String，先转String,再转整数</p><p>      注意：console.log(paresInt(‘rem120px’))—-&gt;NaN</p><p>         console.log(paresInt(‘120px’))—-&gt;120</p><p>         因为第一个字符串的第一个字母不是数字</p><p>     方法三</p><p>     利用运算符 -、*、&#x2F;  隐式转换</p><p>     <code>console.log(&#39;12&#39;-0)</code></p><p>     <code>console.log(&#39;12&#39;*1)</code></p><p>     <code>console.log(&#39;12&#39;/1)</code></p><h4 id="转化为Boolean"><a href="#转化为Boolean" class="headerlink" title="转化为Boolean"></a>转化为Boolean</h4><p>    显式</p><p>Boolean()</p><p>0&#x2F;NaN&#x2F;空字符串&#x2F;null&#x2F;undefined 会转化为false,其他均为true, 对象也会转化为true</p><p>隐式</p><p>隐式转换一般是在有逻辑判断、有逻辑元素符||、&amp;&amp;、！时触发。</p><p>||和&amp;&amp;首先会对一个操作数进行条件判断，如果其不是布尔值，就先将其强制转换为boolean类型，然后再进行条件判断。</p><p>对于||,如果条件判断结果为true就返回第一个操作数，false就返回第二个。</p><p>&amp;&amp;是true就返回第二个操作数，false就返回第一个操作数。</p><p><code>console.log(b||c);//12</code></p><p><code>console.log(c||d);//23</code></p><p><code>console.log(d&amp;&amp;c);//null(false返回第一个)</code></p><p><code>console.log(b&amp;&amp;c);//23(true返回第二个)</code></p><h4 id="和-x3D"><a href="#和-x3D" class="headerlink" title="和&#x3D;"></a>和&#x3D;</h4><p>和&#x3D;的区别是，允许在相等比较中进行强制类型转换，而&#x3D;不允许</p><p>&#x3D;&#x3D;比较</p><p>注意的是，NaN不等于NaN,+0等于-0</p><p>1.数字和字符串</p><p>根据ES5规范，其中一个为数字，一个为字符串，会将字符串转化为数字</p><p><code>var a=42,b=&quot;42&quot;;</code></p><p><code>a==b//true</code></p><p>2.布尔值和其他</p><p>会将其中的布尔值转化为数字再比较，如果是字符串和布尔值，先将布尔值转化为数字，再讲字符串转数字，再比较。</p><p><code>var a=&quot;42&quot;,b=false;</code></p><p><code>a==b //false false--&gt;0 &quot;42&quot;--&gt;42 42!=0</code></p><p><code>&quot;0&quot;==false//true false--&gt;0 &quot;0&quot;--&gt;0 0==0</code></p><p>3.null和undefined</p><p><strong>一个为null,另一个是undefined是true (就是说&#x3D;&#x3D;中,null和undefined相等)</strong></p><p>var a&#x3D;null,b;</p><p>a&#x3D;&#x3D;b&#x2F;&#x2F;true</p><p>b&#x3D;&#x3D;null &#x2F;&#x2F;true</p><p>a0 a’’ a&#x3D;&#x3D;false &#x2F;&#x2F;都是false</p><p>4.对象与非对象</p><p>会对对象调用Toprimitive操作</p><p>var a&#x3D;”abc”,b&#x3D;new Object(a);</p><p>a&#x3D;&#x3D;b&#x2F;&#x2F;true     b通过Toprimitive操作返回的是”abc”</p><h4 id="Toprimitive是什么？"><a href="#Toprimitive是什么？" class="headerlink" title="Toprimitive是什么？"></a>Toprimitive是什么？</h4><h3 id="原生函数（内建函数）"><a href="#原生函数（内建函数）" class="headerlink" title="原生函数（内建函数）"></a>原生函数（内建函数）</h3><h4 id="原生函数是什么？"><a href="#原生函数是什么？" class="headerlink" title="原生函数是什么？"></a>原生函数是什么？</h4><p>JavaScript为基本数据类型提供了封装对象,被称为原生函数。类似于构造函数。</p><h4 id="有哪些？"><a href="#有哪些？" class="headerlink" title="有哪些？"></a>有哪些？</h4><p><code>String()</code></p><p><code>Number()</code></p><p><code>Boolean()</code>   前3个是包装类</p><p><code>Object()</code></p><p><code>Array()</code></p><p><code>Function()</code></p><p><code>Date()</code></p><p><code>Regxp()</code></p><p><code>Error()</code></p><p><code>Symbol()</code></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><h5 id="类似构造函数"><a href="#类似构造函数" class="headerlink" title="类似构造函数"></a>类似构造函数</h5><p><code>var x=new String(&quot;abc&quot;);</code></p><p><code>typeof x //object</code></p><p><code>x instanceof String //true</code></p><p><code>Object.prototype.toString.call(x) //[object String]</code></p><p>x类似于构造函数String()创建的一个对象</p><h5 id="内部属性-class"><a href="#内部属性-class" class="headerlink" title="内部属性[[class]]"></a>内部属性[[class]]</h5><p>所有typeof返回值是object的对象都有一个内部属性[[class]]，这个属性相应的构造函数对应，可以通过</p><p><code>Object.prototype.toString.call()</code> 来查看</p><p><code>Object.prototype.toString.call([1,2,3]);//[object Array]</code></p><p><code>Object.prototype.toString.call(undefined);//[object Undefined]</code></p><p><code>Object.prototype.toString.call(null);//[object Null]</code></p><p>虽然null和undefined没有对应的原生构造函数，但是内部属性还是有Null和Undefined。</p><p><code>Object.prototype.toString.call(&quot;abc&quot;);//[object String]</code></p><p><code>Object.prototype.toString.call(12);//[object Number]</code></p><p><code>Object.prototype.toString.call(true);//[object Boolean]</code></p><p>这几个基本类型值被各自的封装对象自动包装，称为“包装”</p><h5 id="封装、拆封"><a href="#封装、拆封" class="headerlink" title="封装、拆封"></a>封装、拆封</h5><p><strong>封装</strong></p><p>因为基本类型值没有.length等属性和方法，所以需要通过封装对象才能访问，javascript会自动为基本类型值包装一个封装对象</p><p><code>var a=&quot;abc&quot;;</code></p><p><code>let x=a.length//3</code></p><pre><code>封装过程var temp=new String(&quot;abc&quot;);var x=a.lengthtemp=null;</code></pre><p>自行封装基本类型值，可以使用Object（）函数</p><p><code>var a=Object(&quot;abc&quot;);</code></p><p><strong>拆封</strong></p><p>想到得到封装对象中的基本类型值，用valueOf()或toString()函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> a<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//string</span><span class="token keyword">typeof</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//string</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"abc"</span>a<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原生原型"><a href="#原生原型" class="headerlink" title="原生原型"></a>原生原型</h5><p>构造函数都有原型，<code>String.prototype.indexOf()</code>可以简写成String#indexOf(…)</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><h5 id="object-对象"><a href="#object-对象" class="headerlink" title="object 对象"></a>object 对象</h5><p><strong>访问属性</strong></p><p><code>var obj=&#123;a:1&#125;</code></p><p>.方式 ：obj.a  （这种方式属性名要满足标识符规范，比如”obj-a”这样就得用下面这种方式）</p><p>[“属性名”]：obj[“a”] （这种要传属性名字符串）</p><p>可计算的属性名:</p><p><code>var s=&quot;str&quot;;</code></p><p><code>var obj=&#123; [s+&quot;a&quot;]:1&#125;;</code></p><p><strong>对象复制</strong></p><p>深复制</p><p>对于引用类型，实现的是对其的克隆</p><pre><code>function f()&#123;`  `console.log(&#39;1&#39;)``&#125;``var obj=&#123;`  `a:1,`  `fun:f``&#125;``var newobj=JSON.parse(JSON.stringify(obj));``console.log(newobj.fun===f);//false</code></pre><p>浅复制</p><p>对于引用类型的属性，实现的是对其的引用</p><pre><code>var newobj1=Object.assign(&#123;&#125;,obj);``console.log(newobj1.fun===f);//true</code></pre><p>Object.assign（）方法的一个参数是目标对象，之后可以是多个源对象，它会遍历源对象的所有可枚举的自有键并把它们复制到目标对象</p><p>不同的对象在底层都表示为二进制,在javaScript中二进制前三位都为0的话会被判断为object类型，null的二进制表示是全0，自然前三位也为0，所以执行typeof时会返回object</p><p><strong>对象属性包括数据属性和访问器属性</strong></p><p><strong>数据属性</strong></p><p>Object.getOwnPropertyDescriptor 获取属性对应的属性描述符</p><p>Object.getOwnPropertyDescriptors</p><p><code>var obj=&#123;</code></p><p><code>a:2</code></p><p><code>&#125;</code></p><p><code>console.log(Object.getOwnPropertyDescriptor(obj,&quot;a&quot;));</code></p><p><code>&#123;</code></p><p><code>configurable: true//可配置，表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，是否可以把它修改为访问器属性</code></p><p><code>enumerable: true//可枚举，是否可以用过for...in循环返回</code></p><p><code>value: 2</code></p><p><code>writable: true//可写 ，是否可以被修改</code></p><p><code>&#125;</code></p><p>Object.defineProperty() 添加一个新属性或者修改一个已有属性，虽然一般不用，但是它可以修改对应的属性描述符</p><p>Object.defineProperties()</p><p><code>var obj=&#123;&#125;</code></p><p><code>Object.defineProperty(obj,&quot;a&quot;,&#123;</code></p><p><code>value:2,</code></p><p><code>writable:false,</code></p><p><code>configurable:true,</code></p><p><code>enumerable:true</code></p><p><code>&#125;)</code></p><p><code>obj.a=3;</code></p><p><code>console.log(obj.a);//2</code></p><p>对象或属性不可变</p><p>对象常量：writable:false,configurable:false</p><p>禁止扩展：Object.preventExtensions(obj) 禁止一个对象添加新属性并且保留已有属性</p><p>密封：Object.seal() 把所有属性标记为configurable:false</p><p>冻结：Object.freeze()创建一个冻结对象，调用Object.seal()并且把所有数据writable:false</p><p><strong>访问器属性</strong></p><p>对应属性描述符</p><p>[[Configurable]]:同上</p><p>[[Enumerable]]:同上</p><p>[[Get]]:获取函数，读取属性时调用,默认值undefined</p><p>[[Set]]:设置函数，写入属性时调用,默认值undefined</p><p><code>var obj=&#123;</code></p><p><code>//getter</code></p><p><code>get a()&#123;</code></p><p>    <code>return this._a_;</code></p><p><code>&#125;,</code></p><p><code>//setter</code></p><p><code>set a(val)&#123;</code></p><p>    <code>this._a_=2*val;</code></p><p><code>&#125;</code></p><p><code>&#125;</code></p><p><code>obj.a=2;</code></p><p><code>console.log(obj.a);</code></p><p><code>console.log(obj)</code></p><p><strong>对象的创建</strong></p><p>工厂模式</p><p>构造函数模式</p><p>原型模式</p><p><strong>遍历</strong></p><p>in 遍历属性名</p><p>hasOwnProperty 好像也是属性名</p><p>for…in 也是遍历属性名，最好只在对象用，数组用 for…of</p><p>for…of 遍历属性值</p><h5 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h5><p>Math、Date、RegExp、String、Number、Boolean、Object、Function、Array、Error</p><p><code>var s=&quot;1314&quot;;//这是一个字面量</code></p><p><code>console.log(typeof s);//string</code></p><p><code>console.log(s instanceof String);//false</code></p><p><code>var s1=new String(&#39;520&#39;);//这是一个对象</code></p><p><code>console.log(typeof s1);//object</code></p><p><code>console.log(s1 instanceof String);//true</code></p><p>实际上，平时在字面量上访问属性或者方法，其实是因为引擎自动把字面量转换成为相应的对象</p><p>比如</p><p><code>var str=&#39;abc&#39;;</code></p><p><code>console.log(str.length);</code></p><p>实际上会转换为String对象</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="操作元素-增删查改"><a href="#操作元素-增删查改" class="headerlink" title="操作元素(增删查改)"></a>操作元素(增删查改)</h3><table><thead><tr><th>获取元素</th><th></th></tr></thead><tbody><tr><td>querySelector(‘选择器’)</td><td>通过选择器选择一个元素</td></tr><tr><td>querySelectorAll(‘选择器’)</td><td>通过选择器选择一组元素，是一个数组</td></tr><tr><td>document.getElementById()</td><td>通过id属性获取一个元素节点对象</td></tr><tr><td>document.getElementsByClassName()</td><td>根据class属性值获取一组元素节点对象</td></tr><tr><td>document.getElementsByTagName()</td><td>通过标签名获取一组元素对象,是伪数组</td></tr><tr><td>document.getElementsByName()</td><td>通过name属性获取一组元素节点对象，伪数组</td></tr><tr><td>element.getElementById(‘标签名’)</td><td>获取element元素里面的’标签名’的元素(例如ul里面的li)</td></tr><tr><td><strong>获取其他</strong></td><td></td></tr><tr><td>document.getElementsByTagName(“body”)[0]</td><td>获取body标签</td></tr><tr><td>document.body</td><td>获取body标签</td></tr><tr><td>document.documentElement</td><td>获取html根标签</td></tr><tr><td>document.all</td><td>获取页面中所有的元素</td></tr></tbody></table><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><p>分三个阶段事件捕获、到达目标、事件冒泡</p><p>事件捕获</p><p>最不具体（最外层）的节点应该最先收到事件，而最具体的节点（最内层）应该最后收到事件。</p><p>下面div点击事件顺序是    document-&gt;html-&gt;body-&gt;div</p><p>事件冒泡</p><p>最具体的节点（最内层）的节点应该最先收到事件，而最不具体（最外层）应该最后收到事件。</p><p>就是说事件是沿着DOM树一路向上的。</p><p>上例div点击事件顺序是    div-&gt;body-&gt;html-&gt;document</p><h3 id="23、绑定点击事件有几种方式？"><a href="#23、绑定点击事件有几种方式？" class="headerlink" title="23、绑定点击事件有几种方式？"></a>23、绑定点击事件有几种方式？</h3><p>三种</p><ul><li><code>xxx.onclick = function ()&#123;&#125;</code></li><li><code>&lt;xxx onclick=&quot;&quot;&gt;&lt;/xxx&gt;</code></li><li><code>xxx.addEventListener(&#39;click&#39;, function()&#123;&#125;, false)</code></li></ul><h3 id="24、addEventListener的第三个参数是干嘛的？"><a href="#24、addEventListener的第三个参数是干嘛的？" class="headerlink" title="24、addEventListener的第三个参数是干嘛的？"></a>24、addEventListener的第三个参数是干嘛的？</h3><p>决定事件是<code>捕获阶段</code>执行还是<code>冒泡阶段</code>执行</p><ul><li><code>true</code>：捕获</li><li><code>false</code>：默认，冒泡</li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h2 id="一些错误"><a href="#一些错误" class="headerlink" title="一些错误"></a>一些错误</h2><p>ReferenceError  作用域判别失败</p><p>TypeError 表示作用域判别成功了，但是对结果的操作是非法的或不合理的</p><h1 id="JavaScript进阶"><a href="#JavaScript进阶" class="headerlink" title="JavaScript进阶"></a>JavaScript进阶</h1><h2 id="一-作用域问题"><a href="#一-作用域问题" class="headerlink" title="一 作用域问题"></a>一 作用域问题</h2><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>词法作用域就是指作用域是由<strong>代码中函数声明的位置来决定的</strong>，所以词法作用域是<strong>静态的作用域</strong>，通过它就能够预测代码在执行过程中如何查找标识符</p><pre><code>var a=2;//如果注释这一行结果是undefinedfunction f()&#123;  console.log(a);&#125;function f1()&#123;  var a=3;  f();&#125;f1();//2</code></pre><p>这个例子是一个常见的问题，或许多数人会认为调用f1应该输出的是3，会把这个问题理解成一个作用域链的问题，但是其实不全是，第九行是<strong>f函数在f1里面调用，不是在f1里定义，f的上级作用域是全局，</strong>所以其实作用域链是<strong>f函数作用域–&gt;全局作用域和f1函数作用域–&gt;全局作用于，</strong>所以调用f1输出的是3。这就是体现了一个词法作用域的概念，就是它是一个静态的作用域，是编写代码时决定的，跟在哪里调用没关系。</p><p>改成如下，作用域就是<strong>f函数作用域–&gt;f1函数作用域–&gt;全局作用域</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果注释这一行结果是undefined</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>全局作用域就是在程序任何地方都能访问，window对象的内置属性都属于全局作用域</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数作用域指的是，属于这个函数的全部变量可以在函数的范围内使用，但是函数外不行。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 同样的变量,已重复赋值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用栈如下</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658299563727-13d8af3d-5221-4af2-bdb7-42a15493e84f.jpeg"><br>因为变量x处于函数test的执行上下文中，函数test编译后变量x的值首先为undefined，接着执行赋值语句，先赋值为1，之后又赋值为2，所以，执行最后两个输出语句时，输出的值是2</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>简单理解就是{ }内的作用域就称为块级作用域，比如if、while等括号里。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错uncaught ReferenceError: b is not defined，如果let改成var就是4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>let不会在块级作用域变量提升，var会</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错uncaught ReferenceError: b is not defined，如果let改成var就是undefined</span><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子分析：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//把上面的test例子的x变量用let定义</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> y<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> z<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 同样的变量,已重复赋值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test的执行上下文：<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658301762871-b0d0d6a2-abc8-4622-89c9-1755f7266489.jpeg"><br>上面的图是test执行到第8行后的执行上下文，let声明的变量和var的不同，函数内部通过var声明的变量，在编译阶段全都var被存放到变量环境里面了，通过let声明的变量会在编译阶段会被存放到词法环境（Lexical Environment）中，而且<strong>不同块是不同是词法环境，</strong>if块是单独的一个环境。<strong>词法环境是一个栈结构，</strong>第9行的输出是if块里的x为2，之后块执行完毕，<strong>if块的环境弹出</strong>，之后输出的x是底下的1。<br><strong>一个变量的查找的过程的从词法环境的栈顶到栈底，再从变量环境里从底往上找(如上图的红线）</strong></p><h3 id="var、let、const的区别"><a href="#var、let、const的区别" class="headerlink" title="var、let、const的区别"></a>var、let、const的区别</h3><table><thead><tr><th></th><th>作用域</th><th>变量提升</th><th>重复声明同一变量</th><th>声明的变量能否改</th><th>成为window对象的属性</th></tr></thead><tbody><tr><td>var</td><td>函数作用域</td><td>有</td><td>可以</td><td>能</td><td>是</td></tr><tr><td>let</td><td>块级作用域</td><td>没有</td><td>不可以</td><td>能</td><td>否</td></tr><tr><td>const</td><td>块级作用域</td><td>没有</td><td>不可以</td><td>不能</td><td>否</td></tr></tbody></table><p>一个常见的问题</p><pre><code>for(var i = 0; i &lt; 5; i++)&#123;  setTimeout(function()&#123;      console.log(i);     &#125;,0); &#125;;//5 5 5 5 5解决方法方法一for(let i = 0; i &lt; 5; i++)&#123;  setTimeout(function()&#123;      console.log(i);     &#125;,0); &#125;;方法二for (var i = 0; i &lt; 5; i++) &#123;    (function(i) &#123;      setTimeout(function () &#123;        console.log(i);      &#125;, 0)    &#125;)(i)  &#125;;</code></pre><h3 id="什么是暂时性死区？"><a href="#什么是暂时性死区？" class="headerlink" title="什么是暂时性死区？"></a>什么是暂时性死区？</h3><p>MDN上的定义：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let?retiredLocale=he">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let?retiredLocale=he</a></p><p><a href="https://juejin.cn/post/6983702070293430303">https://juejin.cn/post/6983702070293430303</a></p><blockquote><p>个人感觉不用去纠结let有没有变量提升，变量提升就是一段代码在编译阶段是能够识别到var和let创建的变量的，只会对二者的操作不一样：对var定义的变量初始化为undefined，而let定义的变量仍然处于未初始化状态。</p></blockquote><p>在用let声明某变量之前引用该变量，就会出现暂时性死区。其实就是因为let没有变量提升，而var有。</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错 Cannot access 'abc' before initialization</span><span class="token keyword">let</span> abc<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><h4 id="主要有以下3条规律："><a href="#主要有以下3条规律：" class="headerlink" title="主要有以下3条规律："></a>主要有以下3条规律：</h4><p><strong>1.变量和函数在内的所有声明都会在执行代码前先被处理,先编译后执行。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于   var a;a=2;console.log(a);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//相当于  var b; console.log(b); b=1;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.函数声明会提升，但是函数表达式不会</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//TypeError</span><span class="token keyword">var</span> f1<span class="token operator">=</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.变量和函数名称相同时，函数会先提升，然后才是变量（个人感觉这个结论不太对）</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span><span class="token keyword">var</span> f<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>f<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果定义了两个同名的函数，后定义的会覆盖前定义的</p></blockquote><p>总结1：<br>:::info<br><strong>所谓的变量提升，是指在JavaScript代码执行过程中，JavaScript引擎把变量的声明部分和函数的声明部分提升到代码开头的“行为”。变量被提升后，会给变量设置默认值undefined</strong>。<br>:::</p><h4 id="变量提升的原理"><a href="#变量提升的原理" class="headerlink" title="变量提升的原理"></a>变量提升的原理</h4><p>一段JavaScript代码在执行之前需要被JavaScript引擎编译，编译完成之后，才会进入执行阶段<br><strong>编译阶段</strong><br>编译的结果是形成执行上下文和可执行代码，<br><strong>执行上下文</strong>是JavaScript执行一段代码时的运行环境，比如调用一个函数，就会进入这个函数的执行上下文，确定该函数在执行期间用到的诸如this、变量、对象以及函数等。执行上下文中存在一个变量环境的对象（Viriable Environment），该对象中保存了变量提升的内容。<br><strong>可执行代码</strong>就是除了声明外的代码</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码在编译时，第3行有var声明的变量，js引擎会在在环境对象中创建一个名为a的属性，并使用undefined对其初始化，第4行有一个通过function定义的函数，所以它将函数定义存储到堆(heap）中，并在环境对象中创建一个f的属性，然后将该属性值指向堆中函数的位置。<br>在执行阶段的时候函数f执行输出<strong>“函数”</strong>，执行第二行时，环境对象中a的值为<strong>undefined</strong>，输出undefined，之后再执行<strong>a&#x3D;1</strong></p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>一般情况下，变量取值到创建这个变量的函数作用域去取值，但是如果在当前作用域中没有查找到值，就会想上级作用域去查找，直到查到全局作用域，这么查找的过程形成的链条叫作用域链。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> f1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-上下文"><a href="#二-上下文" class="headerlink" title="二 上下文"></a>二 上下文</h2><h3 id="全局上下文："><a href="#全局上下文：" class="headerlink" title="全局上下文："></a>全局上下文：</h3><p>只有一个，其实就是window对象，所有<strong>通过var定义的全局变量和函数</strong>都会成为window对象的属性和方法，（let、const的顶级声明不会定义在全局上下文中），上下文在其所有代码都执行完毕后会被销毁。</p><h3 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文:"></a>函数执行上下文:</h3><p>有无数个，每个函数调用都有自己的上下文，当代码执行流进入函数时，函数的上下文被推到一个上下文栈中，当函数执行完毕后，上下文栈会弹出该函数上下文，将控制权返还给之前的上下文栈上。</p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> b<span class="token operator">=</span><span class="token number">2</span>  <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的执行时栈如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658298655944-4b4b3eab-1e73-4d42-a1b9-74085e180c88.jpeg"></p><h3 id="执行上下文和作用域的区别"><a href="#执行上下文和作用域的区别" class="headerlink" title="执行上下文和作用域的区别"></a>执行上下文和作用域的区别</h3><h4 id="区别1"><a href="#区别1" class="headerlink" title="区别1"></a>区别1</h4><p>全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时已经确定了，而不是在函数调用时。<br>全局执行上下文是在全局作用域确定后，js代码马上执行之前创建。<br>函数执行上下文是在调用函数时，函数体代码马上执行前创建。</p><h4 id="区别2"><a href="#区别2" class="headerlink" title="区别2"></a>区别2</h4><p>作用域是<strong>静态的</strong>，只要函数定义好了就一直存在，并且不再发生变化。<br>执行上下文时<strong>动态的</strong>，调用函数时创建，调用结束后就会自动释放。</p><blockquote><p>全局执行上下文存在在整个页面的生存周期内，全局执行上下文只有一份<br>函数执行上下文在函数执行结束之后会被销毁</p></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>区别3</p><p>执行上下文对象是从属于所在的作用域<br>全局上下文环境—-&gt;全局作用域<br>函数上下文环境—-&gt;对应的函数作用域</p><h2 id="二-闭包问题"><a href="#二-闭包问题" class="headerlink" title="二 闭包问题"></a>二 闭包问题</h2><h3 id="简单定义"><a href="#简单定义" class="headerlink" title="简单定义"></a>简单定义</h3><p><strong>闭包简单来讲就是一个外部函数里面嵌套一个内部函数，内部函数引用了外部函数的变量等内容，外部函数将内部函数作为返回值(其实也未必要以返回值的形式，只要能够把内部函数传递出去就行），这就是一个闭包。</strong></p><p>有了闭包，这样就可以在外部函数以外的地方调用内部函数，本来一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。但是闭包却可以继续保持对该函数作用域的引用,闭包使得函数可以继续访问定义时的词法作用域。</p><ul><li>优点：使得外部可以访问内部函数等，延长内部函数等的寿命</li><li>缺点：滥用闭包造成内存泄露</li></ul><p>如下为一个简单的闭包：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> inner<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> other<span class="token operator">=</span><span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本来outer函数执行完之后，它的执行上下文应该是会被销毁的，但是通过inner（outer函数的闭包），在outer函数执行结束后还能打印出a的值</p><p><strong>调用栈的变化如下：</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658306075281-82b4dd56-c89c-48b8-8aea-624be31669d3.jpeg"></p><p>其实other函数的执行上下文中并没有变量a，当other函数执行到输入变量a时，其实是从作用域链<strong>other函数作用域–&gt;outer函数的闭包–&gt;全局作用域，</strong></p><h3 id="使用回调函数也是闭包"><a href="#使用回调函数也是闭包" class="headerlink" title="使用回调函数也是闭包"></a>使用回调函数也是闭包</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">'你好呀'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wait（）执行1000毫秒之后，它的内部作用域并不会消失，timer函数依然保持有wait()作用域的闭包</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>模块模式需要具备两个条件</p><p>1.必须有外部封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）</p><p>2.封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</p><p>注意：一个从函数调用所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块。</p><p>单例模块化（IIFE立刻执行函数）</p><p><code>var module=(function m()&#123;</code></p><p><code>var a=&quot;cool&quot;;</code></p><p><code>var b=[1,2,3];</code></p><p><code>function f()&#123;</code></p><p>    <code>console.log(a);</code></p><p><code>&#125;</code></p><p><code>function f1()&#123;</code></p><p>    <code>console.log(b.join(&#39;!&#39;));</code></p><p><code>&#125;</code></p><p><code>return &#123;</code></p><p>    <code>f:f,</code></p><p>    <code>f1:f1</code></p><p><code>&#125;</code></p><p><code>&#125;)();</code></p><p><code>module.f();//&#39;cool&#39;</code></p><p><code>module.f1();//1!2!3</code></p><h2 id="三-this指向问题"><a href="#三-this指向问题" class="headerlink" title="三 this指向问题"></a>三 this指向问题</h2><p>this是在运行是绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p><h4 id="默认绑定-this指向全局对象window"><a href="#默认绑定-this指向全局对象window" class="headerlink" title="默认绑定(this指向全局对象window)"></a>默认绑定(this指向全局对象window)</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上代码中，f()是不带任何修饰的函数引用进行调用的，所以是属于默认绑定</p><h4 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f   <span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况是函数的引用有上下文对象的（obj对象的上下文），所以隐式绑定规则会把函数调用中的this绑定到这个上下文对象</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> obj<span class="token punctuation">:</span>obj<span class="token punctuation">}</span>obj1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用的是最接近的变量a</strong></p><p>注意，<strong>将如上要调用的函数赋值给另外变量后,”隐式“会消失</strong><br>以下3个例子都属于赋值操作，setTimeout()函数实现也是类似的<br>例一:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>   a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>   f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span>obj<span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例二：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token function">fun</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>相当于将f赋值给func</strong></p><p>例三:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>f<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h4><p>指定某个对象为函数调用时的this，<strong>call、apply、bind函数</strong></p><p><strong>call</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>apply</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>argumments<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//argumments是固定变量，不能改名</span><span class="token punctuation">}</span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>bind</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h4><p>所有函数都可以用new来调用，new调用的过程见下文  <strong>使用new操作符创建构造函数的实例整个过程？</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>this四条规则的优先级就不一一细说，new绑定&gt;显式绑定&gt;隐式绑定&gt;默认绑定（可参考《你不知道的javaScript上》91~95页）</li><li>当call、apply、bind需要忽略this绑定时，可以传入null(但是会改变this绑定，函数中如果使用this会绑定到全局对象)，可以用∅。</li><li>还有一种叫软绑定的（好像很复杂。。。。《你不知道的javaScript上》98 有空再看看吧）</li><li>特殊的箭头函数，箭头函数中的this指的是其外层作用域.<br>&#96;&#96;&#96;javascript<br>function f(a){<br>return (a)&#x3D;&gt;{<br> &#x2F;&#x2F;这里面的this是f里的<br> console.log(this.a);<br>  }<br>}</li></ol><p>var obj1&#x3D;{<br>  a:1<br>}</p><p>var obj2&#x3D;{<br>  a:2<br>}</p><p>var other&#x3D;f.call(obj1);<br>other.call(obj2);&#x2F;&#x2F;1</p><pre><code>## 四 构造函数、原型链、继承、类### 构造函数#### 什么是构造函数？其实构造函数和普通函数没有特别的区别，任何普通函数只要使用了new操作符就是构造函数。（一般构造函数名的首字母是大写，普通函数小写），如下#### 使用new操作符创建构造函数的实例整个过程？例如上面例子，1.首先在内存显式创建一个新对象。2.将新对象的[[prototype]]属性赋值为构造函数的prototype属性。3.构造函数内部的this赋值为这个新对象（这个就是this指向的第四种情况）4.执行构造函数内部的代码，给新对象添加属性。5.如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的对象。注意，dog的constructor属性会指向Dog构造函数Dog的prototype属性和dog的 ** proto ** 指向同一个原型对象。#### 构造函数存在的问题？当构造函数里面有定义方法时，创建实例时都会创建方法，而不是指向同一个方法？解决方法？实际上this.sayName=function()&#123;console.log(this.name); &#125;等价于this.sayName=new function()&#123;console.log(this.name);&#125;所以每个实例的方法都不是指向同一个这样就可以了，this指向是第二种隐式绑定上面问题用原型解决更好，使用原型对象的好处就是在原型对象上定义的属性和方法都可以被对象共享（所以在原型对象上定义sayName方法就可以实现应用同一个函数）注意，如果用 下面这样改要加上constructor[[prototype]]是什么？所有对象在创建时都会生成一个[[prototype]]属性（包括函数，对象，数组等Object类型），几乎都会被赋予一个非空的值。介绍一下各种跟原型相关的方法A.isPrototypeOf(B)                 检查A是否是B的原型Object.getPrototypeOf（B）获取B原型对象Object.setPrototypeOf(A,B)   把对象B设置为对象A的原型对象B=Object.create(A)                  把对象A设置为对象B的原型A.hasOwnProperty(&quot;属性&quot;)    A上是否有对应属性，若属性来自原型链则为false&quot;属性&quot; in 对象                            A上是否有对应属性，不管来自本对象还是原型链有就是truehasPrototypeProperty(A,&quot;属性&quot;)    是否只有A的原型有该属性，若A上也有则falsefor...in...                                           遍历对象查找的是整条prototype链(不可枚举的Enumberable:false不可以访问)Object.keys(A)                                 遍历A上可枚举的属性包括prototype链Object.getOwnPropertyNames(A)   遍历A上所有属性无论能否枚举包括prototype链Object.values()                                     接收一个对象返回它们内容的数组，对象值的数组Object.entries()                                    接收一个对象返回它们内容的数组，键值对数组[[prototype]]链应该就是原型链。Dog原型链的整个结构基本如下（但是这个还不是真正的继承）### 继承（补充优缺点...)**原型链继承**举个简单的例子具体原型链如下图![image-20220124151130973.png](https://cdn.nlark.com/yuque/0/2022/png/25385691/1657873908278-b85d5c73-72d0-481c-a93e-00f8760c4869.png#averageHue=%23f4f3f3&amp;clientId=u43e0bddf-219c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=459&amp;id=uab9ba526&amp;name=image-20220124151130973.png&amp;originHeight=688&amp;originWidth=1317&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31101&amp;status=done&amp;style=none&amp;taskId=ufb7f76ee-f4c2-4f23-b233-4ee02a5d754&amp;title=&amp;width=878)其中，实现继承的句子是Sub.prototype=new Super()，实现Sub继承Super最后，s.getSuper(),通过3步搜索s----&gt;Sub.prototype---&gt;Super.prototype最后一步找到这个方法补充：因为所有的引用类型都继承自Object，所以后面省略的是Object.prototype,Object.prototype的方法有如下，所以自定义的引用类型都有以下这些方法。判断继承关系1. A instanceof B        A是否是B的实例（是 true,否 false)2. A.prototype.isPrototypeOf(B)      A是否是B的原型存在的问题1.所有继承的属性和方法都会在对象实例间共享，无法做到实例私有（就是一个实例改变了原型链上的属性或方法，其他实例也会改变）2.子类型在实例化时不能给父类型的构造函数传参盗用构造函数利用call或apply方法和改变this指向，实现继承优点：解决属性共享问题和向父类构造函数传参问题缺点：必须在构造函数中定义方法，函数不能重用。子类也不能访问父类原型上定义的方法。组合继承（最流行的方法）使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例属性（就是方法在原型链上可以重用，属性用盗用构造函数各个实例可不同）缺点：有效率问题，会对父类构造函数调用两次，一次是创建子类原型时，二次是在子类构造函数中调用。原型式继承object函数的原型链图这种继承适合有一个对象，想在它的基础上在创建一个新对象。类似于复制一个对象，然后再对其进行添加。Object.create()和object方法效果相同。寄生式继承其实就是对原型式继承的封装而已，缺点是难以重用。寄生式组合继承（这种应该是最有效的继承方式了）其实就是通过寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。五.对象有## 深拷贝和浅拷贝### 定义深拷贝：拷贝的是整个变量，对于引用变量实现的是完全克隆，与原来变量完全没有联系浅拷贝：只拷贝第一层，对于引用变量实现的是地址引用### 实现方法**浅拷贝**1. Object.assign()2. 展开运算符...3. Array.prototype.concat()4. Array.prototype.slice()</code></pre><p>let obj&#x3D;{<br>    a:1,<br>    b:{<br>        c:2<br>    }<br>}<br>let obj1&#x3D;Object.assign({},obj);<br>console.log(obj1.b&#x3D;&#x3D;&#x3D;obj.b);&#x2F;&#x2F;true<br>let obj2&#x3D;{…obj};<br>console.log(obj2.b&#x3D;&#x3D;&#x3D;obj.b)&#x2F;&#x2F;true</p><p>let arr&#x3D;[1,2,{<br>    f:3<br>}]<br>let arr1&#x3D;arr.concat();<br>console.log(arr1.f&#x3D;&#x3D;&#x3D;arr.f);&#x2F;&#x2F;true<br>let arr2&#x3D;arr.slice();<br>console.log(arr2.f&#x3D;&#x3D;&#x3D;arr.f)</p><pre><code>**深拷贝**1.  JSON.parse(JSON.stringify()) 2.  递归 ```javascriptlet obj=&#123;    a:1,    b:&#123;        c:2    &#125;&#125;let obj4=JSON.parse(JSON.stringify(obj))console.log(obj4.b===obj.b)//false//递归待补充.....</code></pre><h2 id="异步问题"><a href="#异步问题" class="headerlink" title="异步问题"></a>异步问题</h2><h3 id="浏览器中的进程、线程、执行机制"><a href="#浏览器中的进程、线程、执行机制" class="headerlink" title="浏览器中的进程、线程、执行机制"></a>浏览器中的进程、线程、执行机制</h3><p>进程与线程的概念具体看操作系统（正在学）</p><p>进程中可以有多个线程并发执行</p><p><strong>js代码怎么执行</strong></p><p>从上往下执行，一行报错后面不执行，先同步后异步</p><p><strong>浏览器有多个线程</strong></p><p>多个线程互相配合从而渲染出页面，这些线程包括了</p><ol><li>js引擎线程：负责执行JS代码</li><li>GUI线程：主要负责将DOM元素渲染到页面上</li><li>http网络请求线程：负责网络请求</li><li>实时触发线程：触发定时器setTimeout、setInterval</li><li>浏览器事件处理线程：onclick，onmouseover</li></ol><p>而UI主线程则负责管理以上这些线程</p><p>js线程和GUI线程是互斥的（跟微任务和宏任务有关）</p><p><strong>JS引擎线程是单线程</strong>？</p><p>因为多线程会很难管理(比如,一个线程是添加一个Dom元素,另一个线程是删除DOM元素就会产生矛盾，不好处理)</p><p><strong>3-5的线程是异步的</strong></p><p>这三个线程被触发后并不会立即执行，而是被推入到一个叫任务队列（eventloop）的地方去，</p><p><strong>UI线程协调运转各个线程</strong></p><p><strong>事件循环&#x2F;轮询</strong></p><p><img src="/JavaScript%E5%9F%BA%E7%A1%80.assets/%E4%BA%8B%E4%BB%B6%E8%BD%AE%E8%AF%A2.png#crop=0&crop=0&crop=1&crop=1&id=eEFDO&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><strong>宏任务(macroTask)和微任务（microTask)</strong></p><p>为什么有宏任务、微任务？</p><p>为了有些异步任务可以优先执行，不然有新的异步任务只能插入callback queue的队尾。</p><p>宏任务：script(整体代码）、setTimeout、setInterval、ajax、DOM事件、MessageChannel、requestAnimationFrame、I&#x2F;O、UI交互事件<br>微任务：promise、async&#x2F;await、MutationObserver(html5)、Object.observe、process.nextTick</p><p><strong>为什么宏任务比微任务先执行</strong>（这里还要再补充。。。）</p><p>微任务是ES6语法规定的，而宏任务是由浏览器规定的</p><p><strong>微任务执行过程</strong></p><p><img src="/JavaScript%E5%9F%BA%E7%A1%80.assets/image-20220320142144591.png#crop=0&crop=0&crop=1&crop=1&id=ALIkg&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><strong>完整执行过程</strong></p><p><img src="/JavaScript%E5%9F%BA%E7%A1%80.assets/image-20220320144347510.png#crop=0&crop=0&crop=1&crop=1&id=l57bz&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"select"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> select<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> p1<span class="token operator">=</span><span class="token string">"&lt;p>DOM 渲染&lt;/p>"</span><span class="token punctuation">;</span>    select<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>p1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//微任务</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'微任务。。。。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"宏任务。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span class="token comment" spellcheck="true">//123</span><span class="token comment" spellcheck="true">//微任务</span><span class="token comment" spellcheck="true">//DOM渲染</span><span class="token comment" spellcheck="true">//宏任务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有关单线程的，执行栈、任务队列、同步任务、异步任务</p><p>（涉及一些操作系统暑假再总结）</p><p>let promise&#x3D;new Promise((resolve,reject)&#x3D;&gt;{</p><p>    resolve(‘success’)                                                                      promise.then(resolve&#x3D;&gt;{}).catch(reject&#x3D;&gt;{})</p><p>})</p><p>Promise.resolve(‘success’)&#x2F;Promise.reject(‘fail’)</p><p>promise.all([p1,p2]).then().catch()  (p1,p2是两个promise对象，p1,p2都成功才then)</p><p>promise.race([p1,p2]).then().catch() (p1,p2是两个promise对象，p1,p2先的成功就then)</p><p>asyn function….   asyn返回会延迟，会继续执行后面语句，asyn返回后会继续</p><p>await function  不延迟，await执行完再继续</p><h2 id="什么是柯里化？"><a href="#什么是柯里化？" class="headerlink" title="什么是柯里化？"></a>什么是柯里化？</h2><p>柯里化其实是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p><pre><code> function f(a,b)&#123;      return a+b;  &#125;  //这个就是简单的柯里化  function f1(a)&#123;      return function f2(b)&#123;          return a+b;      &#125;  &#125;  f(1,2);//3  f1(1)(2);//3</code></pre><p>它的好处？（待补充。。。）</p><h2 id="什么是防抖、节流？"><a href="#什么是防抖、节流？" class="headerlink" title="什么是防抖、节流？"></a>什么是防抖、节流？</h2><p>可继续补充。。。。</p><table><thead><tr><th></th><th>定义</th><th>场景</th></tr></thead><tbody><tr><td>防抖debounce</td><td>频繁去触发一个事件，只发送最后一次</td><td>1、input框输入时频繁触发事件可加防抖 2.频繁点击按钮提交表单可加防抖</td></tr><tr><td>节流throttle</td><td>频繁去触发一个事件，但是只能每隔一段时间触发一次</td><td>1、鼠标不断点击触发，mousedown(单位时间内只触发一次)  2、监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</td></tr></tbody></table><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h2 id="V8垃圾回收机制"><a href="#V8垃圾回收机制" class="headerlink" title="V8垃圾回收机制"></a>V8垃圾回收机制</h2><h3 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h3><h4 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h4><p>调用栈中的执行上下文中存放了相应的变量环境，其中原始类型数据的数据值是直接保存在栈里,而引用类型保存的是引用地址，其值是存放在堆中。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天是周五~~"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658386585910-b1613021-4520-4082-8b0a-3839c01489b2.jpeg"></p><h4 id="栈中数据回收"><a href="#栈中数据回收" class="headerlink" title="栈中数据回收"></a>栈中数据回收</h4><p>栈中数据的回收是通过栈顶指针ESP下移实现的<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658387202021-a4b683df-58a3-442e-8ff7-1ea9b0147acb.jpeg"></p><h3 id="V8垃圾回收器"><a href="#V8垃圾回收器" class="headerlink" title="V8垃圾回收器"></a>V8垃圾回收器</h3><p>堆中存放数据的回收就需要用到垃圾回收器了</p><h4 id="代际假说"><a href="#代际假说" class="headerlink" title="代际假说"></a>代际假说</h4><p>代际假说（The Generational Hypothesis）的内容，这是垃圾回收领域中一个重要的术语，后续垃圾回收的策略都是建立在该假说的基础之上的，所以很是重要。<br><strong>代际假说有以下两个特点：</strong></p><ul><li>第一个是大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问；</li><li>第二个是不死的对象，会活得更久。</li></ul><p>其实这两个特点不仅仅适用于 JavaScript，同样适用于大多数的动态语言，如 Java、Python 等。<br><strong>V8是采用分代垃圾回收机制</strong><br>在 V8 中会把堆分为新生代和老生代两个区域，新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象。（新生代的容量比老生代小）</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span> 新生代   <span class="token operator">|</span>   老生代                       <span class="token operator">|</span>  V8分代 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="垃圾回收器工作流程"><a href="#垃圾回收器工作流程" class="headerlink" title="垃圾回收器工作流程"></a>垃圾回收器工作流程</h4><p>第一步，标记空间中活动对象和非活动对象。所谓活动对象就是还在使用的对象，非活动对象就是可以进行垃圾回收的对象。<br>第二步，回收非活动对象所占据的内存。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象。<br>第三步，做内存整理。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为<strong>内存碎片</strong>。当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存的时候，就有可能出现内存不足的情况。</p><h3 id="新生代垃圾回收"><a href="#新生代垃圾回收" class="headerlink" title="新生代垃圾回收"></a>新生代垃圾回收</h3><h4 id="新生代垃圾回收过程"><a href="#新生代垃圾回收过程" class="headerlink" title="新生代垃圾回收过程"></a>新生代垃圾回收过程</h4><p>新生代实行垃圾回收的是<strong>副垃圾回收器，</strong>使用Scavenge 算法来处理。所谓 Scavenge 算法，是把新生代空间对半划分为两个区域，一半是对象区域（from区），一半是空闲区域（to区）。<br>新加入的对象都会存放到对象区域，当对象区域快被写满时，就需要执行一次垃圾<strong>清理操作</strong>。</p><ol><li>标记对象，留下活动对象，清除非活动对象</li><li>把存活的活动对象复制到空闲区</li><li>将对象区域和空闲区域进行翻转，原来对象区域变成空闲区域，空闲区域变成对象区域，循环反复进行。</li></ol><p> Scavenge 算法是典型的牺牲空间换时间的方法，只利用了新生代中的对象区，但是每次都需要将存活的对象从对象区域复制到空闲区域，但复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以为了执行效率，一般新生区的空间会被设置得比较小。</p><h4 id="对象晋升"><a href="#对象晋升" class="headerlink" title="对象晋升"></a>对象晋升</h4><p>因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了对象晋升策略，新生代对象会被移动到老生区中，这就是<strong>晋升</strong><br><strong>晋升条件</strong></p><ul><li><p>对象是否经历过一次Scavenge算法（通过内存地址判断）</p></li><li><p>To空间的内存占比是否已经超过25%</p><h3 id="老生代垃圾回收"><a href="#老生代垃圾回收" class="headerlink" title="老生代垃圾回收"></a>老生代垃圾回收</h3><p>主垃圾回收器主要负责老生区中的垃圾回收。除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。<br>主垃圾回收器是采用<strong>标记 - 清除</strong>（Mark-Sweep）和<strong>标记-整理</strong>（Mark-Compact）的算法进行垃圾回收的。</p><h4 id="Mark-Sweep（标记-清除）"><a href="#Mark-Sweep（标记-清除）" class="headerlink" title="Mark-Sweep（标记 - 清除）"></a>Mark-Sweep（标记 - 清除）</h4><p>顾名思义就是进行标记和清除，</p></li><li><p>标记，就是遍历堆中的对象，标记存活着的对象</p></li><li><p>清除，就是清除没有被标记的对象</p></li></ul><p>但是标记清除后会存在许多内存碎片，所以还要进行整理</p><h4 id="Mark-Compact-标记-整理"><a href="#Mark-Compact-标记-整理" class="headerlink" title="Mark-Compact(标记-整理)"></a>Mark-Compact(标记-整理)</h4><p>如果学过操作系统的话应该会懂什么是内存碎片，操作系统内存管理就需要处理内存碎片<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658390141987-78876bf3-f53c-46db-a05a-e6f2a73edc64.jpeg"></p><p> 就是将存活的对象移动到一段，把空闲的碎片合并</p><h3 id="V8垃圾回收存在的问题和解决"><a href="#V8垃圾回收存在的问题和解决" class="headerlink" title="V8垃圾回收存在的问题和解决"></a>V8垃圾回收存在的问题和解决</h3><h4 id="全停顿"><a href="#全停顿" class="headerlink" title="全停顿"></a>全停顿</h4><p>由于 JavaScript 是运行在主线程之上的，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做全停顿（Stop-The-World）<br>这种停顿对新生代的垃圾回收影响并不大，但是对<strong>老生代</strong>影响就比较明显了，容易造成<strong>卡顿</strong></p><h4 id="增量标记"><a href="#增量标记" class="headerlink" title="增量标记"></a>增量标记</h4><p>为了减小停顿时间带来的影响，V8 引入了增量标记，即将可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，这样就不会长时间无响应。  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/01/28/Vue-router%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A01/"/>
      <url>/2023/01/28/Vue-router%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-router简介"><a href="#Vue-router简介" class="headerlink" title="Vue-router简介"></a>Vue-router简介</h1><h2 id="vue-router是什么？"><a href="#vue-router是什么？" class="headerlink" title="vue-router是什么？"></a>vue-router是什么？</h2><p>官网的介绍是这么说的，Vue Router 是 Vue.js官方的路由管理器，它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。<br>它的功能有：</p><ul><li>嵌套的路由&#x2F;视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2>&#96;&#96;&#96;javascript<br>import Vue from ‘vue’<br>import Router from ‘vue-router’<br>import App from ‘.&#x2F;App’</li></ul><p>&#x2F;&#x2F;通过Vue.use安装路由插件<br>Vue.use(Router)</p><p>&#x2F;&#x2F;配置组件对应的路由<br>const routes &#x3D; [<br>  { path: ‘&#x2F;foo’, component: Foo },<br>  { path: ‘&#x2F;bar’, component: Bar },<br>]</p><p>&#x2F;&#x2F;创建 router 实例，然后传 routes 配置<br>const router &#x3D; new Router({<br>  routes,<br>})</p><p>&#x2F;&#x2F;创建和挂载根实例，通过 router 配置参数注入路由，<br>const app &#x3D; new Vue({<br>  el: ‘#app’,<br>  render(h) {<br>    return h(App)<br>  },<br>  router,<br>})</p><pre><code># 源码学习## 主要源码目录src文件目录```javascript│ ├──components│ │ ├── link.js # 实现router-link组件│ │ └── view.js # 实现router-view组件 │ ├── history # 四种路由模式│ │ ├── abstract.js # abstract模式│ │ ├── base.js # 基本模式│ │ ├── hash.js # 哈希模式│ │ └── html5.js # html5模式 │ ├── util # 许多工具方法| |  |__xxx.js| |   ...├── create-matcher.js # 创建matcher├── create-route-map.js # 创建route-map├── install.js # 路由插件下载方法└── index.js # 入口文件</code></pre><h2 id="路由注册"><a href="#路由注册" class="headerlink" title="路由注册"></a>路由注册</h2><p><code>vue-router</code>其实就是一个插件，在<code>vue</code>项目中，使用的一步是安装路由，安装路由用到的就是<code>Vue</code>的全局   ——<code>Vue.use</code>，在<code>vue2</code>的源码学习中有学习过<code>Vue.use()</code>，现在再来看一遍</p><h3 id="Vue-use-plugin"><a href="#Vue-use-plugin" class="headerlink" title="Vue.use(plugin)"></a>Vue.use(plugin)</h3><p>用法：安装<code>Vue.js</code>插件。<br>参数：<code>&#123;Object|Function&#125;plugin</code><br>原理：<br>如果插件是一个对象则必须提供install方法，如果插件是一个函数，它会被作为install方法。调用install方法时，会将Vue作为参数传入，install方法被同一个插件多次使用，插件也只会安装一次。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> toArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">export</span> <span class="token keyword">function</span> initUse <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>use <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">:</span> Function <span class="token operator">|</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> installedPlugins <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//不重复安装插件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedPlugins<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// toArray方法就是将类数组转成真正的数组,并且得到除了第一个参数外的其他参数</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//把Vue作为args第一个参数</span>    args<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin<span class="token punctuation">.</span>install <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      plugin<span class="token punctuation">.</span>install<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      plugin<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    installedPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="install方法"><a href="#install方法" class="headerlink" title="install方法"></a>install方法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> View <span class="token keyword">from</span> <span class="token string">'./components/view'</span><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">'./components/link'</span><span class="token comment" spellcheck="true">//_Vue是用来存Vue的</span><span class="token keyword">export</span> <span class="token keyword">let</span> _Vue<span class="token comment" spellcheck="true">//这里的Vue就是上面Vue.use传入的第一个参数</span><span class="token keyword">export</span> <span class="token keyword">function</span> install <span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//不重复安装</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>install<span class="token punctuation">.</span>installed <span class="token operator">&amp;&amp;</span> _Vue <span class="token operator">===</span> Vue<span class="token punctuation">)</span> <span class="token keyword">return</span>  install<span class="token punctuation">.</span>installed <span class="token operator">=</span> <span class="token boolean">true</span>  _Vue <span class="token operator">=</span> Vue    <span class="token comment" spellcheck="true">//isDef判断v是否是Vue的根实例</span>  <span class="token keyword">const</span> isDef <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">!==</span> undefined  <span class="token comment" spellcheck="true">//为router-view 组件关联路由组件</span>  <span class="token keyword">const</span> registerInstance <span class="token operator">=</span> <span class="token punctuation">(</span>vm<span class="token punctuation">,</span> callVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//父节点</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_parentVnode    <span class="token comment" spellcheck="true">// i.registerRouteInstance判断父组件是否是router-view组件，如果是则关联当前vm,即将当前vm作为router-view的路由组件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>registerRouteInstance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">i</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> callVal<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//混入一些内容到Vue的初始化参数options中</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//this是Vue的根实例</span>  <span class="token comment" spellcheck="true">//为什么是beforeCreate而不是created呢？因为如果是在created操作的话，$options已经初始化好了。</span>    beforeCreate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果当前组件是根组件</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根组件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 保存VueRouter实例，this.$options.router仅存在于Vue根实例上，其它Vue组件不包含此属性，这句只会执行一次</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router        <span class="token keyword">this</span><span class="token punctuation">.</span>_router<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//响应式定义_route属性，保证_route发生变化时，组件会重新渲染</span>        Vue<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'_route'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_router<span class="token punctuation">.</span>history<span class="token punctuation">.</span>current<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果是子组件，将根组件挂载到子组件上</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>_routerRoot<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//为router-view组件关联路由组件</span>      <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    destroyed <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//取消router-view和路由组件的关联</span>      <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将$router挂载到Vue原型上</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'$router'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot<span class="token punctuation">.</span>_router <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//挂载$route</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'$route'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot<span class="token punctuation">.</span>_route <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//注册 router-view router-link 为全局组件</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'RouterView'</span><span class="token punctuation">,</span> View<span class="token punctuation">)</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'RouterLink'</span><span class="token punctuation">,</span> Link<span class="token punctuation">)</span>  <span class="token keyword">const</span> strats <span class="token operator">=</span> Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>optionMergeStrategies  <span class="token comment" spellcheck="true">//路由守卫</span>  <span class="token comment" spellcheck="true">// use the same hook merging strategy for route hooks</span>  strats<span class="token punctuation">.</span>beforeRouteEnter <span class="token operator">=</span> strats<span class="token punctuation">.</span>beforeRouteLeave <span class="token operator">=</span> strats<span class="token punctuation">.</span>beforeRouteUpdate <span class="token operator">=</span> strats<span class="token punctuation">.</span>created<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>router-view</code>里有<code>registerRouteInstance</code>方法</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'RouterView'</span><span class="token punctuation">,</span>  render <span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         data<span class="token punctuation">.</span>registerRouteInstance <span class="token operator">=</span> <span class="token punctuation">(</span>vm<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// val could be undefined for unregistration</span>      <span class="token keyword">const</span> current <span class="token operator">=</span> matched<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span>val <span class="token operator">&amp;&amp;</span> current <span class="token operator">!==</span> vm<span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token punctuation">(</span><span class="token operator">!</span>val <span class="token operator">&amp;&amp;</span> current <span class="token operator">===</span> vm<span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        matched<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> val      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<br>当执行Vue.use(Router)时是执行Router的install方法，install方法的执行过程：</p><ul><li><p>检查安装，避免重复安装插件</p></li><li><p>存储Vue变量，install方法被调用时， Vue.use()的时候会把 vue 传入作为第一个参数</p></li><li><p>注册了一个全局混入：注册了两个生命周期钩子 beforeCreate 和 destroyed，因为是 vue 的 mixin 方法，所以注册时不会调用，只有 vue 执行钩子时调用</p></li><li><p>添加实例属性、方法：在 Vue 原型上注入$router、$route 属性，方便在 vue 实例中通过 this.$router、this.$route 快捷访问</p></li><li><p>注册 router-view、router-link 全局组件</p></li><li><p>设置路由组件守卫</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h3><p>&#96;&#96;&#96;javascript<br>export default class VueRouter {<br>static install: () &#x3D;&gt; void<br>static version: string<br>static isNavigationFailure: Function<br>static NavigationFailureType: any<br>static START_LOCATION: Route</p><p>app: any<br>apps: Array<any><br>ready: boolean<br>readyCbs: Array<Function><br>options: RouterOptions<br>mode: string<br>history: HashHistory | HTML5History | AbstractHistory<br>matcher: Matcher<br>fallback: boolean<br>beforeHooks: Array&lt;?NavigationGuard&gt;<br>resolveHooks: Array&lt;?NavigationGuard&gt;<br>afterHooks: Array&lt;?AfterNavigationHook&gt;</p><p>constructor (options: RouterOptions &#x3D; {}) {<br>  if (process.env.NODE_ENV !&#x3D;&#x3D; ‘production’) {<br>warn(this instanceof VueRouter, <code>Router must be called with the new operator.</code>)<br>  }<br>  this.app &#x3D; null&#x2F;&#x2F;挂载的实例<br>  this.apps &#x3D; [] &#x2F;&#x2F;支持多实例<br>  this.options &#x3D; options &#x2F;&#x2F;接收的参数<br>  this.beforeHooks &#x3D; [] &#x2F;&#x2F;beforeEach hook<br>  this.resolveHooks &#x3D; [] &#x2F;&#x2F;beforeResolve hook<br>  this.afterHooks &#x3D; [] &#x2F;&#x2F;afterEach hook<br>  this.matcher &#x3D; createMatcher(options.routes || [], this) &#x2F;&#x2F;路由匹配器</p><p>  let mode &#x3D; options.mode || ‘hash’ &#x2F;&#x2F;模式默认是hash<br>  &#x2F;&#x2F;判断是否可以回退<br>  this.fallback &#x3D;<br>mode &#x3D;&#x3D;&#x3D; ‘history’ &amp;&amp; !supportsPushState &amp;&amp; options.fallback !&#x3D;&#x3D; false<br>  &#x2F;&#x2F;如果可以回退就是hash模式<br>  if (this.fallback) {<br>mode &#x3D; ‘hash’<br>  }<br>  &#x2F;&#x2F;非浏览器环境强制用abstract模式<br>  if (!inBrowser) {<br>mode &#x3D; ‘abstract’<br>  }<br>  this.mode &#x3D; mode<br>  &#x2F;&#x2F;根据不同的模式创建不同的history实例<br>  switch (mode) {<br>case ‘history’:<br>  this.history &#x3D; new HTML5History(this, options.base)<br>  break<br>case ‘hash’:<br>  this.history &#x3D; new HashHistory(this, options.base, this.fallback)<br>  break<br>case ‘abstract’:<br>  this.history &#x3D; new AbstractHistory(this, options.base)<br>  break<br>default:<br>  if (process.env.NODE_ENV !&#x3D;&#x3D; ‘production’) {<br>    assert(false, <code>invalid mode: $&#123;mode&#125;</code>)<br>  }<br>  }<br>}<br>&#x2F;&#x2F;一些方法<br>init (app: any &#x2F;* Vue component instance *&#x2F;) {}<br>match (raw: RawLocation, current?: Route, redirectedFrom?: Location): Route {}<br>get currentRoute (): ?Route {}<br>…</p></li></ul><p>}</p><pre><code>`VueRouter`的constructor根据传入的option参数，初始化了全局守卫数组（beforeEach、beforeResolve、afterEach)、匹配器(matcher)、模式（mode）等变量### Init初始化```javascript init (app: any /* Vue component instance */) &#123;    // 开发环境，确保已经安装VueRouter    process.env.NODE_ENV !== &#39;production&#39; &amp;&amp;      assert(        install.installed,        `not installed. Make sure to call \`Vue.use(VueRouter)\` ` +          `before creating root instance.`      )    //保存根实例    this.apps.push(app)    // set up app destroyed handler    // https://github.com/vuejs/vue-router/issues/2639   // 绑定destroyed hook，避免内存泄露，一次性钩子    app.$once(&#39;hook:destroyed&#39;, () =&gt; &#123;      // clean out app from this.apps array once destroyed      const index = this.apps.indexOf(app)      if (index &gt; -1) this.apps.splice(index, 1)      // ensure we still have a main app or null if no apps      // we do not release the router so it can be reused      if (this.app === app) this.app = this.apps[0] || null      // 需要确保始终有个主应用      if (!this.app) this.history.teardown()    &#125;)          // main app previously initialized    // return as we don&#39;t need to set up new history listener    //不重复监听    if (this.app) &#123;      return    &#125;    this.app = app    const history = this.history    if (history instanceof HTML5History || history instanceof HashHistory) &#123;      const handleInitialScroll = routeOrError =&gt; &#123;        const from = history.current        const expectScroll = this.options.scrollBehavior        const supportsScroll = supportsPushState &amp;&amp; expectScroll        if (supportsScroll &amp;&amp; &#39;fullPath&#39; in routeOrError) &#123;          handleScroll(this, routeOrError, from, false)        &#125;      &#125;            const setupListeners = routeOrError =&gt; &#123;        history.setupListeners()        handleInitialScroll(routeOrError)      &#125;      // 统一执行history类上的改变路由方法      history.transitionTo(        history.getCurrentLocation(),//hash是获取带#的路径，history是获取/的路径        setupListeners,        setupListeners      )    &#125;    // 调用父类的listen方法，添加回调；    // 回调会在父类的updateRoute方法被调用时触发，重新为app._route赋值    // 由于app._route被定义为响应式，所以app._route发生变化，依赖app._route的组件(route-view组件)都会被重新渲染    history.listen(route =&gt; &#123;      this.apps.forEach(app =&gt; &#123;        app._route = route      &#125;)    &#125;)  &#125;</code></pre><p>总结：</p><ol><li>检查了VueRouter是否已经安装</li><li>保存了挂载router实例的vue实例</li><li>注册了一个一次性钩子destroyed，在destroyed时，卸载this.app，避免内存泄露</li><li>检查了this.app，避免重复事件监听</li><li>调用父类transitionTo跳转页面<h2 id="VueRouter的构造函数"><a href="#VueRouter的构造函数" class="headerlink" title="VueRouter的构造函数"></a>VueRouter的构造函数</h2><h3 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h3><h4 id="matcher的数据结构"><a href="#matcher的数据结构" class="headerlink" title="matcher的数据结构"></a>matcher的数据结构</h4>&#96;&#96;&#96;javascript<br>export type Matcher &#x3D; {<br>  &#x2F;&#x2F;匹配方法  RawLocation可以是一个url字符串也可以是一个Location<br>  match: (raw: RawLocation, current?: Route, redirectedFrom?: Location) &#x3D;&gt; Route;<br>  &#x2F;&#x2F;添加路由<br>  addRoutes: (routes: Array<RouteConfig>) &#x3D;&gt; void;<br>  addRoute: (parentNameOrRoute: string | RouteConfig, route?: RouteConfig) &#x3D;&gt; void;<br>  &#x2F;&#x2F;获取路由<br>  getRoutes: () &#x3D;&gt; Array<RouteRecord>;<br>};<br>&#x2F;&#x2F;Route对象<br>const route: Route &#x3D; {<br> name: location.name || (record &amp;&amp; record.name),<br> meta: (record &amp;&amp; record.meta) || {},<br> path: location.path || ‘&#x2F;‘,<br> hash: location.hash || ‘’,<br> query,<br> params: location.params || {},<br> fullPath: getFullPath(location, stringifyQuery),<br> matched: record ? formatMatch(record) : []<br>  }<br>  if (redirectedFrom) {<br> route.redirectedFrom &#x3D; getFullPath(redirectedFrom, stringifyQuery)<br>  }<br>  return Object.freeze(route)<br>}</li></ol><pre><code>#### matcher构造函数```javascriptexport function createMatcher (  routes: Array&lt;RouteConfig&gt;,//路由配置表  router: VueRouter //VueRouter实例): Matcher &#123;  //createRouteMap根据传入的路由配置表，创建路由映射表  const &#123; pathList, pathMap, nameMap &#125; = createRouteMap(routes)  //动态添加路由  function addRoutes (routes) &#123;    createRouteMap(routes, pathList, pathMap, nameMap)  &#125;  //添加单条路由  function addRoute (parentOrRoute, route) &#123;    //父路由    const parent = (typeof parentOrRoute !== &#39;object&#39;) ? nameMap[parentOrRoute] : undefined    // $flow-disable-line    createRouteMap([route || parentOrRoute], pathList, pathMap, nameMap, parent)    // add aliases of parent    //如果父路由有别名    if (parent &amp;&amp; parent.alias.length) &#123;      createRouteMap(        // $flow-disable-line route is defined if parent is        parent.alias.map(alias =&gt; (&#123; path: alias, children: [route] &#125;)),        pathList,        pathMap,        nameMap,        parent      )    &#125;  &#125;  function getRoutes () &#123;    //根据路径匹配路由    return pathList.map(path =&gt; pathMap[path])  &#125;  function match (    raw: RawLocation,    currentRoute?: Route,    redirectedFrom?: Location  ): Route &#123;    //根据当前路由格式化路径    const location = normalizeLocation(raw, currentRoute, false, router)    //路径名称    const &#123; name &#125; = location      if (name) &#123;        //根据路径名称找Route对象      const record = nameMap[name]      if (process.env.NODE_ENV !== &#39;production&#39;) &#123;        warn(record, `Route with name &#39;$&#123;name&#125;&#39; does not exist`)      &#125;      //匹配不到Route      if (!record) return _createRoute(null, location)      //获取record非可选的参数      const paramNames = record.regex.keys        .filter(key =&gt; !key.optional)        .map(key =&gt; key.name)      if (typeof location.params !== &#39;object&#39;) &#123;        location.params = &#123;&#125;      &#125;      //currentRoute和Record都有，而loaction没有的参数更新到locaion上      if (currentRoute &amp;&amp; typeof currentRoute.params === &#39;object&#39;) &#123;        for (const key in currentRoute.params) &#123;          if (!(key in location.params) &amp;&amp; paramNames.indexOf(key) &gt; -1) &#123;            location.params[key] = currentRoute.params[key]          &#125;        &#125;      &#125;      //根据 record.path 和 location.path 计算出 location.path      location.path = fillParams(record.path, location.params, `named route &quot;$&#123;name&#125;&quot;`)      return _createRoute(record, location, redirectedFrom)    &#125; else if (location.path) &#123;      //      location.params = &#123;&#125;      for (let i = 0; i &lt; pathList.length; i++) &#123;        const path = pathList[i]        const record = pathMap[path]        if (matchRoute(record.regex, location.path, location.params)) &#123;          return _createRoute(record, location, redirectedFrom)        &#125;      &#125;    &#125;    // no match    return _createRoute(null, location)  &#125;  //重定位  function redirect (    record: RouteRecord,    location: Location  ): Route &#123;    const originalRedirect = record.redirect    let redirect = typeof originalRedirect === &#39;function&#39;      ? originalRedirect(createRoute(record, location, null, router))      : originalRedirect    if (typeof redirect === &#39;string&#39;) &#123;      redirect = &#123; path: redirect &#125;    &#125;    if (!redirect || typeof redirect !== &#39;object&#39;) &#123;      if (process.env.NODE_ENV !== &#39;production&#39;) &#123;        warn(          false, `invalid redirect option: $&#123;JSON.stringify(redirect)&#125;`        )      &#125;      return _createRoute(null, location)    &#125;    const re: Object = redirect    const &#123; name, path &#125; = re    let &#123; query, hash, params &#125; = location    query = re.hasOwnProperty(&#39;query&#39;) ? re.query : query    hash = re.hasOwnProperty(&#39;hash&#39;) ? re.hash : hash    params = re.hasOwnProperty(&#39;params&#39;) ? re.params : params    if (name) &#123;      // resolved named direct      const targetRecord = nameMap[name]      if (process.env.NODE_ENV !== &#39;production&#39;) &#123;        assert(targetRecord, `redirect failed: named route &quot;$&#123;name&#125;&quot; not found.`)      &#125;      return match(&#123;        _normalized: true,        name,        query,        hash,        params      &#125;, undefined, location)    &#125; else if (path) &#123;      // 1. resolve relative redirect      const rawPath = resolveRecordPath(path, record)      // 2. resolve params      const resolvedPath = fillParams(rawPath, params, `redirect route with path &quot;$&#123;rawPath&#125;&quot;`)      // 3. rematch with existing query and hash      return match(&#123;        _normalized: true,        path: resolvedPath,        query,        hash      &#125;, undefined, location)    &#125; else &#123;      if (process.env.NODE_ENV !== &#39;production&#39;) &#123;        warn(false, `invalid redirect option: $&#123;JSON.stringify(redirect)&#125;`)      &#125;      return _createRoute(null, location)    &#125;  &#125;  function alias (    record: RouteRecord,    location: Location,    matchAs: string  ): Route &#123;    const aliasedPath = fillParams(matchAs, location.params, `aliased route with path &quot;$&#123;matchAs&#125;&quot;`)    const aliasedMatch = match(&#123;      _normalized: true,      path: aliasedPath    &#125;)    if (aliasedMatch) &#123;      const matched = aliasedMatch.matched      const aliasedRecord = matched[matched.length - 1]      location.params = aliasedMatch.params      return _createRoute(aliasedRecord, location)    &#125;    return _createRoute(null, location)  &#125;  function _createRoute (    record: ?RouteRecord,    location: Location,    redirectedFrom?: Location  ): Route &#123;    if (record &amp;&amp; record.redirect) &#123;      return redirect(record, redirectedFrom || location)    &#125;    if (record &amp;&amp; record.matchAs) &#123;      return alias(record, location, record.matchAs)    &#125;    return createRoute(record, location, redirectedFrom, router)  &#125;  return &#123;    match,    addRoute,    getRoutes,    addRoutes  &#125;&#125;</code></pre><h3 id="create-route-map"><a href="#create-route-map" class="headerlink" title="create-route-map"></a>create-route-map</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> createRouteMap <span class="token punctuation">(</span>  routes<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>RouteConfig<span class="token operator">></span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//路由配置表</span>  oldPathList<span class="token operator">?</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span>  oldPathMap<span class="token operator">?</span><span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  oldNameMap<span class="token operator">?</span><span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  parentRoute<span class="token operator">?</span><span class="token punctuation">:</span> RouteRecord<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  pathList<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span>  pathMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  nameMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//旧的相关变量存在即用旧的初始化，没有则创建为空</span>  <span class="token comment" spellcheck="true">// the path list is used to control path matching priority</span>  <span class="token keyword">const</span> pathList<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">=</span> oldPathList <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// $flow-disable-line</span>  <span class="token keyword">const</span> pathMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span> <span class="token operator">=</span> oldPathMap <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// $flow-disable-line</span>  <span class="token keyword">const</span> nameMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span> <span class="token operator">=</span> oldNameMap <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//遍历路由配置对象生成路由记录</span>  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">addRouteRecord</span><span class="token punctuation">(</span>pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">,</span> nameMap<span class="token punctuation">,</span> route<span class="token punctuation">,</span> parentRoute<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//确保*在路由列表最后</span>  <span class="token comment" spellcheck="true">// ensure wildcard routes are always at the end</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> pathList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pathList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pathList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      l<span class="token operator">--</span>      i<span class="token operator">--</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// warn if routes do not include leading slashes</span>    <span class="token keyword">const</span> found <span class="token operator">=</span> pathList    <span class="token comment" spellcheck="true">// check for missing leading slash</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>path <span class="token operator">=</span><span class="token operator">></span> path <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'*'</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> pathNames <span class="token operator">=</span> found<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>path <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`Non-nested routes must include a leading slash character. Fix the following routes: \n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pathNames<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    pathList<span class="token punctuation">,</span>    pathMap<span class="token punctuation">,</span>    nameMap  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：createRouteMap做的事情比较简单，先初始化pathList、pathMap、nameMap，遍历routes添加路由记录，将*的路由添加在路由表末尾</p><h3 id="addRouteRecord"><a href="#addRouteRecord" class="headerlink" title="addRouteRecord"></a><strong>addRouteRecord</strong></h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> addRouteRecord <span class="token punctuation">(</span>  pathList<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span>  pathMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  nameMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  route<span class="token punctuation">:</span> RouteConfig<span class="token punctuation">,</span>  parent<span class="token operator">?</span><span class="token punctuation">:</span> RouteRecord<span class="token punctuation">,</span>  matchAs<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> path<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> route  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assert</span><span class="token punctuation">(</span>path <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`"path" is required in a route configuration.`</span></span><span class="token punctuation">)</span>    <span class="token function">assert</span><span class="token punctuation">(</span>      <span class="token keyword">typeof</span> route<span class="token punctuation">.</span>component <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">,</span>      <span class="token template-string"><span class="token string">`route config "component" for path: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">String</span><span class="token punctuation">(</span>        path <span class="token operator">||</span> name      <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> cannot be a `</span></span> <span class="token operator">+</span> <span class="token template-string"><span class="token string">`string id. Use an actual component instead.`</span></span>    <span class="token punctuation">)</span>    <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// eslint-disable-next-line no-control-regex</span>      <span class="token operator">!</span><span class="token regex">/[^\u0000-\u007F]+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token template-string"><span class="token string">`Route with path "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" contains unencoded characters, make sure `</span></span> <span class="token operator">+</span>        <span class="token template-string"><span class="token string">`your path is correctly encoded before passing it to the router. Use `</span></span> <span class="token operator">+</span>        <span class="token template-string"><span class="token string">`encodeURI to encode static segments of your path.`</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> pathToRegexpOptions<span class="token punctuation">:</span> PathToRegexpOptions <span class="token operator">=</span>    route<span class="token punctuation">.</span>pathToRegexpOptions <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> normalizedPath <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> pathToRegexpOptions<span class="token punctuation">.</span>strict<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> route<span class="token punctuation">.</span>caseSensitive <span class="token operator">===</span> <span class="token string">'boolean'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pathToRegexpOptions<span class="token punctuation">.</span>sensitive <span class="token operator">=</span> route<span class="token punctuation">.</span>caseSensitive  <span class="token punctuation">}</span>  <span class="token keyword">const</span> record<span class="token punctuation">:</span> RouteRecord <span class="token operator">=</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> normalizedPath<span class="token punctuation">,</span>    regex<span class="token punctuation">:</span> <span class="token function">compileRouteRegex</span><span class="token punctuation">(</span>normalizedPath<span class="token punctuation">,</span> pathToRegexpOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> route<span class="token punctuation">.</span>components <span class="token operator">||</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> route<span class="token punctuation">.</span>component <span class="token punctuation">}</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> route<span class="token punctuation">.</span>alias      <span class="token operator">?</span> <span class="token keyword">typeof</span> route<span class="token punctuation">.</span>alias <span class="token operator">===</span> <span class="token string">'string'</span>        <span class="token operator">?</span> <span class="token punctuation">[</span>route<span class="token punctuation">.</span>alias<span class="token punctuation">]</span>        <span class="token punctuation">:</span> route<span class="token punctuation">.</span>alias      <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    instances<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    enteredCbs<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">,</span>    parent<span class="token punctuation">,</span>    matchAs<span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> route<span class="token punctuation">.</span>redirect<span class="token punctuation">,</span>    beforeEnter<span class="token punctuation">:</span> route<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> route<span class="token punctuation">.</span>meta <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span>      route<span class="token punctuation">.</span>props <span class="token operator">==</span> <span class="token keyword">null</span>        <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">:</span> route<span class="token punctuation">.</span>components          <span class="token operator">?</span> route<span class="token punctuation">.</span>props          <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> route<span class="token punctuation">.</span>props <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Warn if route is named, does not redirect and has a default child route.</span>    <span class="token comment" spellcheck="true">// If users navigate to this route by name, the default child will</span>    <span class="token comment" spellcheck="true">// not be rendered (GH Issue #629)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        route<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span>        <span class="token operator">!</span>route<span class="token punctuation">.</span>redirect <span class="token operator">&amp;&amp;</span>        route<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token regex">/^\/?$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token template-string"><span class="token string">`Named Route '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>route<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' has a default child route. `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`When navigating to this named route (:to="{name: '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>              route<span class="token punctuation">.</span>name            <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}"), `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`the default child route will not be rendered. Remove the name from `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`this route and use the name of the default child route for named `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`links instead.`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    route<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> childMatchAs <span class="token operator">=</span> matchAs        <span class="token operator">?</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matchAs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>child<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> undefined      <span class="token function">addRouteRecord</span><span class="token punctuation">(</span>pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">,</span> nameMap<span class="token punctuation">,</span> child<span class="token punctuation">,</span> record<span class="token punctuation">,</span> childMatchAs<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pathMap<span class="token punctuation">[</span>record<span class="token punctuation">.</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pathList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>path<span class="token punctuation">)</span>    pathMap<span class="token punctuation">[</span>record<span class="token punctuation">.</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> record  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>alias <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> aliases <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>alias<span class="token punctuation">)</span> <span class="token operator">?</span> route<span class="token punctuation">.</span>alias <span class="token punctuation">:</span> <span class="token punctuation">[</span>route<span class="token punctuation">.</span>alias<span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aliases<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> alias <span class="token operator">=</span> aliases<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> alias <span class="token operator">===</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token template-string"><span class="token string">`Found an alias with the same value as the path: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">". You have to remove that alias. It will be ignored in development.`</span></span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// skip in dev to make it work</span>        <span class="token keyword">continue</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> aliasRoute <span class="token operator">=</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> alias<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> route<span class="token punctuation">.</span>children      <span class="token punctuation">}</span>      <span class="token function">addRouteRecord</span><span class="token punctuation">(</span>        pathList<span class="token punctuation">,</span>        pathMap<span class="token punctuation">,</span>        nameMap<span class="token punctuation">,</span>        aliasRoute<span class="token punctuation">,</span>        parent<span class="token punctuation">,</span>        record<span class="token punctuation">.</span>path <span class="token operator">||</span> <span class="token string">'/'</span> <span class="token comment" spellcheck="true">// matchAs</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nameMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      nameMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> record    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>matchAs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token string">`Duplicate named routes definition: `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`{ name: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">", path: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" }`</span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由3种模式"><a href="#路由3种模式" class="headerlink" title="路由3种模式"></a>路由3种模式</h2><p>在VueRouter的构造函数中可以看到有3种路由模式：history、hash、abstract</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'history'</span><span class="token punctuation">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTML5History</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'hash'</span><span class="token punctuation">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fallback<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'abstract'</span><span class="token punctuation">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstractHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`invalid mode: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="History基类"><a href="#History基类" class="headerlink" title="History基类"></a>History基类</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// the starting route that represents the initial state</span><span class="token keyword">export</span> <span class="token keyword">const</span> START <span class="token operator">=</span> <span class="token function">createRoute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>  router<span class="token punctuation">:</span> Router  base<span class="token punctuation">:</span> string  current<span class="token punctuation">:</span> Route  pending<span class="token punctuation">:</span> <span class="token operator">?</span>Route  cb<span class="token punctuation">:</span> <span class="token punctuation">(</span>r<span class="token punctuation">:</span> Route<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  ready<span class="token punctuation">:</span> boolean  readyCbs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span>  readyErrorCbs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span>  errorCbs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span>  listeners<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span>  cleanupListeners<span class="token punctuation">:</span> Function  <span class="token comment" spellcheck="true">//需要子类实现的方法</span>  <span class="token comment" spellcheck="true">// implemented by sub-classes</span>  <span class="token operator">+</span>go<span class="token punctuation">:</span> <span class="token punctuation">(</span>n<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  <span class="token operator">+</span>push<span class="token punctuation">:</span> <span class="token punctuation">(</span>loc<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  <span class="token operator">+</span>replace<span class="token punctuation">:</span> <span class="token punctuation">(</span>    loc<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span>    onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span>    onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function  <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  <span class="token operator">+</span>ensureURL<span class="token punctuation">:</span> <span class="token punctuation">(</span>push<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  <span class="token operator">+</span>getCurrentLocation<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> string  <span class="token operator">+</span>setupListeners<span class="token punctuation">:</span> Function  constructor <span class="token punctuation">(</span>router<span class="token punctuation">:</span> Router<span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token operator">?</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>router <span class="token operator">=</span> router<span class="token comment" spellcheck="true">//router对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//格式化base,保证base是以'/'开头</span>    <span class="token comment" spellcheck="true">// start with a route object that stands for "nowhere"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> START<span class="token comment" spellcheck="true">//current指向当前的route对象,默认值是START</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">//即将跳转的路由</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>readyCbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>readyErrorCbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>errorCbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//更新路由，其实就是改变this.current</span>  updateRoute <span class="token punctuation">(</span>route<span class="token punctuation">:</span> Route<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> route    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//切换路由的重要方法</span>  transitionTo <span class="token punctuation">(</span>    location<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//目标</span>    onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//切换完成后的回调</span>    onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function <span class="token comment" spellcheck="true">//取消切换</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> route    <span class="token comment" spellcheck="true">// catch redirect option https://github.com/vuejs/vue-router/issues/3201</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//根据this.current当前路径和目标location去匹配目标路径</span>      route <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>errorCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">cb</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Exception should still be thrown</span>      <span class="token keyword">throw</span> e    <span class="token punctuation">}</span>        <span class="token keyword">const</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current    <span class="token comment" spellcheck="true">//确定切换</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirmTransition</span><span class="token punctuation">(</span>      route<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//改变current</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>afterHooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>hook <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          hook <span class="token operator">&amp;&amp;</span> <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> prev<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// fire ready cbs once</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>readyCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">cb</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onAbort<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">onAbort</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Initial redirection should not mark the history as ready yet</span>          <span class="token comment" spellcheck="true">// because it's triggered by the redirection instead</span>          <span class="token comment" spellcheck="true">// https://github.com/vuejs/vue-router/issues/3225</span>          <span class="token comment" spellcheck="true">// https://github.com/vuejs/vue-router/issues/3331</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> NavigationFailureType<span class="token punctuation">.</span>redirected<span class="token punctuation">)</span> <span class="token operator">||</span> prev <span class="token operator">!==</span> START<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>readyErrorCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  confirmTransition <span class="token punctuation">(</span>route<span class="token punctuation">:</span> Route<span class="token punctuation">,</span> onComplete<span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current    <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> route    <span class="token keyword">const</span> abort <span class="token operator">=</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// changed after adding errors with</span>      <span class="token comment" spellcheck="true">// https://github.com/vuejs/vue-router/pull/3047 before that change,</span>      <span class="token comment" spellcheck="true">// redirect and aborted navigation would produce an err == null</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorCbs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>errorCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">warn</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'uncaught error during route navigation:'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      onAbort <span class="token operator">&amp;&amp;</span> <span class="token function">onAbort</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> lastRouteIndex <span class="token operator">=</span> route<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">const</span> lastCurrentIndex <span class="token operator">=</span> current<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token function">isSameRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token comment" spellcheck="true">// in the case the route map has been dynamically appended to</span>      lastRouteIndex <span class="token operator">===</span> lastCurrentIndex <span class="token operator">&amp;&amp;</span>      route<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>lastRouteIndex<span class="token punctuation">]</span> <span class="token operator">===</span> current<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>lastCurrentIndex<span class="token punctuation">]</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">,</span> current<span class="token punctuation">,</span> route<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationDuplicatedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> updated<span class="token punctuation">,</span> deactivated<span class="token punctuation">,</span> activated <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">resolveQueue</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>matched<span class="token punctuation">,</span>      route<span class="token punctuation">.</span>matched    <span class="token punctuation">)</span>    <span class="token keyword">const</span> queue<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>NavigationGuard<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// in-component leave guards</span>      <span class="token function">extractLeaveGuards</span><span class="token punctuation">(</span>deactivated<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// global before hooks</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>beforeHooks<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// in-component update hooks</span>      <span class="token function">extractUpdateHooks</span><span class="token punctuation">(</span>updated<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// in-config enter guards</span>      activated<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// async components</span>      <span class="token function">resolveAsyncComponents</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">:</span> NavigationGuard<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">!==</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationCancelledError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token punctuation">(</span>to<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// next(false) -> abort navigation, ensure current URL</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationAbortedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isError</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token function">abort</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">||</span>            <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token keyword">typeof</span> to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// next('/') or next({ path: '/' }) -> redirect</span>            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationRedirectedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// confirm transition and pass on the value</span>            <span class="token function">next</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">abort</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// wait until async components are resolved before</span>      <span class="token comment" spellcheck="true">// extracting in-component enter guards</span>      <span class="token keyword">const</span> enterGuards <span class="token operator">=</span> <span class="token function">extractEnterGuards</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span>      <span class="token keyword">const</span> queue <span class="token operator">=</span> enterGuards<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>resolveHooks<span class="token punctuation">)</span>      <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">!==</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationCancelledError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">handleRouteEntered</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<code>History</code>类是3中路由模式的基类，初始化时格式化了<code>base</code>，初始化当前路由指向<code>START</code>，跳转路由为<code>null</code>，当切换路由时，执行的是<code>tansitionTo</code>方法，切换路由就是先调用<code>this.router.match</code>匹配到目标路由，然后改变当前的路由<code>this.current</code>，实现路由的切换</p><h3 id="HTML5History类"><a href="#HTML5History类" class="headerlink" title="HTML5History类"></a>HTML5History类</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//继承History类</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HTML5History</span> <span class="token keyword">extends</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>  _startLocation<span class="token punctuation">:</span> string  constructor <span class="token punctuation">(</span>router<span class="token punctuation">:</span> Router<span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token operator">?</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化父类</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> base<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//获取初始化location</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_startLocation <span class="token operator">=</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">)</span>  <span class="token punctuation">}</span>    setupListeners <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//监听任务队列，如果有popState监听了就返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>router    <span class="token keyword">const</span> expectScroll <span class="token operator">=</span> router<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scrollBehavior    <span class="token comment" spellcheck="true">//检测是否需要支持scroll</span>    <span class="token keyword">const</span> supportsScroll <span class="token operator">=</span> supportsPushState <span class="token operator">&amp;&amp;</span> expectScroll    <span class="token comment" spellcheck="true">//支持scroll，初始化scroll相关逻辑</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">setupScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//popstate事件</span>    <span class="token keyword">const</span> handleRoutingEvent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取当前路由</span>      <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current           <span class="token comment" spellcheck="true">// Avoiding first `popstate` event dispatched in some browsers but first</span>      <span class="token comment" spellcheck="true">// history route not updated since async guard at the same time.</span>      <span class="token comment" spellcheck="true">//获取Location</span>      <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//某些浏览器，会在打开页面时触发一次popstate</span>      <span class="token comment" spellcheck="true">// 此时如果初始路由是异步路由,就会出现`popstate`先触发,初始路由后解析完成，进而导致route未更新</span>      <span class="token comment" spellcheck="true">// 所以需要避免，如果路径是初始值并且初始location值时候需要返回</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> START <span class="token operator">&amp;&amp;</span> location <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_startLocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//路由地址变化，跳转</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">handleScroll</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> route<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//监听popstate事件</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> handleRoutingEvent<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//当路由切换时，就是触发popstate，push进事件队列中</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> handleRoutingEvent<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  go <span class="token punctuation">(</span>n<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//日常常用this.$router.push就是调用这里的push</span>  push <span class="token punctuation">(</span>location<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前路由</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> current<span class="token punctuation">:</span> fromRoute <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment" spellcheck="true">//调用History类的方法，实现跳转，</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">pushState</span><span class="token punctuation">(</span><span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">+</span> route<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">,</span> route<span class="token punctuation">,</span> fromRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> onAbort<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<code>HTML5History</code>类继承于<code>History</code>类，在构造函数中先调用父类构造函数，之后再检查是否支持滚动行为，实现相关逻辑，监听路由切换<code>popstate</code>事件，真正实现路由的跳转调用的还是调用父类<code>transitionTo</code>方法。</p><blockquote><p>在初始化popstate事件监听时，因为某些浏览器打开页面会触发一次popstate，此时如果路由组件是异步的，就会出现popstate发生了，但是异步组件还没解析完成，导致route没有更新</p></blockquote><h3 id="HashHistory"><a href="#HashHistory" class="headerlink" title="HashHistory"></a>HashHistory</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//继承父类History</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HashHistory</span> <span class="token keyword">extends</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>router<span class="token punctuation">:</span> Router<span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token operator">?</span>string<span class="token punctuation">,</span> fallback<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用父类构造函数</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> base<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// check history fallback deeplinking</span>    <span class="token comment" spellcheck="true">// fallback只有在指明了mode为history，但是浏览器又不支持popstate，用户手动指明了fallback为true时，才为true，其它情况为false</span>    <span class="token comment" spellcheck="true">// 如果需要回退，则将url换为hash模式(/#开头)</span>    <span class="token comment" spellcheck="true">// this.base来自父类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fallback <span class="token operator">&amp;&amp;</span> <span class="token function">checkFallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//确保url是'/'开头</span>    <span class="token function">ensureSlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// this is delayed until the app mounts</span>  <span class="token comment" spellcheck="true">// to avoid the hashchange listener being fired too early</span>  setupListeners <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>router    <span class="token keyword">const</span> expectScroll <span class="token operator">=</span> router<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scrollBehavior    <span class="token keyword">const</span> supportsScroll <span class="token operator">=</span> supportsPushState <span class="token operator">&amp;&amp;</span> expectScroll    <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">setupScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> handleRoutingEvent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ensureSlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">,</span> route<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsPushState<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">replaceHash</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据是否支持pushstate来决定监听popstate还是hashchange事件</span>    <span class="token keyword">const</span> eventType <span class="token operator">=</span> supportsPushState <span class="token operator">?</span> <span class="token string">'popstate'</span> <span class="token punctuation">:</span> <span class="token string">'hashchange'</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>      eventType<span class="token punctuation">,</span>      handleRoutingEvent    <span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handleRoutingEvent<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  push <span class="token punctuation">(</span>location<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> current<span class="token punctuation">:</span> fromRoute <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>      location<span class="token punctuation">,</span>      route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">pushHash</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span>        <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">,</span> route<span class="token punctuation">,</span> fromRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      onAbort    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 确保url是以/开头</span><span class="token keyword">function</span> ensureSlash <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> boolean <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//获取路径</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//如果不是以'/'开头，</span>  <span class="token function">replaceHash</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取'#'后面的地址内容</span><span class="token comment" spellcheck="true">//由于火狐浏览器一些兼容性的问题，不能直接使用window.location.hash来获取hash部分的path，这里VueRouter使用了原生的字符串截取的方法获取hash部分的path</span><span class="token keyword">export</span> <span class="token keyword">function</span> getHash <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// We can't use window.location.hash here because it's not</span>  <span class="token comment" spellcheck="true">// consistent across browsers - Firefox will pre-decode it!</span>  <span class="token keyword">let</span> href <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href  <span class="token keyword">const</span> index <span class="token operator">=</span> href<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// empty path</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>  href <span class="token operator">=</span> href<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> href<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据是否支持popstate，如果兼容的话就会调用getUrl传入'/'并调用replaceState将getUrl的结果传入replaceState的参数中。</span><span class="token comment" spellcheck="true">//不支持则用 window.location.replace</span><span class="token keyword">function</span> replaceHash <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsPushState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在地址里加上'#'</span><span class="token keyword">function</span> getUrl <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> href <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href  <span class="token keyword">const</span> i <span class="token operator">=</span> href<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> base <span class="token operator">=</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> href<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">:</span> href  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>base<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//检查回退，将url转换成hash模式</span><span class="token keyword">function</span> checkFallback <span class="token punctuation">(</span>base<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">getLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^\/#/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">cleanPath</span><span class="token punctuation">(</span>base <span class="token operator">+</span> <span class="token string">'/#'</span> <span class="token operator">+</span> location<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：HashHistory大体方法都和HTML5History的类似，在构造函数初始化时有些不同</p><ol><li>检查了fallback,看是否需要回退，传入的fallback只有在用户设置了history且又不支持pushState并且启用了回退时才为true,，此时，需要将history模式的url替换成hash模式，即添加上#，这个逻辑是由checkFallback实现的</li><li>如果没有fallback，则直接调用ensureSlash,确保url是以’&#x2F;‘开头<h3 id="AbstractHistory类"><a href="#AbstractHistory类" class="headerlink" title="AbstractHistory类"></a>AbstractHistory类</h3>&#96;&#96;&#96;javascript<br>export class AbstractHistory extends History {<br>  index: number<br>  stack: Array<Route></li></ol><p>  constructor (router: Router, base: ?string) {<br>    &#x2F;&#x2F;调用父类构造函数<br>    super(router, base)<br>    &#x2F;&#x2F;用栈来存route<br>    this.stack &#x3D; []<br>    &#x2F;&#x2F;指向当前路由<br>    this.index &#x3D; -1<br>  }</p><p>  push (location: RawLocation, onComplete?: Function, onAbort?: Function) {<br>    this.transitionTo(<br>      location,<br>      route &#x3D;&gt; {<br>        &#x2F;&#x2F;拼接新路由<br>        this.stack &#x3D; this.stack.slice(0, this.index + 1).concat(route)<br>        &#x2F;&#x2F;更新指针<br>        this.index++<br>        onComplete &amp;&amp; onComplete(route)<br>      },<br>      onAbort<br>    )<br>  }</p><p>  replace (location: RawLocation, onComplete?: Function, onAbort?: Function) {<br>    this.transitionTo(<br>      location,<br>      route &#x3D;&gt; {<br>        &#x2F;&#x2F;替换路由<br>        this.stack &#x3D; this.stack.slice(0, this.index).concat(route)<br>        onComplete &amp;&amp; onComplete(route)<br>      },<br>      onAbort<br>    )<br>  }</p><p>  go (n: number) {<br>    &#x2F;&#x2F;通过index指针上移下移来跳转<br>    const targetIndex &#x3D; this.index + n<br>    if (targetIndex &lt; 0 || targetIndex &gt;&#x3D; this.stack.length) {<br>      return<br>    }<br>    const route &#x3D; this.stack[targetIndex]<br>    this.confirmTransition(<br>      route,<br>      () &#x3D;&gt; {<br>        const prev &#x3D; this.current<br>        this.index &#x3D; targetIndex<br>        this.updateRoute(route)<br>        this.router.afterHooks.forEach(hook &#x3D;&gt; {<br>          hook &amp;&amp; hook(route, prev)<br>        })<br>      },<br>      err &#x3D;&gt; {<br>        if (isNavigationFailure(err, NavigationFailureType.duplicated)) {<br>          this.index &#x3D; targetIndex<br>        }<br>      }<br>    )<br>  }</p><p>  getCurrentLocation () {<br>    &#x2F;&#x2F;当前就是栈顶指针<br>    const current &#x3D; this.stack[this.stack.length - 1]<br>    return current ? current.fullPath : ‘&#x2F;‘<br>  }</p><p>  ensureURL () {<br>    &#x2F;&#x2F; noop<br>  }<br>}</p><pre><code>总结：`AbstractHistory`模式跟上面两种模式的实现不太一样，是通过一个栈，和一个指向当前路由的指针index来实现各种操作## router-view和router-link### router-view```javascriptexport default &#123;  name: &#39;RouterView&#39;,  functional: true,//函数式组件  props: &#123;    name: &#123;      type: String,      default: &#39;default&#39;    &#125;  &#125;,  render (_, &#123; props, children, parent, data &#125;) &#123;    // used by devtools to display a router-view badge    //标记为routerView组件    data.routerView = true    // directly use parent context&#39;s createElement() function    // so that components rendered by router-view can resolve named slots    //用于渲染组件    const h = parent.$createElement    const name = props.name    const route = parent.$route//当前路径    //获取routerView缓存    const cache = parent._routerViewCache || (parent._routerViewCache = &#123;&#125;)    // determine current view depth, also check to see if the tree    // has been toggled inactive but kept-alive.    //深度，解决嵌套问题    let depth = 0     let inactive = false    //从当前组件一直遍历到最外层的根组件    while (parent &amp;&amp; parent._routerRoot !== parent) &#123;      const vnodeData = parent.$vnode ? parent.$vnode.data : &#123;&#125;      //有routerView属性的深度加1      if (vnodeData.routerView) &#123;        depth++      &#125;      //keepAlive是否激活      if (vnodeData.keepAlive &amp;&amp; parent._directInactive &amp;&amp; parent._inactive) &#123;        inactive = true      &#125;      parent = parent.$parent    &#125;    data.routerViewDepth = depth    // render previous view if the tree is inactive and kept-alive    //当前组件被keepAlive缓存    if (inactive) &#123;      //获取缓存数据和组件      const cachedData = cache[name]      const cachedComponent = cachedData &amp;&amp; cachedData.component      //如果有缓存组件就渲染缓存组件      if (cachedComponent) &#123;        // #2301        // pass props        if (cachedData.configProps) &#123;          fillPropsinData(cachedComponent, data, cachedData.route, cachedData.configProps)        &#125;        return h(cachedComponent, data, children)      &#125; else &#123;        // render previous empty view        return h()      &#125;    &#125;   //从路由的matched列表中获取当前的record（传入路由实例的routes数组，包含name, components, redirect, path等属性）    const matched = route.matched[depth]    const component = matched &amp;&amp; matched.components[name]    // render empty node if no matched route or no config component    //找不到组件和matched就清空缓存    if (!matched || !component) &#123;      cache[name] = null      return h()    &#125;    // cache component    //缓存组件    cache[name] = &#123; component &#125;    // attach instance registration hook    // this will be called in the instance&#39;s injected lifecycle hooks    data.registerRouteInstance = (vm, val) =&gt; &#123;      // val could be undefined for unregistration      const current = matched.instances[name]      if (        (val &amp;&amp; current !== vm) ||        (!val &amp;&amp; current === vm)      ) &#123;        matched.instances[name] = val      &#125;    &#125;    // also register instance in prepatch hook    // in case the same component instance is reused across different routes    ;(data.hook || (data.hook = &#123;&#125;)).prepatch = (_, vnode) =&gt; &#123;      matched.instances[name] = vnode.componentInstance    &#125;    // register instance in init hook    // in case kept-alive component be actived when routes changed    data.hook.init = (vnode) =&gt; &#123;      if (vnode.data.keepAlive &amp;&amp;        vnode.componentInstance &amp;&amp;        vnode.componentInstance !== matched.instances[name]      ) &#123;        matched.instances[name] = vnode.componentInstance      &#125;      // if the route transition has already been confirmed then we weren&#39;t      // able to call the cbs during confirmation as the component was not      // registered yet, so we call it here.      handleRouteEntered(route)    &#125;    const configProps = matched.props &amp;&amp; matched.props[name]    // save route and configProps in cache    if (configProps) &#123;      extend(cache[name], &#123;        route,        configProps      &#125;)      fillPropsinData(component, data, route, configProps)    &#125;    //渲染组件    return h(component, data, children)  &#125;&#125;</code></pre><p>总结：</p><ul><li><p>先将当前组件标记为routerView组件，获取当前组件的路由，要渲染组件的名称等等</p></li><li><p>从当前组件一直向外遍历到根组件，记录深度和是否被keepAlive缓存</p></li><li><p>如果被keepAlive缓存则直接渲染缓存的数据</p></li><li><p>否则从路由的matched列表获取相应的数据，然后再进行渲染</p><h3 id="Router-Link"><a href="#Router-Link" class="headerlink" title="Router-Link"></a>Router-Link</h3><p>&#96;&#96;&#96;javascript<br>export default {<br>name: ‘RouterLink’,<br>props: {<br>  to: {<br>type: toTypes,<br>required: true<br>  },<br>  tag: {<br>type: String,<br>default: ‘a’<br>  },<br>  custom: Boolean,<br>  exact: Boolean,<br>  exactPath: Boolean,<br>  append: Boolean,<br>  replace: Boolean,<br>  activeClass: String,<br>  exactActiveClass: String,<br>  ariaCurrentValue: {<br>type: String,<br>default: ‘page’<br>  },<br>  event: {<br>type: eventTypes,<br>default: ‘click’ &#x2F;&#x2F;默认是click事件触发跳转<br>  }<br>},<br>render (h: Function) {<br>  &#x2F;&#x2F;获取router实例和当前route<br>  const router &#x3D; this.$router<br>  const current &#x3D; this.$route<br>  const { location, route, href } &#x3D; router.resolve(<br>this.to,<br>current,<br>this.append<br>  )<br>  …<br>  &#x2F;&#x2F;事件回调<br>  const handler &#x3D; e &#x3D;&gt; {<br>if (guardEvent(e)) {<br>  &#x2F;&#x2F;增加或者替换历史记录<br>  if (this.replace) {<br>    router.replace(location, noop)<br>  } else {<br>    router.push(location, noop)<br>  }<br>}<br>  }<br>  const on &#x3D; { click: guardEvent } &#x2F;&#x2F;guardEvent 返回true或undefined<br>  &#x2F;&#x2F;event是数组则依次触发事件<br>  if (Array.isArray(this.event)) {<br>this.event.forEach(e &#x3D;&gt; {<br>  on[e] &#x3D; handler<br>})<br>  } else {<br>on[this.event] &#x3D; handler<br>  }</p><p> …<br>  &#x2F;&#x2F;处理包裹标签，默认是a<br>  if (this.tag &#x3D;&#x3D;&#x3D; ‘a’) {<br>data.on &#x3D; on<br>data.attrs &#x3D; { href, ‘aria-current’: ariaCurrentValue }<br>  } else {<br>&#x2F;&#x2F; find the first <a> child and apply listener and href<br>&#x2F;&#x2F; 查找子标签中第一个A标签，并绑定回调和href属性到这个A标签上<br>const a &#x3D; findAnchor(this.$slots.default)<br>if (a) {<br>  &#x2F;&#x2F; in case the <a> is a static node<br>  a.isStatic &#x3D; false<br>  const aData &#x3D; (a.data &#x3D; extend({}, a.data))<br>  aData.on &#x3D; aData.on || {}<br>  &#x2F;&#x2F; transform existing events in both objects into arrays so we can push later<br>  for (const event in aData.on) {<br>    const handler &#x3D; aData.on[event]<br>    if (event in on) {<br>      aData.on[event] &#x3D; Array.isArray(handler) ? handler : [handler]<br>    }<br>  }<br>  &#x2F;&#x2F; append new listeners for router-link<br>  for (const event in on) {<br>    if (event in aData.on) {<br>      &#x2F;&#x2F; on[event] is always a function<br>      aData.on[event].push(on[event])<br>    } else {<br>      aData.on[event] &#x3D; handler<br>    }<br>  }<br><br>  const aAttrs &#x3D; (a.data.attrs &#x3D; extend({}, a.data.attrs))<br>  aAttrs.href &#x3D; href<br>  aAttrs[‘aria-current’] &#x3D; ariaCurrentValue<br>} else {<br>  &#x2F;&#x2F; doesn’t have <a> child, apply listener to self<br>  &#x2F;&#x2F;没有a标签，事件回调绑定到自身<br>  data.on &#x3D; on<br>}<br>  }<br>  return h(this.tag, data, this.$slots.default)<br>}</p></li></ul><p>}</p><p>function guardEvent (e) {<br>  &#x2F;&#x2F; don’t redirect with control keys 控制键不处理<br>  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return<br>  &#x2F;&#x2F; don’t redirect when preventDefault called 已经禁用默认，不处理<br>  if (e.defaultPrevented) return<br>  &#x2F;&#x2F; don’t redirect on right click 右击不处理<br>  if (e.button !&#x3D;&#x3D; undefined &amp;&amp; e.button !&#x3D;&#x3D; 0) return<br>  &#x2F;&#x2F; don’t redirect if <code>target=&quot;_blank&quot;</code> _black不处理<br>  if (e.currentTarget &amp;&amp; e.currentTarget.getAttribute) {<br>    const target &#x3D; e.currentTarget.getAttribute(‘target’)<br>    if (&#x2F;\b_blank\b&#x2F;i.test(target)) return<br>  }<br>  &#x2F;&#x2F; this may be a Weex event which doesn’t have this method<br>  if (e.preventDefault) {<br>    e.preventDefault()<br>  }<br>  return true<br>}</p><pre><code>总结：router-link的实现其实就是router.push或者router.replace，默认的标签是a标签，如果没有a标签回调函数就绑定到组件自身</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>axios源码学习</title>
      <link href="/2022/12/10/axios%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/12/10/axios%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="axios简介"><a href="#axios简介" class="headerlink" title="axios简介"></a>axios简介</h1><h2 id="axios是什么？"><a href="#axios是什么？" class="headerlink" title="axios是什么？"></a>axios是什么？</h2><p>axios是一个基于Promise的HTTP库，可以用在浏览器和node.js之中使用。</p><h2 id="axios的特性"><a href="#axios的特性" class="headerlink" title="axios的特性"></a>axios的特性</h2><ul><li><p>从浏览器中创建 XMLHttpRequests</p></li><li><p>从 node.js 创建 http 请求</p></li><li><p>支持 Promise API</p></li><li><p>拦截请求和响应</p></li><li><p>转换请求数据和响应数据</p></li><li><p>取消请求</p></li><li><p>自动转换 JSON 数据</p></li><li><p>客户端支持防御 XSRF</p><h2 id="axios常用的方法"><a href="#axios常用的方法" class="headerlink" title="axios常用的方法"></a>axios常用的方法</h2></li><li><p>axios(config)：最简单的用法，可以发送任何类型的请求</p></li><li><p>axios.request(config)：用法跟axios(config）相同</p></li><li><p>axios.get(url[, config])：发送get请求</p></li><li><p>axios.post(url[, data[, config]])：发送post请求</p></li><li><p>axios.delete(url[, config])：发送delete请求</p></li><li><p>axios.put(url[, data[, config]])：发送put请求</p></li><li><p>axios.defaults.xxx: 请求的默认全局配置</p></li><li><p>axios.interceptors.request.use(): 添加请求拦截器</p></li><li><p>axios.interceptors.response.use(): 添加响应拦截器</p></li><li><p>axios.create([config]): 创建一个新的 axios(它没有下面的功能)</p></li><li><p>axios.Cancel(): 用于创建取消请求的错误对象</p></li><li><p>axios.CancelToken(): 用于创建取消请求的 token 对象</p></li><li><p>axios.isCancel(): 是否是一个取消请求的错误</p></li><li><p>axios.all(promises): 用于批量执行多个异步请求</p></li><li><p>axios.spread(): 用来指定接收所有成功数据的回调函数的方法</p></li></ul><blockquote><p>这里要注意一下请求方式的配置，get、delete和post、put的配置是不一样的</p></blockquote><h1 id="axios主要源码"><a href="#axios主要源码" class="headerlink" title="axios主要源码"></a>axios主要源码</h1><h2 id="主要文件目录"><a href="#主要文件目录" class="headerlink" title="主要文件目录"></a>主要文件目录</h2><pre class="line-numbers language-javascript"><code class="language-javascript">├── <span class="token operator">/</span>dist<span class="token operator">/</span> # 项目输出目录 ├── <span class="token operator">/</span>lib<span class="token operator">/</span> # 项目源码目录 │ ├── <span class="token operator">/</span>adapters<span class="token operator">/</span> # 定义请求的适配器 xhr、http │ │ ├── http<span class="token punctuation">.</span>js # 实现 http <span class="token function">适配器</span><span class="token punctuation">(</span>包装 http 包<span class="token punctuation">)</span> │ │ └── xhr<span class="token punctuation">.</span>js # 实现 xhr <span class="token function">适配器</span><span class="token punctuation">(</span>包装 xhr 对象<span class="token punctuation">)</span> │ ├── <span class="token operator">/</span>cancel<span class="token operator">/</span> # 定义取消功能 │ ├── <span class="token operator">/</span>core<span class="token operator">/</span> # 一些核心功能 │ │ ├── Axios<span class="token punctuation">.</span>js # axios 的核心主类 │ │ ├── dispatchRequest<span class="token punctuation">.</span>js # 用来调用 http 请求适配器方法发送请求的函数 │ │ ├── InterceptorManager<span class="token punctuation">.</span>js # 拦截器的管理器 │ │ └── settle<span class="token punctuation">.</span>js # 根据 http 响应状态，改变 Promise 的状态 │ ├── <span class="token operator">/</span>helpers<span class="token operator">/</span> # 一些辅助方法 │ ├── axios<span class="token punctuation">.</span>js # 对外暴露接口 │ ├── <span class="token operator">/</span>defaults<span class="token operator">/</span> # axios 的默认配置 │ └── utils<span class="token punctuation">.</span>js # 公用工具 ├── <span class="token keyword">package</span><span class="token punctuation">.</span>json # 项目信息 ├── index<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts # 配置 TypeScript 的声明文件 └── index<span class="token punctuation">.</span>js # 入口文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>根目录下的index.js是入口文件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'./lib/axios.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> axios<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再来到 .&#x2F;lib&#x2F;axios.js<br>从代码可以看出axios其实是Axios的一个实例</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">'./core/Axios.js'</span><span class="token punctuation">;</span>  <span class="token operator">...</span>  <span class="token comment" spellcheck="true">/** * Create an instance of Axios * * @param {Object} defaultConfig The default config for the instance * * @returns {Axios} A new instance of Axios */</span><span class="token keyword">function</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>defaultConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//使用默认配置创建Axios实例</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Axios</span><span class="token punctuation">(</span>defaultConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  bind函数的作用跟Axios.prototype.request.bind类似，将  Axios.prototype.request函数的this显式绑定为context  返回值instance是一个函数，作用跟Axios.prototype.request一样  */</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>request<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  extend的作用是将Axios.prototype的方法和属性扩展到instance上  */</span>  utils<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token punctuation">{</span>allOwnKeys<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将context的方法和属性扩展到instance上</span>  utils<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token punctuation">{</span>allOwnKeys<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    工厂函数，用来返回创建实例对象的函数     createInstance的参数是默认参数+instance的参数  */</span>  instance<span class="token punctuation">.</span>create <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>instanceConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token function">mergeConfig</span><span class="token punctuation">(</span>defaultConfig<span class="token punctuation">,</span> instanceConfig<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Create the default instance to be exported</span><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下面是直接axios上直接挂载方法</span><span class="token comment" spellcheck="true">// Expose Axios class to allow class inheritance</span>axios<span class="token punctuation">.</span>Axios <span class="token operator">=</span> Axios<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Expose Cancel &amp; CancelToken</span>axios<span class="token punctuation">.</span>CanceledError <span class="token operator">=</span> CanceledError<span class="token punctuation">;</span>axios<span class="token punctuation">.</span>CancelToken <span class="token operator">=</span> CancelToken<span class="token punctuation">;</span>axios<span class="token punctuation">.</span>isCancel <span class="token operator">=</span> isCancel<span class="token punctuation">;</span>axios<span class="token punctuation">.</span>VERSION <span class="token operator">=</span> VERSION<span class="token punctuation">;</span>axios<span class="token punctuation">.</span>toFormData <span class="token operator">=</span> toFormData<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Expose all/spread</span>axios<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这块代码比较重要的一点就是instance是一个函数，当它调用时，即相当于axios（{}）这样调用，实际上就是Axios.prototype.request在执行<br>&#x2F;lib&#x2F;core&#x2F;Axios.js</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Axios类，初始化了默认配置，请求和响应两个拦截器</span><span class="token keyword">class</span> <span class="token class-name">Axios</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>instanceConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>defaults <span class="token operator">=</span> instanceConfig<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> <span class="token punctuation">{</span>      request<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      response<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Dispatch a request   *   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)   * @param {?Object} config   *   * @returns {Promise} The Promise to be fulfilled   */</span>  <span class="token function">request</span><span class="token punctuation">(</span>configOrUrl<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*eslint no-param-reassign:0*/</span>   <span class="token comment" spellcheck="true">/*   如果configOrUrl是字符串，那么它就是url，config就是配置对象 axios(url,[config])   否则configOrUrl就是一个配置对象 axios([config])   */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> configOrUrl <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> config <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      config<span class="token punctuation">.</span>url <span class="token operator">=</span> configOrUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> configOrUrl <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//将默认配置与用户调用时传入的配置进行合并</span>    config <span class="token operator">=</span> <span class="token function">mergeConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> transitional <span class="token operator">=</span> config<span class="token punctuation">.</span>transitional<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>transitional <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      validator<span class="token punctuation">.</span><span class="token function">assertOptions</span><span class="token punctuation">(</span>transitional<span class="token punctuation">,</span> <span class="token punctuation">{</span>        silentJSONParsing<span class="token punctuation">:</span> validators<span class="token punctuation">.</span><span class="token function">transitional</span><span class="token punctuation">(</span>validators<span class="token punctuation">.</span>boolean<span class="token punctuation">)</span><span class="token punctuation">,</span>        forcedJSONParsing<span class="token punctuation">:</span> validators<span class="token punctuation">.</span><span class="token function">transitional</span><span class="token punctuation">(</span>validators<span class="token punctuation">.</span>boolean<span class="token punctuation">)</span><span class="token punctuation">,</span>        clarifyTimeoutError<span class="token punctuation">:</span> validators<span class="token punctuation">.</span><span class="token function">transitional</span><span class="token punctuation">(</span>validators<span class="token punctuation">.</span>boolean<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置请求方法，如果config中没有配置方法，就采用默认方法或者设置为get</span>    config<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>method <span class="token operator">||</span> <span class="token string">'get'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Flatten headers</span>    <span class="token keyword">const</span> defaultHeaders <span class="token operator">=</span> config<span class="token punctuation">.</span>headers <span class="token operator">&amp;&amp;</span> utils<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">,</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>config<span class="token punctuation">.</span>method<span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    defaultHeaders <span class="token operator">&amp;&amp;</span> utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>      <span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'head'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">,</span> <span class="token string">'patch'</span><span class="token punctuation">,</span> <span class="token string">'common'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token keyword">function</span> <span class="token function">cleanHeaderConfig</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置请求头</span>    config<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AxiosHeaders</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> defaultHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 过滤跳过的拦截器</span>    <span class="token keyword">const</span> requestInterceptorChain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否同步执行</span>    <span class="token keyword">let</span> synchronousRequestInterceptors <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此方法对请求拦截器每一项执行函数unshiftRequestInterceptors，把拦截器的每一项存入requestInterceptorChain</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">unshiftRequestInterceptors</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> interceptor<span class="token punctuation">.</span>runWhen <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> interceptor<span class="token punctuation">.</span><span class="token function">runWhen</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//如果有一个是异步的，那么整个队列都是异步的</span>      synchronousRequestInterceptors <span class="token operator">=</span> synchronousRequestInterceptors <span class="token operator">&amp;&amp;</span> interceptor<span class="token punctuation">.</span>synchronous<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//unshift,后定义的拦截器是先执行的</span>      requestInterceptorChain<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> interceptor<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//响应拦截器，push是先定义先执行</span>    <span class="token keyword">const</span> responseInterceptorChain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">pushResponseInterceptors</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      responseInterceptorChain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> interceptor<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> promise<span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果是异步的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>synchronousRequestInterceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//dispatchRequest是发送请求的函数</span>      <span class="token keyword">const</span> chain <span class="token operator">=</span> <span class="token punctuation">[</span>dispatchRequest<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> undefined<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//请求拦截器异步执行完后再执行派发请求，最后再执行响应拦截器</span>      chain<span class="token punctuation">.</span>unshift<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> requestInterceptorChain<span class="token punctuation">)</span><span class="token punctuation">;</span>      chain<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> responseInterceptorChain<span class="token punctuation">)</span><span class="token punctuation">;</span>      len <span class="token operator">=</span> chain<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//promise是成功的状态</span>      promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//promise是成功状态，所以会执行第一个chain[i++]回调</span>        promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>chain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//返回promise对象</span>      <span class="token keyword">return</span> promise<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//同步则顺序执行</span>    len <span class="token operator">=</span> requestInterceptorChain<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> newConfig <span class="token operator">=</span> config<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> onFulfilled <span class="token operator">=</span> requestInterceptorChain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> onRejected <span class="token operator">=</span> requestInterceptorChain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        newConfig <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        onRejected<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//请求拦截器执行后再执行派发请求</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      promise <span class="token operator">=</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> responseInterceptorChain<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行响应拦截器，异步执行</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>      promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>responseInterceptorChain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> responseInterceptorChain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回promise对象</span>    <span class="token keyword">return</span> promise<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getUri</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    config <span class="token operator">=</span> <span class="token function">mergeConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fullPath <span class="token operator">=</span> <span class="token function">buildFullPath</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>baseURL<span class="token punctuation">,</span> config<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">buildURL</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> config<span class="token punctuation">.</span>params<span class="token punctuation">,</span> config<span class="token punctuation">.</span>paramsSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//下面两个forEach是通过Axios的原型挂载各种请求方法</span>utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'head'</span><span class="token punctuation">,</span> <span class="token string">'options'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">forEachMethodNoData</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*eslint func-names:0*/</span>  Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token function">mergeConfig</span><span class="token punctuation">(</span>config <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      method<span class="token punctuation">,</span>      url<span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">(</span>config <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">,</span> <span class="token string">'patch'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">forEachMethodWithData</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*eslint func-names:0*/</span>  <span class="token keyword">function</span> <span class="token function">generateHTTPMethod</span><span class="token punctuation">(</span>isForm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">httpMethod</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token function">mergeConfig</span><span class="token punctuation">(</span>config <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> isForm <span class="token operator">?</span> <span class="token punctuation">{</span>          <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'multipart/form-data'</span>        <span class="token punctuation">}</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        url<span class="token punctuation">,</span>        data      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">generateHTTPMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method <span class="token operator">+</span> <span class="token string">'Form'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">generateHTTPMethod</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Axios<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上源码可知，Axios工作流程如下</p><ol><li>通过createInstence创建Axios实例axios</li><li>对axios做一些配置</li><li>执行请求拦截器（requestInterceptorManager)</li><li>派发请求（dispatchRequest)</li><li>执行响应拦截器（responseInterceptorManager)</li><li>最后返回一个promise</li></ol><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>前面在看Axios类的时候contructor里就有两个拦截器</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> InterceptorManager <span class="token keyword">from</span> <span class="token string">'./InterceptorManager.js'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Axios</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>instanceConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>defaults <span class="token operator">=</span> instanceConfig<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> <span class="token punctuation">{</span>      request<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      response<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到&#x2F;lib&#x2F;core&#x2F;InterceptorManager.js ，可以看到InterceptorManager的具体内容</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> utils <span class="token keyword">from</span> <span class="token string">'./../utils.js'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InterceptorManager</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Add a new interceptor to the stack   *   * @param {Function} fulfilled The function to handle `then` for a `Promise`   * @param {Function} rejected The function to handle `reject` for a `Promise`   *   * @return {Number} An ID used to remove interceptor later   */</span>  <span class="token function">use</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">,</span> rejected<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      fulfilled<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//成功回调</span>      rejected<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//失败回调</span>      synchronous<span class="token punctuation">:</span> options <span class="token operator">?</span> options<span class="token punctuation">.</span>synchronous <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//同步还是异步执行</span>      runWhen<span class="token punctuation">:</span> options <span class="token operator">?</span> options<span class="token punctuation">.</span>runWhen <span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//注销拦截器</span>  <span class="token function">eject</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//清空拦截器</span>  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//这个的作用就是在把拦截器的fullfilled和rejected回调，加入chain(见Axios.js)</span>  <span class="token function">forEach</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//遍历this.handlers的每一项,让其去执行第二个函数</span>    utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">forEachHandler</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> InterceptorManager<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，一个InterceptorManager对象都保存着一个handlers数组，这个数组用来保存一个对象，这个对象里包含了许多拦截函数。</p><ul><li>use方法可以添加拦截器，eject方法可以注销拦截器</li><li>请求拦截器是先来后执行，响应拦截器是先来先执行</li><li>请求拦截器可以同步或者异步执行，响应拦截器异步执行<h2 id=""><a href="#" class="headerlink" title=""></a></h2></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * @param {Object|Array} obj The object to iterate * @param {Function} fn The callback to invoke for each item * * @param {Boolean} [allOwnKeys = false] * @returns {void} */</span><span class="token keyword">function</span> <span class="token function">forEach</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token punctuation">{</span>allOwnKeys <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Don't bother if no value provided</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> i<span class="token punctuation">;</span>  <span class="token keyword">let</span> l<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Force an array if not already something iterable</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*eslint no-param-reassign:0*/</span>    obj <span class="token operator">=</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//其实就是遍历obj的每一项，让每一项去执行函数fn</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Iterate over array values</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Iterate over object keys</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> allOwnKeys <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> key<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="派发请求"><a href="#派发请求" class="headerlink" title="派发请求"></a>派发请求</h2><h3 id="dispatchRequest"><a href="#dispatchRequest" class="headerlink" title="dispatchRequest"></a>dispatchRequest</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Dispatch a request to the server using the configured adapter. * * @param {object} config The config that is to be used for the request * * @returns {Promise} The Promise to be fulfilled */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">dispatchRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//如果被取消的请求被发送出去, 抛出错误</span>  <span class="token function">throwIfCancellationRequested</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//确保headers存在</span>  config<span class="token punctuation">.</span>headers <span class="token operator">=</span> AxiosHeaders<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//转换请求数据</span>  config<span class="token punctuation">.</span>data <span class="token operator">=</span> transformData<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>    config<span class="token punctuation">,</span>    config<span class="token punctuation">.</span>transformRequest  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取适配器，可以自定义适配器</span>  <span class="token keyword">const</span> adapter <span class="token operator">=</span> config<span class="token punctuation">.</span>adapter <span class="token operator">||</span> defaults<span class="token punctuation">.</span>adapter<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发送请求， 返回请求后 promise 对象  ajax HTTP</span>  <span class="token keyword">return</span> <span class="token function">adapter</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onAdapterResolution</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">throwIfCancellationRequested</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转换响应数据</span>    response<span class="token punctuation">.</span>data <span class="token operator">=</span> transformData<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>      config<span class="token punctuation">,</span>      config<span class="token punctuation">.</span>transformResponse<span class="token punctuation">,</span>      response    <span class="token punctuation">)</span><span class="token punctuation">;</span>       response<span class="token punctuation">.</span>headers <span class="token operator">=</span> AxiosHeaders<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置 promise 成功的值为 响应结果</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">onAdapterRejection</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancel</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">throwIfCancellationRequested</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Transform response data</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>reason <span class="token operator">&amp;&amp;</span> reason<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        reason<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data <span class="token operator">=</span> transformData<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>          config<span class="token punctuation">,</span>          config<span class="token punctuation">.</span>transformResponse<span class="token punctuation">,</span>          reason<span class="token punctuation">.</span>response        <span class="token punctuation">)</span><span class="token punctuation">;</span>        reason<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers <span class="token operator">=</span> AxiosHeaders<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到派发请求主要就是以下几步：</p><ul><li>设置请求头、适配器、转换请求数据</li><li>发送请求</li><li>转换响应数据、设置响应头</li></ul><h3 id="transformData"><a href="#transformData" class="headerlink" title="transformData"></a>transformData</h3><p>在派发请求时，转换数据有以下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//转换请求数据</span>  config<span class="token punctuation">.</span>data <span class="token operator">=</span> transformData<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>    config<span class="token punctuation">,</span>    config<span class="token punctuation">.</span>transformRequest  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换响应数据</span>    response<span class="token punctuation">.</span>data <span class="token operator">=</span> transformData<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>      config<span class="token punctuation">,</span>      config<span class="token punctuation">.</span>transformResponse<span class="token punctuation">,</span>      response    <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到转换数据时，是将config作为this去调用transformData函数，config.transformRequest和  config.transformResponse,response这些作为参数传给函数</li></ul><p>接着可以继续看<strong>transformData</strong>的实现</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Transform the data for a request or a response * * @param {Array|Function} fns A single function or Array of functions * @param {?Object} response The response object * * @returns {*} The resulting transformed data */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">transformData</span><span class="token punctuation">(</span>fns<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token operator">||</span> defaults<span class="token punctuation">;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> response <span class="token operator">||</span> config<span class="token punctuation">;</span>  <span class="token keyword">const</span> headers <span class="token operator">=</span> AxiosHeaders<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> context<span class="token punctuation">.</span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//fns是处理数据的数组，遍历fns，用data、headers、response去作为参数去调用fn获取data</span>  utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fns<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">transform</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> data<span class="token punctuation">,</span> headers<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response <span class="token operator">?</span> response<span class="token punctuation">.</span>status <span class="token punctuation">:</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  headers<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>transformData本身并没有转换数据，它只是遍历处理的函数去处理</li><li>补充一点，就是fns即 transformRequest、transformResponse是处理数据的函数，可以用户自己补充处理函数的</li></ul><p><strong>transformRequest</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"> transformRequest<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token function">transformRequest</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> contentType <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户是否设置数据为json格式</span>    <span class="token keyword">const</span> hasJSONContentType <span class="token operator">=</span> contentType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否是对象类型</span>    <span class="token keyword">const</span> isObjectPayload <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isObjectPayload <span class="token operator">&amp;&amp;</span> utils<span class="token punctuation">.</span><span class="token function">isHTMLForm</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> isFormData <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">isFormData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFormData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasJSONContentType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果是FormData数据而且没有设置json格式，那么直接返回FormData格式的数据</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//有设置就要转换为json格式</span>      <span class="token keyword">return</span> hasJSONContentType <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">formDataToJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isArrayBuffer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span>      utils<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span>      utils<span class="token punctuation">.</span><span class="token function">isStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span>      utils<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span>      utils<span class="token punctuation">.</span><span class="token function">isBlob</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isArrayBufferView</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span>buffer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isURLSearchParams</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">'application/x-www-form-urlencoded;charset=utf-8'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//文件类型数据</span>    <span class="token keyword">let</span> isFileList<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isObjectPayload<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">toURLEncodedForm</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>formSerializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>isFileList <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">isFileList</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> contentType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'multipart/form-data'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> _FormData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>env <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>env<span class="token punctuation">.</span>FormData<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">toFormData</span><span class="token punctuation">(</span>          isFileList <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token string">'files[]'</span><span class="token punctuation">:</span> data<span class="token punctuation">}</span> <span class="token punctuation">:</span> data<span class="token punctuation">,</span>          _FormData <span class="token operator">&amp;&amp;</span> <span class="token keyword">new</span> <span class="token class-name">_FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>formSerializer        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果数据是对象类型而且用户规定了json格式，则将数据json化，而且设置Content-Type</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isObjectPayload <span class="token operator">||</span> hasJSONContentType <span class="token punctuation">)</span> <span class="token punctuation">{</span>      headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">'application/json'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">stringifySafely</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>transformRequest其实就是一个数组里面包含一个对数据进行转换的函数</li><li>transformResponse也类似</li></ul><h3 id="adapter"><a href="#adapter" class="headerlink" title="adapter"></a>adapter</h3><p>适配器是就是真正发送请求的模块了，根据node和浏览器环境区分有两种，node环境用的是http.js，浏览器环境用的是xhr.js</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">xhrAdapter</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">dispatchXhrRequest</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//请求头、请求数据、请求内容</span>    <span class="token keyword">let</span> requestData <span class="token operator">=</span> config<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token keyword">const</span> requestHeaders <span class="token operator">=</span> AxiosHeaders<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> responseType <span class="token operator">=</span> config<span class="token punctuation">.</span>responseType<span class="token punctuation">;</span>    <span class="token keyword">let</span> onCanceled<span class="token punctuation">;</span>    <span class="token operator">...</span>    <span class="token comment" spellcheck="true">//创建一个XMLHttpRequest对象</span>    <span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// HTTP basic authentication</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>auth<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> username <span class="token operator">=</span> config<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>username <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> password <span class="token operator">=</span> config<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>password <span class="token operator">?</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>      requestHeaders<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Authorization'</span><span class="token punctuation">,</span> <span class="token string">'Basic '</span> <span class="token operator">+</span> <span class="token function">btoa</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//baseURL+url</span>    <span class="token keyword">const</span> fullPath <span class="token operator">=</span> <span class="token function">buildFullPath</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>baseURL<span class="token punctuation">,</span> config<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送请求</span>    request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">buildURL</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> config<span class="token punctuation">.</span>params<span class="token punctuation">,</span> config<span class="token punctuation">.</span>paramsSerializer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置超时时间</span>    request<span class="token punctuation">.</span>timeout <span class="token operator">=</span> config<span class="token punctuation">.</span>timeout<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//请求结束处理函数</span>    <span class="token keyword">function</span> <span class="token function">onloadend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Prepare the response</span>      <span class="token keyword">const</span> responseHeaders <span class="token operator">=</span> AxiosHeaders<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>        <span class="token string">'getAllResponseHeaders'</span> <span class="token keyword">in</span> request <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> responseData <span class="token operator">=</span> <span class="token operator">!</span>responseType <span class="token operator">||</span> responseType <span class="token operator">===</span> <span class="token string">'text'</span> <span class="token operator">||</span>  responseType <span class="token operator">===</span> <span class="token string">'json'</span> <span class="token operator">?</span>        request<span class="token punctuation">.</span>responseText <span class="token punctuation">:</span> request<span class="token punctuation">.</span>response<span class="token punctuation">;</span>      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token punctuation">{</span>        data<span class="token punctuation">:</span> responseData<span class="token punctuation">,</span>        status<span class="token punctuation">:</span> request<span class="token punctuation">.</span>status<span class="token punctuation">,</span>        statusText<span class="token punctuation">:</span> request<span class="token punctuation">.</span>statusText<span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> responseHeaders<span class="token punctuation">,</span>        config<span class="token punctuation">,</span>        request      <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//根据请求结果处理响应结果</span>      <span class="token function">settle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">_resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">_reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Clean up request</span>      request <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//onloadend是一个</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'onloadend'</span> <span class="token keyword">in</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Use onloadend if available</span>      request<span class="token punctuation">.</span>onloadend <span class="token operator">=</span> onloadend<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Listen for ready state to emulate onloadend</span>      request<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handleLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request <span class="token operator">||</span> request<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>responseURL <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>responseURL<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'file:'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// readystate handler is calling before onerror or ontimeout handlers,</span>        <span class="token comment" spellcheck="true">// so we should call onloadend on the next 'tick'</span>        <span class="token comment" spellcheck="true">//setTimeout是宏任务</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>onloadend<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Handle browser request cancellation (as opposed to a manual cancellation)</span>    request<span class="token punctuation">.</span>onabort <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handleAbort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Handle low level network errors</span>    request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Handle timeout</span>    request<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handleTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Add xsrf header</span>    <span class="token comment" spellcheck="true">// This is only done if running in a standard browser environment.</span>    <span class="token comment" spellcheck="true">// Specifically not if we're in a web worker, or react-native.</span>    <span class="token comment" spellcheck="true">//添加xsrf头部，预防xsrf攻击</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isStandardBrowserEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Add xsrf header   如果请求携带cookie或者同源网站就需要添加</span>      <span class="token keyword">const</span> xsrfValue <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>withCredentials <span class="token operator">||</span> <span class="token function">isURLSameOrigin</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>xsrfCookieName <span class="token operator">&amp;&amp;</span> cookies<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>xsrfCookieName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xsrfValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        requestHeaders<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>xsrfHeaderName<span class="token punctuation">,</span> xsrfValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// false, 0 (zero number), and '' (empty string) are valid JSON values</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestData <span class="token operator">&amp;&amp;</span> requestData <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> requestData <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> requestData <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      requestData <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Send the request</span>    request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>requestData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是ajax请求promise化</p><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><p>用法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000/posts'</span><span class="token punctuation">,</span>    cancelToken<span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>                cancel <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在派发请求前就有取消请求</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 这个函数是将要取消的请求取消，会抛出cancel */</span><span class="token keyword">function</span> <span class="token function">throwIfCancellationRequested</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果需要取消请求，</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>cancelToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>    config<span class="token punctuation">.</span>cancelToken<span class="token punctuation">.</span><span class="token function">throwIfRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>signal <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>signal<span class="token punctuation">.</span>aborted<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CanceledError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">dispatchRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">throwIfCancellationRequested</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  config<span class="token punctuation">.</span>headers <span class="token operator">=</span> AxiosHeaders<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CancelToken</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> executor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'executor must be a function.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">let</span> resolvePromise<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//往实例对象身上添加promise属性，</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">promiseExecutor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*      将修改promise对象成功状态的函数暴露出去，就是说resolve()这样调用时，promise状态是成功状态，      现在赋值给resolvePromise，resolvePromise()这样调用,this.promise状态就会是成功状态      */</span>      resolvePromise <span class="token operator">=</span> resolve<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">...</span>        <span class="token comment" spellcheck="true">//executor的参数是一个cancel函数，这个函数一执行，resolvePromise就会执行，就会改变this.promise</span>    <span class="token comment" spellcheck="true">//的状态</span>    <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cancel</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> config<span class="token punctuation">,</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Cancellation has already been requested</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      token<span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanceledError</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> config<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolvePromise</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//用于检查是否需要取消并抛出</span>  <span class="token function">throwIfRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//订阅取消信号</span>  <span class="token function">subscribe</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_listeners <span class="token operator">=</span> <span class="token punctuation">[</span>listener<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//取消订阅信号</span>  <span class="token function">unsubscribe</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//产生CancelToken的工厂方法</span>  <span class="token keyword">static</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> cancel<span class="token punctuation">;</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cancel <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      token<span class="token punctuation">,</span>      cancel    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在上面的使用示例中，构造cancelToken时，参数为executor，executor的参数为c赋值给cancel。在取消请求</li></ul><p>时调用cancel()，cancel一执行resolvePromise就会执行，resolvePromise一执行this.promise就是成功的状态<br>有两个地方会调用 throwIfCancellationRequested函数，在进入派发请求时，如果配置了cancelToken并且token.reason存在，就会抛出，在发送完请求得到响应后，转换数据前也会调用这个函数进行检测。<br>到底在什么地方取消请求呢？在xhr.js文件中</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//如果配置了cancelToken或者signal  </span><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>cancelToken <span class="token operator">||</span> config<span class="token punctuation">.</span>signal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Handle cancellation</span>      <span class="token comment" spellcheck="true">// eslint-disable-next-line func-names</span>      onCanceled <span class="token operator">=</span> cancel <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">!</span>cancel <span class="token operator">||</span> cancel<span class="token punctuation">.</span>type <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">CanceledError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> request<span class="token punctuation">)</span> <span class="token punctuation">:</span> cancel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取消请求</span>        request<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      config<span class="token punctuation">.</span>cancelToken <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>cancelToken<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onCanceled<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>signal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        config<span class="token punctuation">.</span>signal<span class="token punctuation">.</span>aborted <span class="token operator">?</span> <span class="token function">onCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> config<span class="token punctuation">.</span>signal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'abort'</span><span class="token punctuation">,</span> onCanceled<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置了cancelToken或signal就会取消请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习</title>
      <link href="/2022/12/10/Webpack%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/12/10/Webpack%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么需要打包？"><a href="#为什么需要打包？" class="headerlink" title="为什么需要打包？"></a>为什么需要打包？</h2><p>平时开发时，项目里用到的是前端框架Vue、React，还会用到ES6模块化语法，还有Less&#x2F;Sass等CSS预处理器等来开发，这些都需要编译成JS、CSS、HTML、静态资源等才能在浏览器运行，所以需要打包来完成这些处理。</p><h2 id="有哪些打包工具呢？"><a href="#有哪些打包工具呢？" class="headerlink" title="有哪些打包工具呢？"></a>有哪些打包工具呢？</h2><ul><li>Grunt</li><li>Gulp</li><li>Parcel</li><li>Webpack</li><li>Rollup</li><li>Vite</li><li>…</li></ul><p>Webpack目前最为流行</p><h2 id="Webpack的介绍"><a href="#Webpack的介绍" class="headerlink" title="Webpack的介绍"></a>Webpack的介绍</h2><p> 官网的介绍：本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p><h1 id="Webpack核心概念"><a href="#Webpack核心概念" class="headerlink" title="Webpack核心概念"></a>Webpack核心概念</h1><p>webpack一般不配置也是可以用的，但是我们经常也需要用配置做一些调整，一般在项目的根目录下新建一个webpack.config.js来添加配置项</p><h2 id="入口（entry"><a href="#入口（entry" class="headerlink" title="入口（entry)"></a>入口（entry)</h2><p>entry就是打包的起点，进入入口后webpack会找出哪些模块和库是入口依赖的，每个依赖项随即被处理，最后输出到bundles文件中。<br>entry的默认值是.&#x2F;src&#x2F;index.js，可以在配置文件中修改，可以有多个入口文件</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//入口</span>    entry<span class="token punctuation">:</span><span class="token string">"./src/main.js"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//绝对路径、相对路径均可</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输出（output"><a href="#输出（output" class="headerlink" title="输出（output)"></a>输出（output)</h2><p>output就是告诉webpack它所创建的bundles应该输出到哪里，以及如何命名这些文件（默认值是.&#x2F;dist)</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//输出</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//path是文件输出目录，必须绝对路径</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//输出文件名</span>    filename<span class="token punctuation">:</span> <span class="token string">"static/js/main.js"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将 js 文件输出到 static/js 目录中</span>    clean<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 自动将上次打包目录资源清空</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载器-（loader）"><a href="#加载器-（loader）" class="headerlink" title="加载器 （loader）"></a>加载器 （loader）</h2><p>loader让webpack能够处理那些非JavaScript文件<br>loader有两个属性：</p><ul><li>test：识别哪些文件需要转换</li><li>use:：这些文件用什么loader进行转换<pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//加载器</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>      rules<span class="token punctuation">:</span><span class="token punctuation">[</span>          <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 用来匹配 .css 结尾的文件</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/*  use 数组里面 Loader 执行顺序是从右到左,               css-loader：负责将 Css 文件编译成 Webpack 能识别的模块               style-loader：会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容            */</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token operator">...</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插件（plugins）"><a href="#插件（plugins）" class="headerlink" title="插件（plugins）"></a>插件（plugins）</h2>扩展webpack功能，通过在webpack构建流程中注入钩子实现。<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span> plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../public/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="模式（mode"><a href="#模式（mode" class="headerlink" title="模式（mode)"></a>模式（mode)</h2><p><strong>开发模式（development）</strong><br>开发模式就是开发代码时使用的模式。<br>这个模式下我们主要做两件事：<br>1.编译代码，使浏览器能识别运行<br>开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源<br>2.代码质量检查，树立代码规范<br>提前检查代码的一些隐患，让代码运行时能更加健壮。<br>提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。<br><strong>生产模式（production）</strong><br>生产模式是开发完成代码后，我们需要得到代码将来部署上线。这个模式下我们主要对代码进行优化，让其运行性能更好。<br>优化主要从两个角度出发:</p><ol><li>优化代码运行性能</li><li>优化代码打包速度<h2 id="compiler对象"><a href="#compiler对象" class="headerlink" title="compiler对象"></a>compiler对象</h2><h2 id="compilation对象"><a href="#compilation对象" class="headerlink" title="compilation对象"></a>compilation对象</h2><h1 id="高级进阶"><a href="#高级进阶" class="headerlink" title="高级进阶"></a>高级进阶</h1><h2 id="提升开发体验"><a href="#提升开发体验" class="headerlink" title="提升开发体验"></a>提升开发体验</h2><h3 id="SourceMap"><a href="#SourceMap" class="headerlink" title="SourceMap"></a>SourceMap</h3><h4 id="SourceMap是什么？"><a href="#SourceMap是什么？" class="headerlink" title="SourceMap是什么？"></a>SourceMap是什么？</h4>SourceMap（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。它会生成一个 xxx.map 文件，里面包含源代码和构建后代码每一行、每一列的映射关系。当构建后代码出错了，会通过 xxx.map 文件，从构建后代码出错位置找到映射后源代码出错位置，从而让浏览器提示源代码文件出错位置，帮助我们更快的找到错误根源。<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4></li></ol><p><strong>开发模式</strong>：cheap-module-source-map<br>优点：打包编译速度快，只包含行映射<br>缺点：没有列映射</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 其他省略</span>  mode<span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">"cheap-module-source-map"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生产模式</strong>：source-map<br>优点：包含行&#x2F;列映射<br>缺点：打包编译速度更慢</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 其他省略</span>  mode<span class="token punctuation">:</span> <span class="token string">"production"</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">"source-map"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提升打包构建速度"><a href="#提升打包构建速度" class="headerlink" title="提升打包构建速度"></a>提升打包构建速度</h2><h3 id="HotModuleReplacement"><a href="#HotModuleReplacement" class="headerlink" title="HotModuleReplacement"></a>HotModuleReplacement</h3><h4 id="HotModuleReplacement是什么？"><a href="#HotModuleReplacement是什么？" class="headerlink" title="HotModuleReplacement是什么？"></a>HotModuleReplacement是什么？</h4><p>HotModuleReplacement（HMR&#x2F;热模块替换）：在程序运行中，替换、添加或删除模块，而无需重新加载整个页面</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 其他省略</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 启动服务器域名</span>    port<span class="token punctuation">:</span> <span class="token string">"3000"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 启动服务器端口号</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否自动打开浏览器</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启HMR功能（只能用于开发环境，生产环境不需要了）</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//入口文件的js代码需要更改</span><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> count <span class="token keyword">from</span> <span class="token string">"./js/count"</span><span class="token punctuation">;</span><span class="token keyword">import</span> sum <span class="token keyword">from</span> <span class="token string">"./js/sum"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入资源，Webpack才会对其打包</span><span class="token keyword">import</span> <span class="token string">"./css/iconfont.css"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./css/index.css"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./less/index.less"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./sass/index.sass"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./sass/index.scss"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./styl/index.styl"</span><span class="token punctuation">;</span><span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断是否支持HMR功能</span><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"./js/count.js"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"./js/sum.js"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>但是在实际开发中不会这么用的，一般用vue-loader、react-hot-loader</p></blockquote><h3 id="OneOf"><a href="#OneOf" class="headerlink" title="OneOf"></a>OneOf</h3><h4 id="OneOf是什么？"><a href="#OneOf是什么？" class="headerlink" title="OneOf是什么？"></a>OneOf是什么？</h4><p>打包时每个文件都会经过所有 loader 处理，虽然因为 test 正则原因实际没有处理上，但是都要过一遍。比较慢。Oneof的作用就是只能匹配上一个 loader, 剩下的就不匹配了</p><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开发模式没有输出，不需要指定输出目录</span>    filename<span class="token punctuation">:</span> <span class="token string">"static/js/main.js"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将 js 文件输出到 static/js 目录中</span>    <span class="token comment" spellcheck="true">// clean: true, // 开发模式没有输出，不需要清空输出结果</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 用来匹配 .css 结尾的文件</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// use 数组里面 Loader 执行顺序是从右到左</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>          <span class="token operator">...</span>          <span class="token punctuation">]</span>      <span class="token punctuation">}</span>      <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Include-x2F-Exclude"><a href="#Include-x2F-Exclude" class="headerlink" title="Include&#x2F;Exclude"></a>Include&#x2F;Exclude</h3><h4 id="Include-x2F-Exclude是什么？"><a href="#Include-x2F-Exclude是什么？" class="headerlink" title="Include&#x2F;Exclude是什么？"></a>Include&#x2F;Exclude是什么？</h4><pre><code>    开发时我们需要使用第三方的库或插件，所有文件都下载到 node_modules 中了。而这些文件是不需要编译可以直接使用的。所以我们在对 js 文件处理时，要排除node_modules 下面的文件</code></pre><p>include，包含，只处理 xxx 文件<br>exclude，排除，除了 xxx 文件以外其他文件都处理</p><h4 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h4><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token operator">...</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// exclude: /node_modules/, // 排除node_modules代码不编译</span>            include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 也可以用包含</span>            loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">ESLintWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 指定检查文件的根目录</span>      context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认值</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><h4 id="Cache是什么？"><a href="#Cache是什么？" class="headerlink" title="Cache是什么？"></a>Cache是什么？</h4><p>每次打包时 js 文件都要经过 Eslint 检查 和 Babel 编译，速度比较慢。我们可以缓存之前的 Eslint 检查 和 Babel 编译结果，这样第二次打包时速度就会更快了。</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>         <span class="token operator">...</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// exclude: /node_modules/, // 排除node_modules代码不编译</span>            include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 也可以用包含</span>            loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              cacheDirectory<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启babel编译缓存</span>              cacheCompression<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 缓存文件不要压缩</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">ESLintWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 指定检查文件的根目录</span>      context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认值</span>      cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启缓存</span>      <span class="token comment" spellcheck="true">// 缓存目录</span>      cacheLocation<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>        __dirname<span class="token punctuation">,</span>        <span class="token string">"../node_modules/.cache/.eslintcache"</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Thead"><a href="#Thead" class="headerlink" title="Thead"></a>Thead</h3><h4 id="Thead是什么？"><a href="#Thead是什么？" class="headerlink" title="Thead是什么？"></a>Thead是什么？</h4><p>多进程打包，可以开启多进程同时处理 js 文件。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"terser-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// cpu核数</span><span class="token keyword">const</span> threads <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>         <span class="token operator">...</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// exclude: /node_modules/, // 排除node_modules代码不编译</span>            include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 也可以用包含</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">"thread-loader"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启多进程</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  workers<span class="token punctuation">:</span> threads<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 数量</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  cacheDirectory<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启babel编译缓存</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">ESLintWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 指定检查文件的根目录</span>      context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认值</span>      cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启缓存</span>      <span class="token comment" spellcheck="true">// 缓存目录</span>      cacheLocation<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>        __dirname<span class="token punctuation">,</span>        <span class="token string">"../node_modules/.cache/.eslintcache"</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      threads<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启多进程</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="减少代码体积"><a href="#减少代码体积" class="headerlink" title="减少代码体积"></a>减少代码体积</h2><h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h3><h4 id="Tree-Shaking是什么？"><a href="#Tree-Shaking是什么？" class="headerlink" title="Tree Shaking是什么？"></a>Tree Shaking是什么？</h4><p>开发时我们定义了一些工具函数库，或者引用第三方工具函数库或组件库。如果没有特殊处理的话我们打包时会引入整个库，但是实际上可能我们可能只用上极小部分的功能。这样将整个库都打包进来，体积就太大了。Tree Shaking 就是移除 JavaScript 中的没有使用上的代码。<br>Webpack 已经默认开启了这个功能，无需其他配置。</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><h4 id="Babe是什么？"><a href="#Babe是什么？" class="headerlink" title="Babe是什么？"></a>Babe是什么？</h4><p>Babel 为编译的每个文件都插入了辅助代码，使代码体积过大！Babel 对一些公共方法使用了非常小的辅助代码，比如 _extend。默认情况下会被添加到每一个需要它的文件中。可以将这些辅助代码作为一个独立模块，来避免重复引入。<br>@babel&#x2F;plugin-transform-runtime: 禁用了 Babel 自动对每个文件的 runtime 注入，而是引入 @babel&#x2F;plugin-transform-runtime 并且使所有辅助代码从这里引用。</p><h4 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h4><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>         <span class="token operator">...</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// exclude: /node_modules/, // 排除node_modules代码不编译</span>            include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 也可以用包含</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">"thread-loader"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启多进程</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  workers<span class="token punctuation">:</span> threads<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 数量</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  cacheDirectory<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启babel编译缓存</span>                  cacheCompression<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 缓存文件不要压缩</span>                  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 减少代码体积</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Image-Minimizer"><a href="#Image-Minimizer" class="headerlink" title="Image Minimizer"></a>Image Minimizer</h3><h4 id="Image-Minimizer是什么？"><a href="#Image-Minimizer是什么？" class="headerlink" title="Image Minimizer是什么？"></a>Image Minimizer是什么？</h4><p>开发如果项目中引用了较多图片，那么图片体积会比较大，将来请求速度比较慢。<br>我们可以对图片进行压缩，减少图片体积。image-minimizer-webpack-plugin是用来压缩图片的插件</p><blockquote><p>注意：如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。</p></blockquote><h4 id="用法-4"><a href="#用法-4" class="headerlink" title="用法"></a>用法</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ImageMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"image-minimizer-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// 压缩图片</span>      <span class="token keyword">new</span> <span class="token class-name">ImageMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        minimizer<span class="token punctuation">:</span> <span class="token punctuation">{</span>          implementation<span class="token punctuation">:</span> ImageMinimizerPlugin<span class="token punctuation">.</span>imageminGenerate<span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">[</span><span class="token string">"gifsicle"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> interlaced<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token string">"jpegtran"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> progressive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token string">"optipng"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> optimizationLevel<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span>                <span class="token string">"svgo"</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token string">"preset-default"</span><span class="token punctuation">,</span>                    <span class="token string">"prefixIds"</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                      name<span class="token punctuation">:</span> <span class="token string">"sortAttrs"</span><span class="token punctuation">,</span>                      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        xmlnsOrder<span class="token punctuation">:</span> <span class="token string">"alphabetical"</span><span class="token punctuation">,</span>                      <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化代码运行性能"><a href="#优化代码运行性能" class="headerlink" title="优化代码运行性能"></a>优化代码运行性能</h2><h3 id="Code-Split"><a href="#Code-Split" class="headerlink" title="Code Split"></a>Code Split</h3><h4 id="Code-Split是什么？"><a href="#Code-Split是什么？" class="headerlink" title="Code Split是什么？"></a>Code Split是什么？</h4><p>如果打包代码时会将所有 js 文件打包到一个文件中，体积会太大，应该实现当前渲染某一页就加载某一页的代码，所以需要将打包生成的文件进行代码分割，生成多个 js 文件，渲染哪个页面就只加载某个 js 文件，这样加载的资源就少，速度就更快。</p><h4 id="用法-5"><a href="#用法-5" class="headerlink" title="用法"></a>用法</h4><h5 id="1-多个入口文件"><a href="#1-多个入口文件" class="headerlink" title="1.多个入口文件"></a>1.多个入口文件</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//可以配置多个入口文件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>    app<span class="token punctuation">:</span> <span class="token string">"./src/app.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置多个入口文件，打包后会生成多个js文件（配置多少个入口，就会生成多少个js文件）</p><h5 id="2-提取重复代码"><a href="#2-提取重复代码" class="headerlink" title="2. 提取重复代码"></a>2. 提取重复代码</h5><p>如果多入口文件中都引用了同一份代码，会导致代码重复，体积更大。可以提取多入口的重复代码，只打包生成一个 js 文件，其他文件引用它就好。</p><h5 id="3-按需加载，动态导入"><a href="#3-按需加载，动态导入" class="headerlink" title="3. 按需加载，动态导入"></a>3. 按需加载，动态导入</h5><p>想要实现按需加载，动态导入模块。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//点击事件发生时才导入</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 动态导入 --> 实现按需加载</span>  <span class="token comment" spellcheck="true">// 即使只被引用了一次，也会代码分割</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./math.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sum <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-单入口"><a href="#4-单入口" class="headerlink" title="4. 单入口"></a>4. 单入口</h5><p>开发时我们可能是单页面应用（SPA），只有一个入口（单入口）。可以这样配置：</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代码分割配置</span>    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 对所有模块都进行分割</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Preload-x2F-Prefetch"><a href="#Preload-x2F-Prefetch" class="headerlink" title="Preload &#x2F; Prefetch"></a>Preload &#x2F; Prefetch</h3><h4 id="Preload-x2F-Prefetch是什么？"><a href="#Preload-x2F-Prefetch是什么？" class="headerlink" title="Preload &#x2F; Prefetch是什么？"></a>Preload &#x2F; Prefetch是什么？</h4><p>当按需加载时加载一个很大的资源时会发生卡顿，可以在浏览器空闲时间，加载后续需要使用的资源可以用上 Preload 或 Prefetch 技术</p><ul><li>Preload：告诉浏览器立即加载资源。</li><li>Prefetch：告诉浏览器在空闲时才开始加载资源。</li></ul><p>它们共同点是：</p><ul><li>都只会加载资源，并不执行。</li><li>都有缓存。</li></ul><p>它们区别：</p><ul><li>Preload加载优先级高，Prefetch加载优先级低。</li><li>Preload只能加载当前页面需要使用的资源，Prefetch可以加载当前页面资源，也可以加载下一个页面需要使用的资源。</li></ul><p>总结：</p><ul><li>当前页面优先级高的资源用 Preload 加载。</li><li>下一个页面需要使用的资源用 Prefetch 加载。<h4 id="用法-6"><a href="#用法-6" class="headerlink" title="用法"></a>用法</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PreloadWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@vue/preload-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>   plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">PreloadWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    rel<span class="token punctuation">:</span> <span class="token string">"preload"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// preload兼容性更好</span>    <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token string">"script"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// rel: 'prefetch' // prefetch兼容性更差</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8垃圾回收机制</title>
      <link href="/2022/12/10/V8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/12/10/V8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="V8垃圾回收机制"><a href="#V8垃圾回收机制" class="headerlink" title="V8垃圾回收机制"></a>V8垃圾回收机制</h2><h3 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h3><h4 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h4><p>调用栈中的执行上下文中存放了相应的变量环境，其中原始类型数据的数据值是直接保存在栈里,而引用类型保存的是引用地址，其值是存放在堆中。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天是周五~~"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658386585910-b1613021-4520-4082-8b0a-3839c01489b2.jpeg"></p><h4 id="栈中数据回收"><a href="#栈中数据回收" class="headerlink" title="栈中数据回收"></a>栈中数据回收</h4><p>栈中数据的回收是通过栈顶指针ESP下移实现的<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658387202021-a4b683df-58a3-442e-8ff7-1ea9b0147acb.jpeg"></p><h3 id="V8垃圾回收器"><a href="#V8垃圾回收器" class="headerlink" title="V8垃圾回收器"></a>V8垃圾回收器</h3><p>堆中存放数据的回收就需要用到垃圾回收器了</p><h4 id="代际假说"><a href="#代际假说" class="headerlink" title="代际假说"></a>代际假说</h4><p>代际假说（The Generational Hypothesis）的内容，这是垃圾回收领域中一个重要的术语，后续垃圾回收的策略都是建立在该假说的基础之上的，所以很是重要。<br><strong>代际假说有以下两个特点：</strong></p><ul><li>第一个是大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问；</li><li>第二个是不死的对象，会活得更久。</li></ul><p>其实这两个特点不仅仅适用于 JavaScript，同样适用于大多数的动态语言，如 Java、Python 等。<br><strong>V8是采用分代垃圾回收机制</strong><br>在 V8 中会把堆分为新生代和老生代两个区域，新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象。（新生代的容量比老生代小）</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span> 新生代   <span class="token operator">|</span>   老生代                       <span class="token operator">|</span>  V8分代 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="垃圾回收器工作流程"><a href="#垃圾回收器工作流程" class="headerlink" title="垃圾回收器工作流程"></a>垃圾回收器工作流程</h4><p>第一步，标记空间中活动对象和非活动对象。所谓活动对象就是还在使用的对象，非活动对象就是可以进行垃圾回收的对象。<br>第二步，回收非活动对象所占据的内存。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象。<br>第三步，做内存整理。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为<strong>内存碎片</strong>。当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存的时候，就有可能出现内存不足的情况。</p><h3 id="新生代垃圾回收"><a href="#新生代垃圾回收" class="headerlink" title="新生代垃圾回收"></a>新生代垃圾回收</h3><h4 id="新生代垃圾回收过程"><a href="#新生代垃圾回收过程" class="headerlink" title="新生代垃圾回收过程"></a>新生代垃圾回收过程</h4><p>新生代实行垃圾回收的是<strong>副垃圾回收器，</strong>使用Scavenge 算法来处理。所谓 Scavenge 算法，是把新生代空间对半划分为两个区域，一半是对象区域（from区），一半是空闲区域（to区）。<br>新加入的对象都会存放到对象区域，当对象区域快被写满时，就需要执行一次垃圾<strong>清理操作</strong>。</p><ol><li>标记对象，留下活动对象，清除非活动对象</li><li>把存活的活动对象复制到空闲区</li><li>将对象区域和空闲区域进行翻转，原来对象区域变成空闲区域，空闲区域变成对象区域，循环反复进行。</li></ol><p> Scavenge 算法是典型的牺牲空间换时间的方法，只利用了新生代中的对象区，但是每次都需要将存活的对象从对象区域复制到空闲区域，但复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以为了执行效率，一般新生区的空间会被设置得比较小。</p><h4 id="对象晋升"><a href="#对象晋升" class="headerlink" title="对象晋升"></a>对象晋升</h4><p>因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了对象晋升策略，新生代对象会被移动到老生区中，这就是<strong>晋升</strong><br><strong>晋升条件</strong></p><ul><li><p>对象是否经历过一次Scavenge算法（通过内存地址判断）</p></li><li><p>To空间的内存占比是否已经超过25%</p><h3 id="老生代垃圾回收"><a href="#老生代垃圾回收" class="headerlink" title="老生代垃圾回收"></a>老生代垃圾回收</h3><p>主垃圾回收器主要负责老生区中的垃圾回收。除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。<br>主垃圾回收器是采用<strong>标记 - 清除</strong>（Mark-Sweep）和<strong>标记-整理</strong>（Mark-Compact）的算法进行垃圾回收的。</p><h4 id="Mark-Sweep（标记-清除）"><a href="#Mark-Sweep（标记-清除）" class="headerlink" title="Mark-Sweep（标记 - 清除）"></a>Mark-Sweep（标记 - 清除）</h4><p>顾名思义就是进行标记和清除，</p></li><li><p>标记，就是遍历堆中的对象，标记存活着的对象</p></li><li><p>清除，就是清除没有被标记的对象</p></li></ul><p>但是标记清除后会存在许多内存碎片，所以还要进行整理</p><h4 id="Mark-Compact-标记-整理"><a href="#Mark-Compact-标记-整理" class="headerlink" title="Mark-Compact(标记-整理)"></a>Mark-Compact(标记-整理)</h4><p>如果学过操作系统的话应该会懂什么是内存碎片，操作系统内存管理就需要处理内存碎片<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658390141987-78876bf3-f53c-46db-a05a-e6f2a73edc64.jpeg"></p><p> 就是将存活的对象移动到一段，把空闲的碎片合并</p><h3 id="V8垃圾回收存在的问题和解决"><a href="#V8垃圾回收存在的问题和解决" class="headerlink" title="V8垃圾回收存在的问题和解决"></a>V8垃圾回收存在的问题和解决</h3><h4 id="全停顿"><a href="#全停顿" class="headerlink" title="全停顿"></a>全停顿</h4><p>由于 JavaScript 是运行在主线程之上的，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做全停顿（Stop-The-World）<br>这种停顿对新生代的垃圾回收影响并不大，但是对<strong>老生代</strong>影响就比较明显了，容易造成<strong>卡顿</strong></p><h4 id="增量标记"><a href="#增量标记" class="headerlink" title="增量标记"></a>增量标记</h4><p>为了减小停顿时间带来的影响，V8 引入了增量标记，即将可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，这样就不会长时间无响应。  </p>]]></content>
      
      
      <categories>
          
          <category> V8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/14/vue2%E8%99%9A%E6%8B%9FDOM/"/>
      <url>/2022/11/14/vue2%E8%99%9A%E6%8B%9FDOM/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="为什么引入虚拟DOM？"><a href="#为什么引入虚拟DOM？" class="headerlink" title="为什么引入虚拟DOM？"></a>为什么引入虚拟DOM？</h3><p>       在响应式系统上就说到，页面的渲染是通过我们输入状态，然后生成DOM输出到页面上显示出来的，但是程序在运行时，状态是不停在变化的，每当状态发生了变化，就需要重新渲染。最简单粗暴的就是删除所有DOM，重新生成一份，但是这样操作DOM会造成相当大的性能浪费，并且通常只需要重新渲染有限个节点，因此各个框架有不同的解决方案，Angular是脏检查，React是使用虚拟DOM，Vue.js1.0使用细粒度的绑定，Vue.js2.0使用虚拟DOM。</p><h3 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM?"></a>什么是虚拟DOM?</h3><p>        虚拟DOM是通过状态生成一个虚拟节点树，然后使用虚拟节点树和上一次渲染视图使用的旧虚拟节点树进行对比，只渲染不同的部分。</p><p><strong>使用模板来描述状态和DOM之间的映射关系</strong></p><p>Vue 会通过模板编译，将模板转换成渲染函数，通过执行这个函数就能够得到一个虚拟节点树。 每次属性发生变化，会调用组件渲染函数生成新的虚拟节点树，然后将新生成的虚拟节点树与上一次渲染视图使用的旧虚拟节点树进行<strong>对比（diff）</strong>，再把要更新的地方进行 DOM 操作<strong>（patch）</strong>。最后缓存这一次渲染视图使用的虚拟节点树的 VNode</p><p><img src="/Vue2.assets/%E8%99%9A%E6%8B%9FDOM-16489941157851.png#crop=0&crop=0&crop=1&crop=1&id=o8pcD&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="VNode"><a href="#VNode" class="headerlink" title="VNode"></a>VNode</h3><p><strong>VNode是什么？</strong></p><p>VNode 其实就是虚拟节点，在 Vue.js 中存在一个 VNode 类，可以用来实例化不同类型的 vnode 实例来表示不同类型的 DOM 节点。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">VNode</span><span class="token punctuation">{</span>     <span class="token function">constructor</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span>data<span class="token punctuation">,</span>children<span class="token punctuation">,</span>text<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">=</span>tag<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>       <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染视图的过程先创建vnode，然后再使用vnode去生成真实的DOM元素，最后插入到页面渲染视图。</p><p>VNode 的类型有以下几种：</p><p>注释节点</p><p>文本节点</p><p>元素节点</p><p>组件节点</p><p>函数式组件</p><p>克隆节点</p><p>辨别节点类型可以通过节点的属性，比如注释节点只有text和isComment两个有效属性，其余属性全都是默认undefined或者false</p><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>patch 算法又叫 patching 算法，它主要是通过对比新旧 vnode 找到需要更新的节点进行更新。</p><p><img src="/Vue2.assets/patch.png#crop=0&crop=0&crop=1&crop=1&id=VKXSK&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>patch的过程其实就是创建节点、删除节点和修改节点的过程。</p><p><strong>创建节点什么时候发生？</strong></p><ul><li>oldVnode不存在而Vnode存在时</li><li>首次渲染时</li><li>vnode和oldVnode完全不是一个节点时</li></ul><p><strong>删除节点什么时候发生？</strong></p><ul><li>一个节点只在oldVnode时</li><li>oldVnode和vnode完全不是一个节点时</li></ul><p><strong>更新节点发生在oldVnode和vnode是同一个节点</strong></p><p><strong>patch的主要是两个算法：patchVnode 和 updateChildren</strong></p><p><strong>patchVnode</strong></p><p><strong>updateChildren</strong></p><p>更新子节点，也是 diff 的核心。</p><p>主要是 4 种操作：更新节点、新增节点、删除节点、移动节点。</p><p>注意是在<strong>循环中</strong>进行比对</p><p>新增子节点</p><p>当没有在 oldChildren 中找到本次循环所指向的新子节点的节点，就新建一个节点插入到<strong>所有未处理节点的前面</strong></p><p>更新子节点。</p><p>同一个节点且同一位置</p><p>移动子节点。</p><p>同一个节点，但是位置不同，则把需要移动的节点移动到所有未处理节点的前面。</p><p>删除子节点。</p><p>本质上是删除哪些 oldChildren 存在但 newChildren 不存在的节点。</p><p><strong>补充一个流程图。。。</strong></p><h3 id="Diff算法（待补充。。。）"><a href="#Diff算法（待补充。。。）" class="headerlink" title="Diff算法（待补充。。。）"></a>Diff算法（待补充。。。）</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/14/Vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/14/Vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h1><h2 id="响应式系统"><a href="#响应式系统" class="headerlink" title="响应式系统"></a>响应式系统</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>渲染：</strong>vue通过状态生成DOM，并在页面上显示出来的过程就是渲染。<br>在运行时，应用内部状态会不断发生变化，需要不停地渲染，而变化侦测就是来解决这个问题的。</p><p><strong>变化侦测</strong><br>vue、react、angular变化侦测的区别？<br>Angular和React的变化侦测属于”拉”，就是说框架不清楚是哪个状态发生变化，框架知道状态变了，然后进行“暴力对比”寻找需要重新渲染的DOM节点（Angular是脏检查的流程，React中使用的是虚拟DOM，待展开…..）<br>Vue的变化侦测属于”推”，当状态发生变化时，Vue可以知道说是哪些状态发生了变化，然后它可以向这个状态的所有依赖发送通知。</p><p><strong>粒度</strong><br>Vue.js2.0以前，是一个状态绑定好多个依赖，每个依赖表示一个具体的DOM节点，当状态发生变化时，向这个状态的所有依赖发送通知，让他们进行DOM更新操作。（粒度比较细，但是绑定的依赖多，而且依赖追踪在内存上的开销大）<br>Vue.js2.0之后，引入了虚拟DOM，一个状态绑定的依赖不再是DOM节点，而是一个组件，粒度就调整为中等粒度了。（比之前有了提升,但是它的粒度还是比”拉”的粒度小的）</p><p><strong>侦测方式</strong><br>Object.defineProperty,proxy(下面Vue3再讲)</p><p>补充个人的大白话<br>其实没那么复杂，就是就是比如说在代码的各个地方都用到了某个数据，当这个数据变化时，这些地方就都要更新。更新的方法就是之前在用这个数据的时候就把它使用的地方都收集起来（这些地方就叫依赖），后面这个数据变化了，就通过遍历之前收集的那些地方，一一去更新它。</p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="如何收集依赖？"><a href="#如何收集依赖？" class="headerlink" title="如何收集依赖？"></a>如何收集依赖？</h4><p>在getter中收集依赖，在setter中触发依赖</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>  obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  val<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  customSetter<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>  shallow<span class="token operator">?</span><span class="token punctuation">:</span> boolean   <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> dep<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//getter</span>        <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//收集依赖</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//setter</span>        <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>            <span class="token punctuation">}</span>             val<span class="token operator">=</span>newVal<span class="token punctuation">;</span>             dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//触发依赖</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="依赖收集在哪里？"><a href="#依赖收集在哪里？" class="headerlink" title="依赖收集在哪里？"></a>依赖收集在哪里？</h4><p>用Dep类收集，可以用这个类来收集依赖、删除依赖、向依赖发送通知等等<br>Dep其实主要就两个主要的功能，一是用一个数组收集依赖Watcher,二就是遍历数组对每个Watcher进行update</p><pre class="line-numbers language-javascript"><code class="language-javascript">Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">//Dep其实是一个依赖收集器，一个响应式数据的依赖收集器可以被许多指令订阅</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//静态属性target</span>   <span class="token keyword">static</span> target<span class="token punctuation">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//收集所有的订阅者</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//添加订阅者</span>   addSub <span class="token punctuation">(</span>sub<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//取消订阅</span>   removeSub <span class="token punctuation">(</span>sub<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">,</span> sub<span class="token punctuation">)</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//触发getter时收集依赖</span>    depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//拷贝数组</span>        <span class="token keyword">const</span> subs<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subs<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span>id <span class="token operator">-</span> b<span class="token punctuation">.</span>id<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 依次触发更新</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> remove <span class="token punctuation">(</span>arr<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除某一个</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Dep.target是指向一个具体的Watcher，每个Watcher自己也维护了一个依赖收集器</span><span class="token comment" spellcheck="true">//表示自己依赖了多少个数据</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">//targetStack用来存放依赖的</span><span class="token keyword">const</span> targetStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">function</span> pushTarget <span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>  targetStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> popTarget <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  targetStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> targetStack<span class="token punctuation">[</span>targetStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="依赖究竟是什么？"><a href="#依赖究竟是什么？" class="headerlink" title="依赖究竟是什么？"></a>依赖究竟是什么？</h4><p>由于使用这个数据的地方有很多，有多种类型，有可能是模板，也有可能是用户写的一个watch，所以抽象成一个类来处理这些情况，这个类叫Watcher,所以收集的就是Watcher实例</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Watcher</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>    vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表达式</span>    cb<span class="token punctuation">:</span> Function<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//回调函数</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>    isRenderWatcher<span class="token operator">?</span><span class="token punctuation">:</span> boolean     <span class="token operator">...</span>       <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//只截取关键部分代码</span>          <span class="token comment" spellcheck="true">//这里主要是跟vm.$watch的deep选项有关</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>deep      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用set，不会重复订阅</span>                 <span class="token comment" spellcheck="true">/*     调用this.getter()就可以读取到属性的值     注意这里expOrFn可以是函数，如果它是函数，Watcher会同时观察函数里读取的所有Vue.js示例上的     响应式数据，而如果是字符串类型的则会直接读取字符串指向的数据     */</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> expOrFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> noop        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Failed watching path: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expOrFn<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" `</span></span> <span class="token operator">+</span>          <span class="token string">'Watcher only accepts simple dot-delimited paths. '</span> <span class="token operator">+</span>          <span class="token string">'For full control, use a function instead.'</span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这个是更新时要用的方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token operator">=</span>cb<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在非惰性检测情况下，触发对象属性的getter方法，收集依赖</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token operator">?</span> undefined<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//触发getter，重新收集依赖</span>   <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把当前Watcher的实例赋值加入targetStack</span>    <span class="token keyword">let</span> value    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取属性的值,这样就会触发属性的getter,然后将watcher实例push进Dep实例里</span>      value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`getter for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//实现vm.$watch的deep选项，递归value的所有子值来触发它们的收集依赖的功能</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把当前Watcher的实例赋值弹出targetStack</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value  <span class="token punctuation">}</span>     addDep <span class="token punctuation">(</span>dep<span class="token punctuation">:</span> Dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id    <span class="token comment" spellcheck="true">//如果没有判断，每次数据发生了变化，watcher的get方法都会读取最新数据，收集依赖，会导致Dep有</span>    <span class="token comment" spellcheck="true">//依赖重复</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//把dep加入当前watcher，在Watcher中记录自己都订阅过哪些Dep</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//把当前watcher加入dep</span>        dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//同步更新</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//异步更新</span>      <span class="token function">queueWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//从所有依赖项的Dep列表中将自己移除</span>   teardown <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// remove self from vm's watcher list</span>      <span class="token comment" spellcheck="true">// this is a somewhat expensive operation so we skip it</span>      <span class="token comment" spellcheck="true">// if the vm is being destroyed.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span>_isBeingDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>触发属性的getter，就会调用Watcher实例的get()方法收集该依赖<br>触发属性的setter，就会通知Dep的各个依赖，然后调用依赖的update()方法更新</p><p>上面的addDep中，Dep收集了Watcher，而Watcher中同样也记录了自己会被哪些Dep通知，Dep和Watcher之间是多对多的关系。为什么Watcher被多个Dep通知？<br>因为如果expOrFn参数是一个表达式，那么肯定只收集一个Dep,但是如果expOrFn是一个函数，而且此函数使用了多个数据，那么此时的Watcher就要收集多个Dep了</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上例用vm.$watch观察一个函数，函数里用到了age和name两个响应式数据，这种情况下Watcher内部会收集两个Dep(name的Dep和age的Dep),同时这两个Dep中也会收集Watcher，这样age和name中任意一个数据发生变化，Watcher都会收到通知</p><h4 id="递归侦测所有属性"><a href="#递归侦测所有属性" class="headerlink" title="递归侦测所有属性"></a>递归侦测所有属性</h4><p>上面已经可以侦测一个属性了，但是要实现对象所有属性的侦测<strong>，因为存在对象嵌套，所以要递归，需要封装一个Observer类。</strong></p><p>这个类的作用是将一个数据内的所有属性都转换成getter、setter形式，然后可以去追踪他们的变化。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  value<span class="token punctuation">:</span> any<span class="token punctuation">;</span>  dep<span class="token punctuation">:</span> Dep<span class="token punctuation">;</span>  vmCount<span class="token punctuation">:</span> number<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number of vms that have this object as root $data</span>     <span class="token comment" spellcheck="true">//目前分析这里传入的value是一个对象</span>  constructor <span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vmCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 遍历对象</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">walk</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> keys<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的keys是obj第一层的key,不包括嵌套的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>obj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>  obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  val<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  customSetter<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>  shallow<span class="token operator">?</span><span class="token punctuation">:</span> boolean  <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> property <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span>configurable <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// cater for pre-defined getter/setters</span>  <span class="token keyword">const</span> getter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">get</span>  <span class="token keyword">const</span> setter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>getter <span class="token operator">||</span> setter<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若属性值也是对象，深度遍历递归执行observe实例化</span>    <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// getter，触发getter时，收集依赖。</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获得当前值</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val      <span class="token comment" spellcheck="true">// 如果当前有目标依赖这个数据，则添加依赖Watcher</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 子对象也要增加依赖收集</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>          childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 数组特殊处理</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// setter，触发setter时，派发更新。newVal待设置的值</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveSetter <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获得当前值</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val      <span class="token comment" spellcheck="true">// 如果值没有变化，则不触发更新通知</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 自定义setter方法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> customSetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">customSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果属性不支持setter，则直接跳过</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>getter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>setter<span class="token punctuation">)</span> <span class="token keyword">return</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 有自己的setter就调用自身setter</span>        setter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新赋值</span>        val <span class="token operator">=</span> newVal      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 子对象也要重新observe实例化</span>      childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 通知更新</span>      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="存在问题？（待补充。。。）"><a href="#存在问题？（待补充。。。）" class="headerlink" title="存在问题？（待补充。。。）"></a>存在问题？（待补充。。。）</h4><p>1.Vue.js通过Object.defineProperty来将对象的key转换成getter&#x2F;setter的形式来追踪变化，但getter&#x2F;setter只能追踪一个属性是否被修改（就是这个属性要存在），无法追踪新增属性和删除属性。(vm.$set和vm.$delete可以解决)</p><p>2.数组调用原型上的方法（push、pop、shift、unshift、splice、sort、reverse),还有直接修改数组长度，直接修改某个元素的值，并不会触发setter。前一个问题可以用拦截器覆盖原型上的方法，后两个问题未解决。（或许es6的poxy就可以解决了。。）</p><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>拦截器可以覆盖原型上的方法，这样每次调用的就是拦截器中提供的方法</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//src/core/observer/array.js</span><span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token comment" spellcheck="true">//arrayProto作为arrayMethods的原型</span><span class="token keyword">export</span> <span class="token keyword">const</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>arrayProto<span class="token punctuation">)</span><span class="token keyword">const</span> methodsToPatch <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'push'</span><span class="token punctuation">,</span>  <span class="token string">'pop'</span><span class="token punctuation">,</span>  <span class="token string">'shift'</span><span class="token punctuation">,</span>  <span class="token string">'unshift'</span><span class="token punctuation">,</span>  <span class="token string">'splice'</span><span class="token punctuation">,</span>  <span class="token string">'sort'</span><span class="token punctuation">,</span>  <span class="token string">'reverse'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">/** * Intercept mutating methods and emit events */</span>methodsToPatch<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// cache original method 缓存原始方法</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//覆盖原方法</span>  <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> mutator <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__    <span class="token keyword">let</span> inserted    <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token punctuation">:</span>      <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// notify change</span>    ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// src/core/util/lang.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> def <span class="token punctuation">(</span>obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> key<span class="token punctuation">:</span> string<span class="token punctuation">,</span> val<span class="token punctuation">:</span> any<span class="token punctuation">,</span> enumerable<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> val<span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>enumerable<span class="token punctuation">,</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么不直接覆盖Array.prototype?</strong></p><p>因为我们希望拦截操作只覆盖那些响应式数组的原型，不希望污染全局的Array。而把一个数据转换成响应式的，需要通过Observer,所以需要在Observer中使用拦截器覆盖数组即可。</p><p><strong>有些浏览器不支持 <strong><code>**__proto__**</code></strong>?</strong><br>Vue的做法是，直接将arrayMethods身上的这些方法设置到被侦测的数组上</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>arrayMethods<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./array'</span><span class="token punctuation">;</span><span class="token keyword">const</span> hasProto <span class="token operator">=</span> <span class="token string">'__proto__'</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否支持__proto__</span><span class="token keyword">const</span> arrayKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hasProto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">protoAugment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">copyAugment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">,</span> arrayKeys<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Augment a target Object or Array by intercepting * the prototype chain using __proto__ */</span><span class="token keyword">function</span> protoAugment <span class="token punctuation">(</span>target<span class="token punctuation">,</span> src<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* eslint-disable no-proto */</span>  target<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> src  <span class="token comment" spellcheck="true">/* eslint-enable no-proto */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Augment a target Object or Array by defining * hidden properties. */</span><span class="token comment" spellcheck="true">/* istanbul ignore next */</span><span class="token keyword">function</span> copyAugment <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> src<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token function">def</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何收集依赖"><a href="#如何收集依赖" class="headerlink" title="如何收集依赖"></a>如何收集依赖</h4><p>数组收集依赖的方式和object一样，都是在getter收集，但是要注意的是<strong>数组是在拦截器中触发依赖</strong></p><h4 id="依赖收集在哪里"><a href="#依赖收集在哪里" class="headerlink" title="依赖收集在哪里?"></a>依赖收集在哪里?</h4><p>数组的依赖保存在Observer里，因为getter需要访问到依赖，拦截器也需要，所以要保存在两者都能访问到的地方——Observer.</p><pre><code>export class Observer&#123;  constructor(value: any)&#123;    this.value = value;    this.dep=new Dep();    ...</code></pre><p><strong>getter访问和收集依赖</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> childOb<span class="token operator">=</span><span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新增 这个主要是解决多维数组，对象数组的。。</span>    <span class="token keyword">let</span> dep<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//新增 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>childOb<span class="token punctuation">)</span><span class="token punctuation">{</span>              childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//收集依赖</span>             <span class="token punctuation">}</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//setter</span>        <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">===</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             val<span class="token operator">=</span>newVal<span class="token punctuation">;</span>             dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断value是否存在Observer实例，有则返回无则新建</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>asRootData<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> ob<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">'__ob__'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>value<span class="token punctuation">.</span>__ob__ <span class="token keyword">instanceof</span> <span class="token class-name">Observer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       ob<span class="token operator">=</span>value<span class="token punctuation">.</span>__ob__<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       ob<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ob<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拦截器访问依赖并发送通知</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 工具函数</span><span class="token keyword">function</span> def <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> enumerable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> val<span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>enumerable<span class="token punctuation">,</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">'__ob__'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样就可以拿到observer实例，从而拿到dep了</span>    <span class="token operator">...</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">,</span><span class="token string">'pop'</span><span class="token punctuation">,</span><span class="token string">'shift'</span><span class="token punctuation">,</span><span class="token string">'unshift'</span><span class="token punctuation">,</span><span class="token string">'splice'</span><span class="token punctuation">,</span><span class="token string">'sort'</span><span class="token punctuation">,</span><span class="token string">'reverse'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method <span class="token punctuation">,</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token function">mutator</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">const</span> result<span class="token operator">=</span>original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">const</span> ob<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>__ob__<span class="token punctuation">;</span>       ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送通知</span>      <span class="token keyword">return</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token operator">...</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="侦测所有数据子集"><a href="#侦测所有数据子集" class="headerlink" title="侦测所有数据子集"></a>侦测所有数据子集</h4><p>前面的只是侦测到一个数组自身的变化，比如增加一个元素，删除一个元素等等，但是数组中保存的元素也需要侦测</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>     <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">'__ob__'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//侦测Array的每一项</span>    <span class="token function">observeArray</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token operator">=</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">observe</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="侦测新增元素的变化-这里没懂-，晕"><a href="#侦测新增元素的变化-这里没懂-，晕" class="headerlink" title="侦测新增元素的变化(这里没懂~~~，晕)"></a>侦测新增元素的变化(这里没懂~~~，晕)</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span>  <span class="token string">'push'</span><span class="token punctuation">,</span>  <span class="token string">'pop'</span><span class="token punctuation">,</span>  <span class="token string">'shift'</span><span class="token punctuation">,</span>  <span class="token string">'unshift'</span><span class="token punctuation">,</span>  <span class="token string">'splice'</span><span class="token punctuation">,</span>  <span class="token string">'sort'</span><span class="token punctuation">,</span>  <span class="token string">'reverse'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// cache original method</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> mutator <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__    <span class="token keyword">let</span> inserted    <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token punctuation">:</span>      <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// notify change</span>    ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="官网图片"><a href="#官网图片" class="headerlink" title="官网图片"></a>官网图片</h3><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="为什么引入虚拟DOM？"><a href="#为什么引入虚拟DOM？" class="headerlink" title="为什么引入虚拟DOM？"></a>为什么引入虚拟DOM？</h3><p>       在响应式系统上就说到，页面的渲染是通过我们输入状态，然后生成DOM输出到页面上显示出来的，但是程序在运行时，状态是不停在变化的，每当状态发生了变化，就需要重新渲染。最简单粗暴的就是删除所有DOM，重新生成一份，但是这样操作DOM会造成相当大的性能浪费，并且通常只需要重新渲染有限个节点，因此各个框架有不同的解决方案，Angular是脏检查，React是使用虚拟DOM，Vue.js1.0使用细粒度的绑定，Vue.js2.0使用虚拟DOM。</p><h3 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM?"></a>什么是虚拟DOM?</h3><p>        虚拟DOM是通过状态生成一个虚拟节点树，然后使用虚拟节点树和上一次渲染视图使用的旧虚拟节点树进行对比，只渲染不同的部分。</p><p><strong>使用模板来描述状态和DOM之间的映射关系</strong></p><p>Vue 会通过模板编译，将模板转换成渲染函数，通过执行这个函数就能够得到一个虚拟节点树。 每次属性发生变化，会调用组件渲染函数生成新的虚拟节点树，然后将新生成的虚拟节点树与上一次渲染视图使用的旧虚拟节点树进行<strong>对比（diff）</strong>，再把要更新的地方进行 DOM 操作<strong>（patch）</strong>。最后缓存这一次渲染视图使用的虚拟节点树的 VNode</p><p><img src="/Vue2.assets/%E8%99%9A%E6%8B%9FDOM-16489941157851.png#crop=0&crop=0&crop=1&crop=1&id=o8pcD&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="VNode"><a href="#VNode" class="headerlink" title="VNode"></a>VNode</h3><p><strong>VNode是什么？</strong></p><p>VNode 其实就是虚拟节点，在 Vue.js 中存在一个 VNode 类，可以用来实例化不同类型的 vnode 实例来表示不同类型的 DOM 节点。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">VNode</span><span class="token punctuation">{</span>     <span class="token function">constructor</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span>data<span class="token punctuation">,</span>children<span class="token punctuation">,</span>text<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">=</span>tag<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>       <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染视图的过程先创建vnode，然后再使用vnode去生成真实的DOM元素，最后插入到页面渲染视图。</p><p>VNode 的类型有以下几种：</p><p>注释节点</p><p>文本节点</p><p>元素节点</p><p>组件节点</p><p>函数式组件</p><p>克隆节点</p><p>辨别节点类型可以通过节点的属性，比如注释节点只有text和isComment两个有效属性，其余属性全都是默认undefined或者false</p><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>patch 算法又叫 patching 算法，它主要是通过对比新旧 vnode 找到需要更新的节点进行更新。</p><p><img src="/Vue2.assets/patch.png#crop=0&crop=0&crop=1&crop=1&id=VKXSK&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>patch的过程其实就是创建节点、删除节点和修改节点的过程。</p><p><strong>创建节点什么时候发生？</strong></p><ul><li>oldVnode不存在而Vnode存在时</li><li>首次渲染时</li><li>vnode和oldVnode完全不是一个节点时</li></ul><p><strong>删除节点什么时候发生？</strong></p><ul><li>一个节点只在oldVnode时</li><li>oldVnode和vnode完全不是一个节点时</li></ul><p><strong>更新节点发生在oldVnode和vnode是同一个节点</strong></p><p><strong>patch的主要是两个算法：patchVnode 和 updateChildren</strong></p><p><strong>patchVnode</strong></p><p><strong>updateChildren</strong></p><p>更新子节点，也是 diff 的核心。</p><p>主要是 4 种操作：更新节点、新增节点、删除节点、移动节点。</p><p>注意是在<strong>循环中</strong>进行比对</p><p>新增子节点</p><p>当没有在 oldChildren 中找到本次循环所指向的新子节点的节点，就新建一个节点插入到<strong>所有未处理节点的前面</strong></p><p>更新子节点。</p><p>同一个节点且同一位置</p><p>移动子节点。</p><p>同一个节点，但是位置不同，则把需要移动的节点移动到所有未处理节点的前面。</p><p>删除子节点。</p><p>本质上是删除哪些 oldChildren 存在但 newChildren 不存在的节点。</p><p><strong>补充一个流程图。。。</strong></p><h3 id="Diff算法（待补充。。。）"><a href="#Diff算法（待补充。。。）" class="headerlink" title="Diff算法（待补充。。。）"></a>Diff算法（待补充。。。）</h3><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p><strong>实例方法是在</strong><code>Vue</code><strong>的原型</strong><code>Vue.prototype</code><strong>上挂载方法</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> initMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./init'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> stateMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./state'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> renderMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./render'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> eventsMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./events'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> lifecycleMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./lifecycle'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> warn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">function</span> Vue <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Vue is a constructor and should be called with the `new` keyword'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">stateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">eventsMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">lifecycleMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">renderMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据相关的"><a href="#数据相关的" class="headerlink" title="数据相关的"></a>数据相关的</h3><p>与数据相关的实例方法主要有3个<code>vm.$watch、vm.$set、vm.$delete</code>,它们是在<code>stateMixin</code>中挂载到<code>Vue</code>原型上的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">{</span>  <span class="token keyword">set</span><span class="token punctuation">,</span>  del<span class="token punctuation">}</span><span class="token keyword">from</span> <span class="token string">'../observer/index'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">stateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token operator">=</span><span class="token keyword">set</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$<span class="token keyword">delete</span><span class="token operator">=</span>del  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">,</span>cb<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-watch"><a href="#vm-watch" class="headerlink" title="vm.$watch"></a>vm.$watch</h4><p><strong>用法：</strong>用于观察一个表达式或computed函数在Vue.js实例上的变化。回调函数调用时，会从参数得到新数据和旧数据。<br><strong>参数：</strong><code>&#123;string|Function&#125;expOrFn</code><br>           <code>&#123;Function|Object&#125;callback</code><br>           <code>&#123;Object&#125;[options] (&#123;boolean&#125;deep   &#123;boolean&#125;immediate )</code><br><strong>返回值：</strong><code>&#123;Function&#125;unwatch</code><br><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a.b.c'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> unwatch<span class="token operator">=</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//取消观察</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>callback<span class="token punctuation">,</span><span class="token punctuation">{</span>   deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//观察对象内部值的变化</span>  immediate<span class="token punctuation">:</span><span class="token boolean">true</span> <span class="token comment" spellcheck="true">//将表达式的当前值触发回调</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong><br>选项deep的原理主要是在Watcher的代码里实现，就是除了触发当前被监听的数据收集依赖之外，还要把这个值在内的所有子值都触发一遍收集依赖逻辑。immediate原理就是把回调函数触发一遍</p><pre class="line-numbers language-javascript"><code class="language-javascript"> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>    cb<span class="token punctuation">:</span> any<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> Object  <span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//immediate为true,cb立刻执行一次</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token string">`callback for immediate watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>watcher<span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span>      <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token punctuation">[</span>watcher<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//unwatch就是调用Watcher的teardown方法，将Watcher从它的Dep列表中移除</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> unwatchFn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-set"><a href="#vm-set" class="headerlink" title="vm.$set"></a>vm.$set</h4><p><strong>用法：</strong>在object上设置一个属性，如果object是响应式，Vue.js会保证属性被创建后也是响应式，并且触发视图更新。（这个方法主要是用来避开Vue.js不能侦测属性被添加的限制）<br><strong>参数：</strong><code>&#123;Object | Array&#125; target</code><br>          <code> &#123;string | number&#125; key</code><br>          <code> &#123;any&#125; value</code><br><strong>返回值：</strong><code>&#123;Function &#125;unwatch</code><br><strong>原理：</strong><br>原理主要就是分情况讨论，也没有很难懂~~</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> Object<span class="token punctuation">,</span> key<span class="token punctuation">:</span> any<span class="token punctuation">,</span> val<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> any <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Cannot set reactive property on undefined, null, or primitive value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//如果target是一个数组而且key是一个合理的索引值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果传递的索引值大于数组的length就让target的length为key</span>    target<span class="token punctuation">.</span>length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//使用splice方法把val设置到target上，这样数组拦截器会侦测到target发生了变化，会自动把新增</span>    <span class="token comment" spellcheck="true">//的val转换为响应式</span>    target<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//key已经存在于target中，直接修改就好了</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> target <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>__ob__  <span class="token comment" spellcheck="true">//target不能是Vue.js实例或Vue.js实例的根数据对象</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>_isVue <span class="token operator">||</span> <span class="token punctuation">(</span>ob <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">.</span>vmCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token string">'Avoid adding reactive properties to a Vue instance or its root $data '</span> <span class="token operator">+</span>      <span class="token string">'at runtime - declare it upfront in the data option.'</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//没有__ob__，数据不是响应式，只需直接设置即可</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//如果以上条件都不满足，说明用户是在响应式数据上新增一个属性，所以要用defineReactive将新属性</span>  <span class="token comment" spellcheck="true">//转换成getter/setter形式</span>  <span class="token function">defineReactive</span><span class="token punctuation">(</span>ob<span class="token punctuation">.</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> val<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-delete"><a href="#vm-delete" class="headerlink" title="vm.$delete"></a>vm.$delete</h4><p>用法：对象删除一个属性或者数组删除一个元素，它删除后会自动想依赖发送消息<br>原理：<br>原理主要就是分情况讨论，也没有很难懂~~</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> del <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> Object<span class="token punctuation">,</span> key<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Cannot delete reactive property on undefined, null, or primitive value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//处理数组情况，splice删除元素，数组拦截器会自动向依赖发送通知</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>__ob__  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>_isVue <span class="token operator">||</span> <span class="token punctuation">(</span>ob <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">.</span>vmCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token string">'Avoid deleting properties on a Vue instance or its root $data '</span> <span class="token operator">+</span>      <span class="token string">'- just set it to null.'</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//如果key不是target自身的属性，直接return</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">delete</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//非响应式直接返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//响应式发通知</span>  ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件相关的"><a href="#事件相关的" class="headerlink" title="事件相关的"></a>事件相关的</h3><p>目录src&#x2F;score&#x2F;instance&#x2F;events.js<br>与事件相关的实例方法主要有4个<code>vm.$on、vm.$off、vm.$once、vm.$emit</code>,它们是在<code>eventsMixin</code>中挂载到<code>Vue</code>原型上的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> eventsMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$on <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$once <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$off <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$emit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-on-event-callback"><a href="#vm-on-event-callback" class="headerlink" title="vm.$on(event,callback)"></a>vm.$on(event,callback)</h4><p>用法：主要用于监听当前实例上的自定义事件，事件可以由<code>vm.$emit</code>触发。回调函数会接收所有传入事件所触发的函数的额外参数<br>参数：<code>&#123;string|Array&lt;string&gt;&#125;event</code><br>           <code>&#123;Function&#125;callback</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'try'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//触发       </span>vm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'try'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>源码：在注册事件的时候将回调函数收集起来，在触发事件的时候将收集起来的回调函数依次调用</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$on <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> string <span class="token operator">|</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vm._events是一个对象，用来存储事件。当event不为数组时，直接通过vm._events中取出事件列表<br>vm._events在<code>new Vue()</code>的时候，调用<code>this._init</code>方法初始化创建的，用来存储事件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initEvents <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这句创建vm._events</span>  vm<span class="token punctuation">.</span>_events <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  vm<span class="token punctuation">.</span>_hasHookEvent <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// init parent attached events</span>  <span class="token keyword">const</span> listeners <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_parentListeners  <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">updateComponentListeners</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-off-event-callback"><a href="#vm-off-event-callback" class="headerlink" title="vm.$off([event,callback])"></a>vm.$off([event,callback])</h4><p>用法：移除自定义事件监听器（若无提供参数，则移除所有事件监听器；若只提供了事件，则移除该事件的监听器；若同时提供了事件和回调，则只移除这个回调的监听器）<br>参数：<code>&#123;string|Array&lt;string&gt;&#125;event</code><br>           <code>&#123;Function&#125;callback</code><br>源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$off <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> fn<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment" spellcheck="true">// all 移除所有事件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_events <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// array of events 多个事件，遍历取消监听</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// specific event 没有找到事件的监听器，直接退出</span>    <span class="token keyword">const</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//只有事件没有回调，直接置为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// specific handler 有回调则移除对应的回调函数</span>    <span class="token comment" spellcheck="true">/*     这里还有一个重要的问题是，遍历回调函数是从后向前遍历的，因为从前向后遍历的话会导致数组     向前移动，而i并没有回退，会跳过一个元素    */</span>    <span class="token keyword">let</span> cb    <span class="token keyword">let</span> i <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      cb <span class="token operator">=</span> cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">===</span> fn <span class="token operator">||</span> cb<span class="token punctuation">.</span>fn <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cbs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="vm-emit（event-…args"><a href="#vm-emit（event-…args" class="headerlink" title="vm.$emit（event,[…args])"></a>vm.$emit（event,[…args])</h4><p>用法：用于触发当前实例上的事件，附加的参数都会传给监听器回调<br>参数：<code>&#123;string&#125;event</code><br>           <code>[...args]</code><br>源码：实现原理就是从vm._events中取出事件监听器的回调函数列表赋值给cbs，若列表存在即调用每个监听器回调并将参数传给监听器回调</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//invokeWithErrorHandling(cbs[i], vm, args, vm, info)后面补充。。。。。</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$emit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> lowerCaseEvent <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerCaseEvent <span class="token operator">!==</span> event <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>lowerCaseEvent<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">tip</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Event "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lowerCaseEvent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is emitted in component `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">formatComponentName</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> but the handler is registered for "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">". `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`Note that HTML attributes are case-insensitive and you cannot use `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`v-on to listen to camelCase events when using in-DOM templates. `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`You should probably use "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">hyphenate</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" instead of "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">".`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cbs <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">toArray</span><span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">:</span> cbs      <span class="token comment" spellcheck="true">/*      toArray是将类似数组数据转换成真正数组，第二个参数是起始位置，即args是一个除了第一个      参数之外的所有参数      */</span>      <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token string">`event handler for "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> args<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-once-event-callback"><a href="#vm-once-event-callback" class="headerlink" title="vm.$once(event,callback)"></a>vm.$once(event,callback)</h4><p>用法：监听一个自定义事件，但是只触发一次，在第一次触发之后移除监听器<br>参数：<code>&#123;string|Array&lt;string&gt;&#125;event</code><br>          <code>&#123;Function&#125;callback</code><br>源码：<br>实现的过程是首先将函数on注册到事件中。当事件被触发时，会执行函数on，on函数里会使用vm.$off移除自定义事件，然后再通过apply执行函数fn，并将参数传递给函数fn</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$once <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> string<span class="token punctuation">,</span> fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">function</span> on <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    on<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn    vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有个问题是注册的函数是on函数，但是用户触发的函数是fn，在用vm.$off移除事件监听器时会失效。源码上通过<code>on.fn=fn</code>来解决，<code>vm.$off</code>源码上用 <code> if (cb === fn || cb.fn === fn) &#123;  &#125;</code>来判断</p><h3 id="生命周期相关的"><a href="#生命周期相关的" class="headerlink" title="生命周期相关的"></a>生命周期相关的</h3><p>与生命周期相关的实例方法主要有4个<code>vm.$mount、vm.$forceUpdate、vm.$nextTick、vm.$destroy</code>,<code>vm.$forceUpdate</code>和<code>vm.$destroy</code>是在<code>lifecycleMixin</code>中挂载到<code>Vue</code>原型上的，<code>vm.$nextTick</code>是在<code>renderMixin</code>中挂载到<code>Vue</code>原型上的，<code>vm.$mount</code>是在跨平台的代码中挂载到<code>Vue</code>原型上的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 目录 src/score/instance/lifecycle.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> lifecycleMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$forceUpdate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token punctuation">}</span>     Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$destroy <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 目录 src/score/instance/render.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> renderMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$nextTick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行时版(以web平台为例) src/platforms/web/runtime/index.js</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//完整版(以web平台为例) src/platforms/web/entry-runtime-with-compiler.js</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h4 id="vm-forceUpdate"><a href="#vm-forceUpdate" class="headerlink" title="vm.forceUpdate()"></a>vm.forceUpdate()</h4><p>作用：迫使Vue.js实例重新渲染（注意它仅仅影响实例本身以及插入插槽内容的子组件，而不是所有子组件）<br>源码：实现该功能只需手动执行一下当前实例watcher的update()方法。因为Vue.js的每一个实例都有一个watcher（Vue.js的一个实例其实就相当于一个组件，而当状态发生变化的时候，会通知到组件级别，然后在组件内部使用虚拟DOM进行重新渲染）</p><pre class="line-numbers language-javascript"><code class="language-javascript">  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$forceUpdate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-destroy"><a href="#vm-destroy" class="headerlink" title="vm.destroy"></a>vm.destroy</h4><p>作用：完全销毁一个实例，它会清理改实例与其他实例的连接，并解绑其全部指令及生命周期，同时会触发beforeDestory和destroyed的钩子函数<br>源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$destroy <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>   <span class="token comment" spellcheck="true">//判断实例是否正在销毁，因为销毁只能销毁一次，不能反复</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isBeingDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeDestroy'</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">=</span> <span class="token boolean">true</span>   <span class="token comment" spellcheck="true">/*     为什么只从一个父组件中移除？     因为虽然一个组件可以被多个父组件引入，当时其实子组件在不同的父组件中是不同的Vue.js实例，     所以一个子组件实例其实只有一个父组件   */</span>    <span class="token comment" spellcheck="true">// remove self from parent  清除当前组件和父组件之间的连接</span>    <span class="token keyword">const</span> parent <span class="token operator">=</span> vm<span class="token punctuation">.</span>$parent    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>parent<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>abstract<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">remove</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>$children<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// teardown watchers </span>    <span class="token comment" spellcheck="true">/*      从watcher监听的所有状态的依赖列表中移除watcher      vm._watcher是在执行new Vue()初始化时创建的，它是监听当前组件用到的所有状态，即这个组      件内用到的所有状态的依赖列表。当这些状态发生变化时，就会通知vm._watcher,再调用虚拟DOM      进行重新渲染    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这里销毁的是用户使用vm.$watch所创建的watcher实例</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//这里要研究一下。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</span>    <span class="token comment" spellcheck="true">// remove reference from data ob</span>    <span class="token comment" spellcheck="true">// frozen object may not have observer.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>__ob__<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span>vmCount<span class="token operator">--</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// call the last hook...</span>    vm<span class="token punctuation">.</span>_isDestroyed <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// invoke destroy hooks on current rendered tree</span>    vm<span class="token punctuation">.</span><span class="token function">__patch__</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// fire destroyed hook</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'destroyed'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// turn off all instance listeners.移除事件监听器</span>    vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// remove __vue__ reference</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>__vue__ <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// release circular reference (#6759)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*每创建一个watcher实例时，都会将watcher实例添加到vm._watchers中，vm._watchers是在new Vue()初始化时创建的,所以每当用户使用vm.$watch时，就会向vm._watchers添加一个watcher实例。所以现在只需遍历vm._watchers，执行每一个watch实例的teardown方法即可*/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span>expOrFn<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">{</span>       vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>       <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-mount"><a href="#vm-mount" class="headerlink" title="vm.$mount"></a>vm.$mount</h4><p><strong>用法</strong>：如果Vue.js实例在实例化的时候没有收到el选项，则它处于“未挂载”状态，没有关联的DOM元素。可以使用vm.$mount手动挂载一个未挂载的实例。<br><strong>参数</strong>：<code>&#123;Element|string&#125;[elementOrSelector]</code><br><strong>返回值</strong>：vm，即实例本身<br><strong>示例</strong>：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> MyComponent<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span><span class="token string">'&lt;div>hello&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建并挂载到#app</span><span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建并挂载到#app</span><span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//没有传入参数，模板会被渲染为文档之外的元素，可以使用DOM的API把它插入文档中</span><span class="token keyword">var</span> mycomponent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>源码</strong>：<br>完整版（Vue.js)和运行时版(Vue.runtime.js）的差异是是否有编译器，而是否有编译器的差异主要就在vm.$mount方法的表现形式。</p><p><strong>完整版</strong><br>在完整版中，vm.$mount会首先检查template或el选项所提供的模板是否已经转换为渲染函数（render函数），如果没有，则立即进入编译过程，将模板编译成渲染函数，完成后再进入挂载与渲染的流程中</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*这种先保存Vue原型的prototype方法，然后用一个新的方法覆盖，在新方法中调用原始方法的做法叫函数劫持*/</span><span class="token keyword">const</span> mount <span class="token operator">=</span> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mountVue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>   el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> mount<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取DOM元素</span><span class="token keyword">export</span> <span class="token keyword">function</span> query <span class="token punctuation">(</span>el<span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">)</span><span class="token punctuation">:</span> Element <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> el <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> selected <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token string">'Cannot find element: '</span> <span class="token operator">+</span> el      <span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//获取不到，则创建一个空元素</span>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> selected  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果不是字符串，则认为el是元素类型，直接返回</span>    <span class="token keyword">return</span> el  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Get outerHTML of elements, taking care * of SVG elements in IE as well. */</span><span class="token keyword">function</span> getOuterHTML <span class="token punctuation">(</span>el<span class="token punctuation">:</span> Element<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>outerHTML<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> el<span class="token punctuation">.</span>outerHTML  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> container<span class="token punctuation">.</span>innerHTML  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//主要代码</span><span class="token keyword">function</span> compileToFunctions <span class="token punctuation">(</span>    template<span class="token punctuation">:</span> string<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">,</span>    vm<span class="token operator">?</span><span class="token punctuation">:</span> Component  <span class="token punctuation">)</span><span class="token punctuation">:</span> CompiledFunctionResult <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将options属性混合到空对象中，目的是让options成为可选参数</span>    options <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// check cache 检查缓存，若已经编译则直接返回</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> options<span class="token punctuation">.</span>delimiters      <span class="token operator">?</span> <span class="token function">String</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">)</span> <span class="token operator">+</span> template      <span class="token punctuation">:</span> template    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// compile  将template编译成代码字符串并储存在compiled的render属性中</span>    <span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// turn code into functions 将代码字符串转换为函数</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    res<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token function">createFunction</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>render<span class="token punctuation">,</span> fnGenErrors<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mount <span class="token operator">=</span> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mountVue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>  el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">===</span> document<span class="token punctuation">.</span>body <span class="token operator">||</span> el <span class="token operator">===</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token string">`Do not mount Vue to &lt;html> or &lt;body> - mount to normal elements instead.`</span></span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//options是初始化时创建的，它可以访问到实例化Vue.js时，用户设置的一些参数，例如template和render</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options  <span class="token comment" spellcheck="true">//如果没有render选项，需要获取模板并将模板编译成render函数赋值给render选项</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> template <span class="token operator">=</span> options<span class="token punctuation">.</span>template    <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//template选项可以是字符串模板、#开头的选项符、DOM元素</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> template <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//如果是#开头的选项符，则调用共idToTemplate获取模板</span>          template <span class="token operator">=</span> <span class="token function">idToTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">warn</span><span class="token punctuation">(</span>              <span class="token template-string"><span class="token string">`Template element not found or is empty: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>options<span class="token punctuation">.</span>template<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>              <span class="token keyword">this</span>            <span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        template <span class="token operator">=</span> template<span class="token punctuation">.</span>innerHTML      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'invalid template option:'</span> <span class="token operator">+</span> template<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果没有template选项，则使用getOuterHTML方法从用户提供的el选项中获取模板</span>      template <span class="token operator">=</span> <span class="token function">getOuterHTML</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">'compile'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//compileToFunctions可以将模板编译成渲染函数并设置在this.$options上</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> staticRenderFns <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">compileToFunctions</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>        outputSourceRange<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">,</span>        shouldDecodeNewlines<span class="token punctuation">,</span>        shouldDecodeNewlinesForHref<span class="token punctuation">,</span>        delimiters<span class="token punctuation">:</span> options<span class="token punctuation">.</span>delimiters<span class="token punctuation">,</span>        comments<span class="token punctuation">:</span> options<span class="token punctuation">.</span>comments      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>      options<span class="token punctuation">.</span>render <span class="token operator">=</span> render      options<span class="token punctuation">.</span>staticRenderFns <span class="token operator">=</span> staticRenderFns      <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">'compile end'</span><span class="token punctuation">)</span>        <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> compile`</span></span><span class="token punctuation">,</span> <span class="token string">'compile'</span><span class="token punctuation">,</span> <span class="token string">'compile end'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> mount<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行时版</strong><br>运行时版的vm.$mount没有编译步骤，它会默认实例上已存在渲染函数，如果不存在会设置一个。并且这个渲染函数在执行时会返会一个空节点VNode,以保证执行时不会因为函数不存在而报错</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>  el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> inBrowser <span class="token operator">?</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined  <span class="token keyword">return</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将Vue.js实例挂载到DOM元素上，当数据(状态)发生变化时依然可以渲染到指定DOM元素中</span><span class="token keyword">export</span> <span class="token keyword">function</span> mountComponent <span class="token punctuation">(</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>  el<span class="token punctuation">:</span> <span class="token operator">?</span>Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> el  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//实例不存在渲染函数，设置默认渲染函数createEmptyVNode,该函数执行后会返回一个注释类型的VNode节点</span>     vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>render <span class="token operator">=</span> createEmptyVNode    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//开发环境下发出警告</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//触发生命周期钩子</span>  <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeMount'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> updateComponent  <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>    updateComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> name <span class="token operator">=</span> vm<span class="token punctuation">.</span>_name      <span class="token keyword">const</span> id <span class="token operator">=</span> vm<span class="token punctuation">.</span>_uid      <span class="token keyword">const</span> startTag <span class="token operator">=</span> <span class="token template-string"><span class="token string">`vue-perf-start:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      <span class="token keyword">const</span> endTag <span class="token operator">=</span> <span class="token template-string"><span class="token string">`vue-perf-end:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      <span class="token function">mark</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span>      <span class="token keyword">const</span> vnode <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">mark</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>      <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> render`</span></span><span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">)</span>      <span class="token function">mark</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span>      vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span>      <span class="token function">mark</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>      <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> patch`</span></span><span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    updateComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*       vm._render 执行渲染函数，得到一份最新的VNode节点树       vm._update 调用虚拟DOM的patch方法来执行节点的对比与渲染操作       这一句其实就是一次渲染操作      */</span>      vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*    在介绍Watcher那一节中，如果Watcher的第二个参数是一个函数，则会同时观察函数中所读取的Vue.js    实例上的实例数据      */</span>  <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">{</span>    before <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>_isDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* isRenderWatcher */</span><span class="token punctuation">)</span>  hydrating <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// manually mounted instance, call mounted on self</span>  <span class="token comment" spellcheck="true">// mounted is called for render-created child components in its inserted hook</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'mounted'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> vm<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-nextTick"><a href="#vm-nextTick" class="headerlink" title="vm.$nextTick"></a>vm.$nextTick</h4><p><strong>前置：</strong>在 Vue 之中，当状态发生变化，会通知依赖这个状态的所有 watcher，然后触发虚拟 DOM 渲染流程。在 watcher 触发渲染这个操作并不是同步的，它是异步的。Vue 在内部有一个队列，每当需要渲染时，就将要渲染的 watcher 推送到这个队列，下一次事件循环再统一清空队列。<br><strong>用法：</strong>将回调延迟到下次DOM更新周期之后执行。（主要就是开发中有一种场景，就是更新了数据之后，需要对新的DOM做一些操作，但是这时获取不到更新后的DOM)</p><p>注意，这个DOM更新周期之后的意思是指下次微任务执行时更新DOM，vm.$nextTick其实就是将回调添加到微任务中(只有在特殊情况下才会降级成宏任务，默认是添加到微任务），所以如果使用vm.$nextTick来获取更新后的DOM，要注意顺序问题，无论是DOM更新后的回调还是是用vm.$nextTick注册的回调，都是向微任务中添加任务，所以是先来先服务。</p><blockquote><p>事实上，更新DOM的回调也是使用vm.$nextTick来注册到微任务里的</p></blockquote><p><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token operator">...</span>   methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    example<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//修改数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'change'</span>      <span class="token comment" spellcheck="true">//DOM还没有更新，要在更改数据后才能使用vm.$nextTick注册回调</span>      <span class="token comment" spellcheck="true">//如果是先使用vm.$nextTick注册回调，再修改数据，是获取不到最新的DOM的</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//DOM更新了</span>        <span class="token comment" spellcheck="true">//this绑定到当前实例</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//宏任务执行比微任务晚，所以setTimeout里可以获取到最新的DOM</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token operator">...</span>   methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    example<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//使用setTimeout向宏任务注册回调</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//DOM更新了</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//修改数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'change'</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong><br>当调用nextTick时，回调函数被添加到callbacks,然后判断任务队列中是否已经添加任务，没添加就需要执行timerFunc向任务队列里添加任务，如果已经添加就无需再添加，无需添加重复任务（被添加到任务队列的任务只需执行一次），然后当任务被执行时，就会依次执行callbacks中的所有回调</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//isUsingMicroTask来判断是否使用微任务方法</span><span class="token keyword">export</span> <span class="token keyword">let</span> isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">//callbacks存储用户注册的回调</span><span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//pending来保证每次只向任务队列添加一个任务</span><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">//清空callbacks</span><span class="token keyword">function</span> flushCallbacks <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  pending <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">const</span> copies <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  callbacks<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> copies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//异步执行函数</span><span class="token keyword">let</span> timerFunc <span class="token comment" spellcheck="true">/*    有Promise、MutationObserver以及setImmediate、setTimeout尝试得到timerFunc的方法，    优先使用Promise，在Promise不存在的情况下使用MutationObserver，这两个方法都会在    microtask中执行，会比宏任务更早执行，所以优先使用。如果上述两种方法都不支持的环境    则会使用setImmediate、setTimeout，这两种属于宏任务，比微任务慢执行  */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIOS<span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isIE <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> MutationObserver <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>  <span class="token function">isNative</span><span class="token punctuation">(</span>MutationObserver<span class="token punctuation">)</span> <span class="token operator">||</span>  MutationObserver<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object MutationObserverConstructor]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>  observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token punctuation">{</span>    characterData<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    counter <span class="token operator">=</span> <span class="token punctuation">(</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>    textNode<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>setImmediate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setImmediate</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Fallback to setTimeout.</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ctx是上下文</span><span class="token keyword">export</span> <span class="token keyword">function</span> nextTick <span class="token punctuation">(</span>cb<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> ctx<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> _resolve  <span class="token comment" spellcheck="true">//cb回调函数push进callbacks函数</span>  callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token string">'nextTick'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">_resolve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//pending为false,说明本轮事件循环还没执行过timerFunc()</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">timerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// $flow-disable-line 没传入回调函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      _resolve <span class="token operator">=</span> resolve    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h2><p><strong>全局API是直接在</strong><code>Vue</code><strong>上挂载方法</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"> Vue<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>extendOptions<span class="token punctuation">:</span> Object<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>   <span class="token operator">...</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="Vue-extend（options"><a href="#Vue-extend（options" class="headerlink" title="Vue.extend（options)"></a>Vue.extend（options)</h3><p>用法：使用基础Vue构建一个“子类”，参数是一个包含组件选项”的对象<br>参数：<code>&#123;Object&#125;options</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//创建构造器</span><span class="token keyword">var</span> Profile<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     template<span class="token punctuation">:</span><span class="token string">'&lt;p>{{firstName}}-{{lastName}}&lt;/p>'</span><span class="token punctuation">,</span>     data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>           firstName<span class="token punctuation">:</span><span class="token string">'chen'</span><span class="token punctuation">,</span>           lastName<span class="token punctuation">:</span><span class="token string">'yiwei'</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建Profile实例，并挂载在一个元素上</span><span class="token keyword">new</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果</span><span class="token operator">&lt;</span>p<span class="token operator">></span>chen<span class="token operator">--</span>yiwei<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现原理：<br>其实原理并不复杂，就是创建一个Sub函数继承父类，利用了父类的cid缓存子类，依次继承父类的原型、父类的option选项，若有props或者computed就将它们初始化</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">export</span> <span class="token keyword">function</span> initExtend <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**   * Each instance constructor, including Vue, has a unique   * cid. This enables us to create wrapped "child   * constructors" for prototypal inheritance and cache them.   */</span>  Vue<span class="token punctuation">.</span>cid <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> cid <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">/**   * Class inheritance   */</span>  Vue<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>extendOptions<span class="token punctuation">:</span> Object<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>    extendOptions <span class="token operator">=</span> extendOptions <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> Super <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">const</span> SuperId <span class="token operator">=</span> Super<span class="token punctuation">.</span>cid    <span class="token keyword">const</span> cachedCtors <span class="token operator">=</span> extendOptions<span class="token punctuation">.</span>_Ctor <span class="token operator">||</span> <span class="token punctuation">(</span>extendOptions<span class="token punctuation">.</span>_Ctor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果已经缓存过了，就直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedCtors<span class="token punctuation">[</span>SuperId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> cachedCtors<span class="token punctuation">[</span>SuperId<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> extendOptions<span class="token punctuation">.</span>name <span class="token operator">||</span> Super<span class="token punctuation">.</span>options<span class="token punctuation">.</span>name    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">validateComponentName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> Sub <span class="token operator">=</span> <span class="token keyword">function</span> VueComponent <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//到时回过头看看 这一句，this._init是new Vue()的时候初始化用的</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这三句是实现子类继承父类的原型</span>    Sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Super<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>    Sub<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub    Sub<span class="token punctuation">.</span>cid <span class="token operator">=</span> cid<span class="token operator">++</span>           <span class="token comment" spellcheck="true">/*     * 这两句是实现父类的options选项继承到子类中     * mergeOptions方法是将两个选项合成一个     */</span>    Sub<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>      Super<span class="token punctuation">.</span>options<span class="token punctuation">,</span>      extendOptions    <span class="token punctuation">)</span>    Sub<span class="token punctuation">[</span><span class="token string">'super'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Super    <span class="token comment" spellcheck="true">// For props and computed properties, we define the proxy getters on</span>    <span class="token comment" spellcheck="true">// the Vue instances at extension time, on the extended prototype. This</span>    <span class="token comment" spellcheck="true">// avoids Object.defineProperty calls for each instance created.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Sub<span class="token punctuation">.</span>options<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">initProps</span><span class="token punctuation">(</span>Sub<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Sub<span class="token punctuation">.</span>options<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">initComputed</span><span class="token punctuation">(</span>Sub<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// allow further extension/mixin/plugin usage</span>    Sub<span class="token punctuation">.</span>extend <span class="token operator">=</span> Super<span class="token punctuation">.</span>extend    Sub<span class="token punctuation">.</span>mixin <span class="token operator">=</span> Super<span class="token punctuation">.</span>mixin    Sub<span class="token punctuation">.</span>use <span class="token operator">=</span> Super<span class="token punctuation">.</span>use    <span class="token comment" spellcheck="true">// create asset registers, so extended classes</span>    <span class="token comment" spellcheck="true">// can have their private assets too.</span>    ASSET_TYPES<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Sub<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> Super<span class="token punctuation">[</span>type<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// enable recursive self-lookup</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Sub<span class="token punctuation">.</span>options<span class="token punctuation">.</span>components<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> Sub    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// keep a reference to the super options at extension time.</span>    <span class="token comment" spellcheck="true">// later at instantiation we can check if Super's options have</span>    <span class="token comment" spellcheck="true">// been updated.</span>    Sub<span class="token punctuation">.</span>superOptions <span class="token operator">=</span> Super<span class="token punctuation">.</span>options    Sub<span class="token punctuation">.</span>extendOptions <span class="token operator">=</span> extendOptions    Sub<span class="token punctuation">.</span>sealedOptions <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Sub<span class="token punctuation">.</span>options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// cache constructor 缓存Sub，因为反复调用Vue.extend应该返回同一个结果</span>    cachedCtors<span class="token punctuation">[</span>SuperId<span class="token punctuation">]</span> <span class="token operator">=</span> Sub    <span class="token keyword">return</span> Sub  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//初始化props的作用是将key代理到_props</span><span class="token comment" spellcheck="true">//比如vm.name实际上访问的是Sub.prototype._props.name</span><span class="token keyword">function</span> initProps <span class="token punctuation">(</span>Comp<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> Comp<span class="token punctuation">.</span>options<span class="token punctuation">.</span>props  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">proxy</span><span class="token punctuation">(</span>Comp<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`_props`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> proxy <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> sourceKey<span class="token punctuation">:</span> string<span class="token punctuation">,</span> key<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> proxyGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> proxySetter <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> sharedPropertyDefinition<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化computed就是遍历computed对象，将对象里每一项都定义一遍</span><span class="token keyword">function</span> initComputed <span class="token punctuation">(</span>Comp<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> computed <span class="token operator">=</span> Comp<span class="token punctuation">.</span>options<span class="token punctuation">.</span>computed  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">defineComputed</span><span class="token punctuation">(</span>Comp<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">,</span> computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>这个 defineComputed后面补充。。。。。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h3 id="Vue-nextTick（-callback-context"><a href="#Vue-nextTick（-callback-context" class="headerlink" title="Vue.nextTick（[callback,context])"></a>Vue.nextTick（[callback,context])</h3><p>用法：在下次<code>DOM</code>更新循环结束之后执行延迟回调，修改数据之后立即使用这个方法获取更新后的<code>DOM</code><br>参数：<code>&#123;Function&#125;[callback]</code><br>          <code> &#123;Object&#125;[context]</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//修改数据</span>vm<span class="token punctuation">.</span>msg<span class="token operator">=</span><span class="token string">'hello'</span><span class="token comment" spellcheck="true">//DOM还没有更新</span>Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//DOM更新后的操作~~</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//也可以作为一个Promise使用</span>Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//DOM更新后的操作~~   })</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理：<code>Vue.nextTick</code>实现原理和<code>vm.$nextTick</code>是一样的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>nextTick<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span>Vue<span class="token punctuation">.</span>nextTick<span class="token operator">=</span>nextTick<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><h3 id="Vue-set-target-key-value"><a href="#Vue-set-target-key-value" class="headerlink" title="Vue.set(target,key,value)"></a>Vue.set(target,key,value)</h3><p>用法：设置对象属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开Vue不能检测到属性被添加的限制（注意这个对象不能是Vue.js实例或者Vue.js实例的根数据对象？？？？？）<br>参数：<code>&#123;Object|Array&#125;target</code><br>           <code>&#123;string|number&#125;key</code><br>           <code>&#123;any&#125;value</code><br>返回值：设置的值<br>原理：和vm.delete的实现原理相同</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">set</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../observer/index'</span>Vue<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><h3 id="Vue-delete-target-key"><a href="#Vue-delete-target-key" class="headerlink" title="Vue.delete(target,key)"></a>Vue.delete(target,key)</h3><p>用法：删除对象属性。如果对象是响应式的，确保属性被删除后能触发视图更新。这个方法主要用于避开Vue不能检测到属性被删除的限制</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../observer/index'</span>Vue<span class="token punctuation">.</span><span class="token keyword">delete</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><h3 id="Vue-directive-x2F-filter-x2F-component-id-definition"><a href="#Vue-directive-x2F-filter-x2F-component-id-definition" class="headerlink" title="Vue.directive&#x2F;filter&#x2F;component(id,[definition])"></a>Vue.directive&#x2F;filter&#x2F;component(id,[definition])</h3><p>用法：注册或获取全局指令、全局过滤器、全局组件（注册组件时，还会自动使用给定的id设置组件的名称），注意比如全局指令，这里只是注册或者获取全局指令，并不是让其生效，其他两个API也是同样的道理。<br>参数：<code>&#123;string&#125;id</code><br>          <code>&#123;Function|Object&#125;[definition]</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Vue.directive</span><span class="token comment" spellcheck="true">//注册指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  bind<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  inserted<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  componentUpdated<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  unbind<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注册指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里的内容会被bind和update调用</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//getter方法，返回已注册的指令</span><span class="token keyword">var</span> myDirective<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Vue.filter</span><span class="token comment" spellcheck="true">//注册</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'my-filter'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//返回处理后的值  })</span><span class="token comment" spellcheck="true">//getter方法，返回已注册的过滤器</span><span class="token keyword">var</span> myFilter<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'my-filter'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//过滤器可以用在双括号插值和v-bind表达式</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token operator">|</span>capitalize<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token punctuation">:</span>id<span class="token operator">=</span><span class="token string">"rawId|formatId"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token comment" spellcheck="true">//Vue.component</span>  <span class="token comment" spellcheck="true">//注册组件，传入一个扩展过的构造器</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//注册组件，传入一个选项对象(自动调用Vue.extend)</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取注册组件(返回构造器)</span>  <span class="token keyword">var</span> myComponent<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理：<br><code>Vue.directive、Vue.filter、Vue.component</code>的源码</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  shared/constants.js </span><span class="token keyword">export</span> <span class="token keyword">const</span> ASSET_TYPES <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'component'</span><span class="token punctuation">,</span>  <span class="token string">'directive'</span><span class="token punctuation">,</span>  <span class="token string">'filter'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// src/core/global-api/index.js</span>Vue<span class="token punctuation">.</span>options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> ASSET_TYPES<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span>options<span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">'s'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>options<span class="token punctuation">.</span>_base <span class="token operator">=</span> Vue<span class="token function">initAssetRegisters</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// src/core/global-api/assets.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> initAssetRegisters <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * Create asset registration methods.   */</span>  ASSET_TYPES<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>      id<span class="token punctuation">:</span> string<span class="token punctuation">,</span>      definition<span class="token punctuation">:</span> Function <span class="token operator">|</span> Object    <span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token operator">|</span> Object <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//definition参数不存在，是注册操作</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">'component'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">validateComponentName</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果是Object类型，就调用Vue.extend变成Vue的子类</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'component'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          definition<span class="token punctuation">.</span>name <span class="token operator">=</span> definition<span class="token punctuation">.</span>name <span class="token operator">||</span> id          definition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>_base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'directive'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> definition <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          definition <span class="token operator">=</span> <span class="token punctuation">{</span> bind<span class="token punctuation">:</span> definition<span class="token punctuation">,</span> update<span class="token punctuation">:</span> definition <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> definition        <span class="token keyword">return</span> definition      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue-use-plugin"><a href="#Vue-use-plugin" class="headerlink" title="Vue.use(plugin)"></a>Vue.use(plugin)</h3><p>用法：安装Vue.js插件。<br>参数：<code>&#123;Object|Function&#125;plugin</code><br>原理：<br>如果插件是一个对象则必须提供install方法，如果插件是一个函数，它会被作为install方法。调用install方法时，会将Vue作为参数传入，install方法被同一个插件多次使用，插件也只会安装一次。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> toArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">export</span> <span class="token keyword">function</span> initUse <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>use <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">:</span> Function <span class="token operator">|</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> installedPlugins <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//不重复安装插件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedPlugins<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// toArray方法就是将类数组转成真正的数组,并且得到除了第一个参数外的其他参数</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//把Vue作为args第一个参数</span>    args<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin<span class="token punctuation">.</span>install <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      plugin<span class="token punctuation">.</span>install<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      plugin<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    installedPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-7"><a href="#-7" class="headerlink" title=""></a></h3><h3 id="Vue-mixin-mixin"><a href="#Vue-mixin-mixin" class="headerlink" title="Vue.mixin(mixin)"></a>Vue.mixin(mixin)</h3><p>用法：全局注册一个混入，影响注册之后创建的每个Vue.js实例。插件作者可以使用混入向组件注入自定义行为。（不推荐在应用代码中使用）<br>参数：<code>&#123;Object&#125;mixin</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   created<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> myOption<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>$option<span class="token punctuation">.</span>myOption<span class="token punctuation">,</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>myOption<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myOption<span class="token punctuation">)</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   myOption<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理：<br>实现原理只是将<code>mixin</code>与<code>Vue</code>自身的<code>options</code>属性合并在一起了</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mergeOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">export</span> <span class="token keyword">function</span> initMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>mixin <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>mixin<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> mixin<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue-compile"><a href="#Vue-compile" class="headerlink" title="Vue.compile"></a>Vue.compile</h3><p>作用：编译模板字符串并返回包含渲染函数的对象。(只在完整版中才有效，只有完整版才包含编译器）<br>参数：{string}template<br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> res<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;div>&lt;span>{{msg}}&lt;/span>&lt;/div>'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">'hello'</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span>res<span class="token punctuation">.</span>render<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>compile<span class="token operator">=</span>compileToFunctions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Vue-version"><a href="#Vue-version" class="headerlink" title="Vue.version"></a>Vue.version</h3><p>作用：提供字符串形式的Vue.js安装版本号。<br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> version<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>version<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//2.x.x版本</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//1.x.x版本</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//不支持的Vue.js版本</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="-8"><a href="#-8" class="headerlink" title=""></a></h2><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="生命周期4个阶段"><a href="#生命周期4个阶段" class="headerlink" title="生命周期4个阶段"></a>生命周期4个阶段</h3><p>Vue2官方文档上的图</p><p>分成4个阶段：初始化阶段、模板编译阶段、挂载阶段、卸载阶段<br><strong>初始化阶段：</strong><br>从new Vue()到created之间的阶段，此阶段主要是在Vue.js实例上初始化一些属性、事件以及响应数据，例如props、methods、data、computed、watch、provide和inject等等。</p><p><strong>模板编译阶段：</strong><br>在created钩子函数到beforeMount钩子函数之间的阶段是模板编译阶段，此阶段主要目的是将模板编译为渲染函数，只存在于完整版中。（原因在于vm.$mount运行时版的实现已经默认存在渲染函数）</p><p><strong>挂载阶段:</strong><br>beforeMount钩子函数到mounted钩子函数之间是挂载阶段，此阶段Vue.js会将其实例挂载到DOM元素上，即将模板渲染到指定的DOM元素中。而且在挂载的过程中，开启Watcher来持续追踪依赖的变化。(在vm.$mount源码分析那里有提到）</p><p><strong>卸载阶段：</strong><br>调用vm.$destroy方法后，Vue.js的生命周期进入卸载阶段</p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><h4 id="new-Vue"><a href="#new-Vue" class="headerlink" title="new Vue()"></a>new Vue()</h4><p>new Vue( )被调用时，首先会进行一些初始化操作，然后进入模板编译阶段，最后进入挂载阶段</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//目录 src/core/instance/index.js</span><span class="token keyword">function</span> Vue <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Vue is a constructor and should be called with the `new` keyword'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="init方法"><a href="#init方法" class="headerlink" title="_init方法"></a>_init方法</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//目录 src/core/instance/init.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> initMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//挂载到Vue.prototype上</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// merge options  </span>    <span class="token comment" spellcheck="true">/*    将当前用户传递的options选项与当前构造函数的options选项及其父级实例构造函数的options属性，    合成一个新的options并赋值给$options属性    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>_isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// optimize internal component instantiation</span>      <span class="token comment" spellcheck="true">// since dynamic options merging is pretty slow, and none of the</span>      <span class="token comment" spellcheck="true">// internal component options needs special treatment.</span>      <span class="token function">initInternalComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">/*        resolveConstructorOptions        获取当前实例中构造函数的options选项及其所有父级的构造函数的options,有父级时因为当前实例        可能是一个子组件        */</span>        <span class="token function">resolveConstructorOptions</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">,</span>        options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        vm      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// expose real self</span>    vm<span class="token punctuation">.</span>_self <span class="token operator">=</span> vm    <span class="token function">initLifecycle</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token function">initEvents</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token function">initRender</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeCreate'</span><span class="token punctuation">)</span>    <span class="token function">initInjections</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// resolve injections before data/props</span>    <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token function">initProvide</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// resolve provide after data/props</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="initLifecycle"><a href="#initLifecycle" class="headerlink" title="initLifecycle"></a>initLifecycle</h4><p>初始化实例属性需要初始化内部使用属性（vm._watcher等，以 _开头的），也初始化供外部使用的属性（vm.$parent等，以$开头的）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initLifecycle <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options  <span class="token comment" spellcheck="true">// locate first non-abstract parent </span>  <span class="token comment" spellcheck="true">/*  vm.$parent 需要找到第一个非抽象类型的父级，如果当前组件不是抽象组件而且存在父级，就通过while  自底向上循环，直到找到第一个非抽象类的父级  */</span>  <span class="token keyword">let</span> parent <span class="token operator">=</span> options<span class="token punctuation">.</span>parent  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>abstract<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>abstract <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>$parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent    <span class="token punctuation">}</span>    parent<span class="token punctuation">.</span>$children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  vm<span class="token punctuation">.</span>$parent <span class="token operator">=</span> parent  <span class="token comment" spellcheck="true">//vm.$root 是自顶向下将根组件的$root依次传递给每一个子组件</span>  vm<span class="token punctuation">.</span>$root <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>$root <span class="token punctuation">:</span> vm  <span class="token comment" spellcheck="true">//vm.$children是子组件主动添加到父组件中的，如第14行</span>  vm<span class="token punctuation">.</span>$children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  vm<span class="token punctuation">.</span>$refs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  vm<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> <span class="token keyword">null</span>  vm<span class="token punctuation">.</span>_inactive <span class="token operator">=</span> <span class="token keyword">null</span>  vm<span class="token punctuation">.</span>_directInactive <span class="token operator">=</span> <span class="token boolean">false</span>  vm<span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">false</span>  vm<span class="token punctuation">.</span>_isDestroyed <span class="token operator">=</span> <span class="token boolean">false</span>  vm<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="-9"><a href="#-9" class="headerlink" title=""></a></h4><h4 id="initEvents"><a href="#initEvents" class="headerlink" title="initEvents"></a>initEvents</h4><h4 id="-10"><a href="#-10" class="headerlink" title=""></a></h4><h4 id="-11"><a href="#-11" class="headerlink" title=""></a></h4><h4 id="-12"><a href="#-12" class="headerlink" title=""></a></h4><h4 id="-13"><a href="#-13" class="headerlink" title=""></a></h4><h4 id="-14"><a href="#-14" class="headerlink" title=""></a></h4><h4 id="initInjections-x2F-initProvide"><a href="#initInjections-x2F-initProvide" class="headerlink" title="initInjections&#x2F;initProvide"></a>initInjections&#x2F;initProvide</h4><p><strong>用法：</strong>inject和provide选项需要一起使用，它们允许祖先组件向其所有子孙后代注入依赖，并在其上下游关系成立的时间里始终生效。<br><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//provide选项应该是一个对象或返回一个对象的函数。该对象包含可注入器子孙的属性</span><span class="token comment" spellcheck="true">//inject选项应该是一个字符串数组或对象，对象的key是本地绑定名，value是一个key或对象，用来在可用的注入内容中搜索</span><span class="token comment" spellcheck="true">//示例一</span><span class="token keyword">var</span> Provider<span class="token operator">=</span><span class="token punctuation">{</span>  provide<span class="token punctuation">:</span><span class="token punctuation">{</span>    foo<span class="token punctuation">:</span><span class="token string">'bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> Child<span class="token operator">=</span><span class="token punctuation">{</span>  inject<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//"bar"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//示例二 可以使用ES2015 Symbol作为key，但是这只在原生支持Symbol和Reflect.ownKeys的环境下可工作</span><span class="token keyword">const</span> s<span class="token operator">=</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> Provider<span class="token operator">=</span><span class="token punctuation">{</span>   <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>     <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'foo'</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> Child<span class="token operator">=</span><span class="token punctuation">{</span>   inject<span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//示例三 可以在data/props中访问注入的值</span><span class="token keyword">const</span> Child<span class="token operator">=</span><span class="token punctuation">{</span>   inject<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   props<span class="token punctuation">:</span><span class="token punctuation">{</span>     bar<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//default 默认值</span><span class="token keyword">const</span> Child<span class="token operator">=</span><span class="token punctuation">{</span>     inject<span class="token punctuation">:</span><span class="token punctuation">{</span>      foo<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'foo'</span> <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  从_init代码可以看出initInjections是data/props之前初始化，initProvide是在data/props之后初始  化，这样做的目的是让用户可以在data/props中使用inject所注入的内容*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong><br><strong>provide</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initProvide <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> provide <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>provide  <span class="token keyword">if</span> <span class="token punctuation">(</span>provide<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内容注入到_provided属性中，如果是函数则执行函数，否则直接赋值</span>    vm<span class="token punctuation">.</span>_provided <span class="token operator">=</span> <span class="token keyword">typeof</span> provide <span class="token operator">===</span> <span class="token string">'function'</span>      <span class="token operator">?</span> provide<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>      <span class="token punctuation">:</span> provide  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>inject</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initInjections <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//resolveInject是通过用户配置的inject,自底向上搜索可用的的注入内容，并将搜索结果返回</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">resolveInject</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>inject<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通知defineReactive函数不要将内容转换成响应式</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* istanbul ignore else */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">defineReactive</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token template-string"><span class="token string">`Avoid mutating an injected value directly since the changes will be `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`overwritten whenever the provided component re-renders. `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`injection being mutated: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">,</span>            vm          <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">defineReactive</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> resolveInject <span class="token punctuation">(</span>inject<span class="token punctuation">:</span> any<span class="token punctuation">,</span> vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>inject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// inject is :any because flow is not smart enough to figure out cached</span>    <span class="token comment" spellcheck="true">/*      如果浏览器原生支持Symbol，使用Reflect.ownKeys读出inject中所有key，如果不支持使用Object.keys      获取key。      原因是Reflect.ownKeys可以读取Symbol类型的属性，而且也可以读出包括不可枚举的属性，要用filter      过滤      Object.keys不可读取Symbol类型的属性    */</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> hasSymbol      <span class="token operator">?</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>inject<span class="token punctuation">)</span>      <span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>inject<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">// #6574 in case the inject object is observed...</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'__ob__'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>      <span class="token comment" spellcheck="true">/*        from属性时provide原属性        Vue.js在实例化的第一步是规格化用户传入的数据(就是在添加$options属性时),即使inject传递的        内容是数组也会被规格化成对象并存放在from属性中        {          inject:[foo]        }        规格化后是        {         inject:{            foo:{              from:'foo'            }         }        }      */</span>      <span class="token keyword">const</span> provideKey <span class="token operator">=</span> inject<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">from</span>      <span class="token keyword">let</span> source <span class="token operator">=</span> vm      <span class="token keyword">while</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//whlie循环自底向上搜索</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span>_provided <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>_provided<span class="token punctuation">,</span> provideKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">.</span>_provided<span class="token punctuation">[</span>provideKey<span class="token punctuation">]</span>          <span class="token keyword">break</span>        <span class="token punctuation">}</span>        source <span class="token operator">=</span> source<span class="token punctuation">.</span>$parent      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//如果搜索不到，有默认值则使用默认值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'default'</span> <span class="token keyword">in</span> inject<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> provideDefault <span class="token operator">=</span> inject<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">default</span>          <span class="token comment" spellcheck="true">//默认值支持函数，若为函数则执行它</span>          result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> provideDefault <span class="token operator">===</span> <span class="token string">'function'</span>            <span class="token operator">?</span> provideDefault<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>            <span class="token punctuation">:</span> provideDefault        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Injection "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" not found`</span></span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="initState"><a href="#initState" class="headerlink" title="initState"></a>initState</h4><p>initState是初始化一些状态，包括props、methods、data、computed、watch</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initState <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span>_watchers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token function">initProps</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span> <span class="token function">initMethods</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">observe</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* asRootData */</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token function">initComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>watch <span class="token operator">!==</span> nativeWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 初始化各种状态的顺序是有讲究的 先初始化props,后初始化data,就可以在data中使用props中的数据 先初始化props、data,所以watch可以观察到里面的数据*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initProps</strong><br>第一步，规格化props，将props规格化为对象格式。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 在_init方法中，调用了mergeOptions，在mergeOptions函数中，调用了normalizeProps(child, vm)、normalizeInject(child, vm)  、normalizeDirectives(child)规格化数据*/</span><span class="token keyword">export</span> <span class="token keyword">function</span> mergeOptions <span class="token punctuation">(</span>  parent<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  child<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  vm<span class="token operator">?</span><span class="token punctuation">:</span> Component<span class="token punctuation">)</span><span class="token punctuation">:</span> Object <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">normalizeProps</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  <span class="token function">normalizeInject</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  <span class="token function">normalizeDirectives</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Ensure all props option syntax are normalized into the * Object-based format. */</span><span class="token comment" spellcheck="true">//对props进行规格化处理，规格化之后的props为对象的格式</span><span class="token keyword">function</span> normalizeProps <span class="token punctuation">(</span>options<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> vm<span class="token punctuation">:</span> <span class="token operator">?</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> options<span class="token punctuation">.</span>props  <span class="token comment" spellcheck="true">//没有props退出</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> i<span class="token punctuation">,</span> val<span class="token punctuation">,</span> name  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> props<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      val <span class="token operator">=</span> props<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//camelize 将val驼峰化</span>        name <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        res<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'props must be strings when using array syntax.'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//不是数组类型，调用isPlainObject函数检查它是否为对象类型</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//for...in...遍历props(for...in遍历的是键)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>      val <span class="token operator">=</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      name <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      res<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token operator">?</span> val        <span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> val <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token string">`Invalid value for option "props": expected an Array or an Object, `</span></span> <span class="token operator">+</span>      <span class="token template-string"><span class="token string">`but got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">toRawType</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">,</span>      vm    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  options<span class="token punctuation">.</span>props <span class="token operator">=</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，初始化props<br>规格化之后的props从其父组件传入的props数据中或从使用new创建实例时传入的propsData参数中，筛选出需要的数据保存在vm._props中，然后在vm上设置一个代理，实现通过vm.x访问vm._props.x</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> initProps <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> propsOptions<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//propsData保存父组件传入或用户通过propsData传入的真实props数据</span>  <span class="token keyword">const</span> propsData <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>propsData <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//props是指向vm._props的指针</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>_props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*  keys是指向vm.$options._propKeys的指针,其作用是缓存props对象中的key,  将来更新props时，只需要遍历  */</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_propKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//判断当前组件是否是根组件</span>  <span class="token keyword">const</span> isRoot <span class="token operator">=</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>$parent  <span class="token comment" spellcheck="true">// root instance props should be converted</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不是根组件不需要将props数据转换为响应式</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> propsOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propsOptions<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* istanbul ignore else */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> hyphenatedKey <span class="token operator">=</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedAttribute</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span> <span class="token operator">||</span>          config<span class="token punctuation">.</span><span class="token function">isReservedAttr</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hyphenatedKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is a reserved attribute and cannot be used as component prop.`</span></span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isUpdatingChildComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token template-string"><span class="token string">`Avoid mutating a prop directly since the value will be `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`overwritten whenever the parent component re-renders. `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`Instead, use a data or computed property based on the prop's `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`value. Prop being mutated: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">,</span>            vm          <span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//将数据设置到vm._props中</span>      <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// static props are already proxied on the component's prototype</span>    <span class="token comment" spellcheck="true">// during Vue.extend(). We only need to proxy props defined at</span>    <span class="token comment" spellcheck="true">// instantiation here.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`_props`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>validateProp是获取props内容的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> validateProp <span class="token punctuation">(</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  propOptions<span class="token punctuation">:</span> Object<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//子级组件用户设置的props选项</span>  propsData<span class="token punctuation">:</span> Object<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//父组件或用户提供的props数据</span>  vm<span class="token operator">?</span><span class="token punctuation">:</span> Component<span class="token punctuation">)</span><span class="token punctuation">:</span> any <span class="token punctuation">{</span>  <span class="token keyword">const</span> prop <span class="token operator">=</span> propOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//absent表示当前的key在用户提供的props选项中是否存在</span>  <span class="token keyword">const</span> absent <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>propsData<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> propsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 处理prop是否为布尔值情况</span>  <span class="token keyword">const</span> booleanIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>booleanIndex <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//key在用户提供的props中不存在，而且也没有设默认值，value为false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>absent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      value <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//key存在但是为空字符串或者value和key相等，hyphenate将key驼峰转换</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// only cast empty string / same name to boolean if</span>      <span class="token comment" spellcheck="true">// boolean has higher priority</span>      <span class="token keyword">const</span> stringIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>stringIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> booleanIndex <span class="token operator">&lt;</span> stringIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//value不存在，如果有默认值则使用默认值，并转换为响应式数据</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取默认值</span>    value <span class="token operator">=</span> <span class="token function">getPropDefaultValue</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// since the default value is a fresh copy,</span>    <span class="token comment" spellcheck="true">// make sure to observe it.</span>    <span class="token keyword">const</span> prevShouldObserve <span class="token operator">=</span> shouldObserve    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span>prevShouldObserve<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token comment" spellcheck="true">// skip validation for weex recycle-list child component props</span>    <span class="token operator">!</span><span class="token punctuation">(</span>__WEEX__ <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token string">'@binding'</span> <span class="token keyword">in</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断prop是否有效，prop验证失败时会产生警告</span>    <span class="token function">assertProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> absent<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> value<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initMethods</strong><br>initMethods只需循环选项中的methods对象，并将每个属性依次挂载到vm上即可</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> initMethods <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> methods<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//方法不合法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Method "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" has type "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">typeof</span> methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" in the component definition. `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`Did you reference the function correctly?`</span></span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//方法已经在props中声明过了</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Method "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" has already been defined as a prop.`</span></span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//方法已经在vm中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isReserved</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Method "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" conflicts with an existing Vue instance method. `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`Avoid defining component methods that start with _ or $.`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将方法挂载到vm中</span>    vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">?</span> noop <span class="token punctuation">:</span> <span class="token function">bind</span><span class="token punctuation">(</span>methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initData</strong><br>data中的数据保存在vm._data中，然后通过设置代理，可以通过vm.x访问到vm._data.x</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> initData <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>data  data <span class="token operator">=</span> vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'function'</span>    <span class="token operator">?</span> <span class="token function">getData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token punctuation">:</span> data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token string">'data functions should return an object:\n'</span> <span class="token operator">+</span>      <span class="token string">'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'</span><span class="token punctuation">,</span>      vm    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// proxy data on instance</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props  <span class="token keyword">const</span> methods <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>methods  <span class="token keyword">let</span> i <span class="token operator">=</span> keys<span class="token punctuation">.</span>length  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//methods有名称为key的方法了，但是data还是会代理到实例中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>methods<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Method "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" has already been defined as a data property.`</span></span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//props上已经存在与key相同的属性了，不会将data代理到实例中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`The data property "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is already declared as a prop. `</span></span> <span class="token operator">+</span>        <span class="token template-string"><span class="token string">`Use prop default value instead.`</span></span><span class="token punctuation">,</span>        vm      <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isReserved</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`_data`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//将data转换为响应式</span>  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* asRootData */</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代理proxy 其实就是通过定义对应 key 的 getter&#x2F;setter 来使得它获取到实际上是其他的值</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> sharedPropertyDefinition <span class="token operator">=</span> <span class="token punctuation">{</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> noop<span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">:</span> noop<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> proxy <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> sourceKey<span class="token punctuation">:</span> string<span class="token punctuation">,</span> key<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> proxyGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> proxySetter <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> sharedPropertyDefinition<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initComputed</strong><br>computed比较常见的一个特性就是它会缓存结果，只有计算依赖的数据或计算结果发生变化才会重新计算。<br>computed的实现其实就是在 vm 上的一个特殊的 getter，它结合了 Watcher 来实现缓存和依赖收集的功能。<br>实现的过程</p><ol><li>使用Watcher读取计算属性</li><li>读取计算属性函数中的数据，使用Watcher观察数据的变化（如果计算属性是模板读取，那么使用组件的Watcher观察，如果是用户自定义的watch,那么使用用户自定义地Watcher观察）</li><li>当数据发生变化时，通知计算属性的Watcher和组件的Watcher(重新渲染模板）</li><li>计算属性的Watcher把dirty设置为true</li><li>模板重新读取计算属性的值，因为dirty为true，所以会重新计算一次值<br>&#96;&#96;&#96;javascript<br>const computedWatcherOptions &#x3D; { lazy: true }</li></ol><p>function initComputed (vm: Component, computed: Object) {<br>  &#x2F;&#x2F;watchers是用来保存所有计算属性的watcher实例<br>  const watchers &#x3D; vm._computedWatchers &#x3D; Object.create(null)<br>  &#x2F;&#x2F;isSSR用于判断当前运行环境是否是SSR(服务端渲染)<br>  const isSSR &#x3D; isServerRendering()</p><p>  for (const key in computed) {<br>    const userDef &#x3D; computed[key]<br>    const getter &#x3D; typeof userDef &#x3D;&#x3D;&#x3D; ‘function’ ? userDef : userDef.get<br>    if (process.env.NODE_ENV !&#x3D;&#x3D; ‘production’ &amp;&amp; getter &#x3D;&#x3D; null) {<br>      warn(<br>        <code>Getter is missing for computed property &quot;$&#123;key&#125;&quot;.</code>,<br>        vm<br>      )<br>    }<br>   &#x2F;&#x2F;在非SSR环境中，为计算属性创建内部观察器<br>    if (!isSSR) {<br>      &#x2F;&#x2F; create internal watcher for the computed property.<br>      watchers[key] &#x3D; new Watcher(<br>        vm,<br>        getter || noop,<br>        noop,<br>        computedWatcherOptions<br>      )<br>    }</p><pre><code>/* 这里如果vm上已经有一个名为key的属性，那么这个名为key的属性就可能是 data、props、methods,但是只有data、props会有警告提示，methods并没 有提示*/if (!(key in vm)) &#123;  defineComputed(vm, key, userDef)&#125; else if (process.env.NODE_ENV !== &#39;production&#39;) &#123;  if (key in vm.$data) &#123;    warn(`The computed property &quot;$&#123;key&#125;&quot; is already defined in data.`, vm)  &#125; else if (vm.$options.props &amp;&amp; key in vm.$options.props) &#123;    warn(`The computed property &quot;$&#123;key&#125;&quot; is already defined as a prop.`, vm)  &#125; else if (vm.$options.methods &amp;&amp; key in vm.$options.methods) &#123;    warn(`The computed property &quot;$&#123;key&#125;&quot; is already defined as a method.`, vm)  &#125;&#125;</code></pre><p>  }<br>}</p><pre><code>&gt; **注意，Object.create(null)创建出来的对象是没有原型的，它不存在__proto__属性**defineComputed就是将key设置到vm上，主要就是要分服务端环境来处理key的getter```javascriptconst sharedPropertyDefinition = &#123;  enumerable: true,  configurable: true,  get: noop,  set: noop&#125;export function defineComputed (  target: any,  key: string,  userDef: Object | Function) &#123;  //shouldCache用来判断computed是否应该有缓存，非服务端才要缓存  const shouldCache = !isServerRendering()  //userDef是函数，则为getter函数  if (typeof userDef === &#39;function&#39;) &#123;    sharedPropertyDefinition.get = shouldCache      ? createComputedGetter(key) //计算属性getter      : createGetterInvoker(userDef)//普通getter    sharedPropertyDefinition.set = noop  &#125;   //否则为对象，将对象的get方法作为getter方法  else &#123;    sharedPropertyDefinition.get = userDef.get      ? shouldCache &amp;&amp; userDef.cache !== false        ? createComputedGetter(key)        : createGetterInvoker(userDef.get)      : noop    sharedPropertyDefinition.set = userDef.set || noop  &#125;  if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp;      sharedPropertyDefinition.set === noop) &#123;    sharedPropertyDefinition.set = function () &#123;      warn(        `Computed property &quot;$&#123;key&#125;&quot; was assigned to but it has no setter.`,        this      )    &#125;  &#125;  Object.defineProperty(target, key, sharedPropertyDefinition)&#125;</code></pre><p>createComputedGetter接受一个key为参数，并返回一个函数为key的getter函数，先获取key对应的watcher,如果watcher存在而且计算属性的返回值也发生了变化，则重新计算得出最新结果</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> createComputedGetter <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> computedGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//dirty属性来标志计算属性是否发生了变化</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        watcher<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将读取计算属性的Watcher添加到计算属性所依赖的所有状态的依赖列表</span>        <span class="token comment" spellcheck="true">//其实就是让读取计算属性的那个Watcher持续观察计算属性所依赖的状态的变化</span>        watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> watcher<span class="token punctuation">.</span>value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>evaluate()就是执行一下this.get()方法重新计算一下值，然后将dirty设置为false；depend()先遍历this.deps属性（保存了计算属性用到的所有状态的dep实例，每个dep实例保存了它的所有依赖），依次执行dep实例的depend方法，将组件的Watcher依次加入这些dep实例的依赖列表中，实现了组件watcher观察计算属性用到的所有状态的变化。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>    vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>    cb<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>    isRenderWatcher<span class="token operator">?</span><span class="token punctuation">:</span> boolean  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token comment" spellcheck="true">// options</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>deep      <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>user      <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>lazy      <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>sync      <span class="token keyword">this</span><span class="token punctuation">.</span>before <span class="token operator">=</span> options<span class="token punctuation">.</span>before    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token comment" spellcheck="true">// for lazy watchers</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy      <span class="token operator">?</span> undefined      <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span>    <span class="token comment" spellcheck="true">/**   * Evaluate the value of the watcher.   * This only gets called for lazy watchers.   */</span>  evaluate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Depend on all deps collected by this watcher.   */</span>  depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initWatch</strong><br><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//watch选项的格式 { [key:string]:string|Function|Object|Array }</span><span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>     a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>     b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>     c<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>     d<span class="token punctuation">:</span><span class="token number">4</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token punctuation">{</span>      handler<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//深度watcher</span>      immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token comment" spellcheck="true">//侦听开始后会立即调用</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">:</span><span class="token string">'myMethod'</span><span class="token comment" spellcheck="true">//一个函数名,</span>    d<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token keyword">function</span> <span class="token function">handle1</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token function">handle2</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong><br>initState初始化时，先判断用户是否设置watch选项并且watch选项不等于浏览器原生的watch（因为Firefox浏览器中Object.prototype上有一个watch方法）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>watch <span class="token operator">!==</span> nativeWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>initWatch的实现其实并不难，就是遍历watch选项，然后分成数组和其他情况处理，如果是数组则遍历数组中的每一项依次处理</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> initWatch <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> watch<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> watch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> watch<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> handler<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>createWatcher就是将handler分成字符串、对象、函数类型来处理</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> createWatcher <span class="token punctuation">(</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>  expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>  handler<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    options <span class="token operator">=</span> handler    handler <span class="token operator">=</span> handler<span class="token punctuation">.</span>handler  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    handler <span class="token operator">=</span> vm<span class="token punctuation">[</span>handler<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="callHook内部原理"><a href="#callHook内部原理" class="headerlink" title="callHook内部原理"></a>callHook内部原理</h3><p><strong>作用：</strong>callHook的作用时触发用户设置的生命周期钩子，而用户设置的生命周期钩子会在执行new Vue()时，通过参数传递给Vue.js（即可以在Vue.js构造函数中，通过options参数获取到用户设置的生命周期钩子，例如vm.$options.created)<br><strong>注意：</strong>vm.$options.created获取到的是一个数组[fn]，数组中包括了钩子函数。<br>           为什么是数组？<br>          因为Vue.mixin方法会将选项写入Vue.option中，影响之后创建的所有Vue.js实例，而Vue.js初始化时会将用户传入的option和构造函数的options合并成一个选项赋值给vm.$options。如果Vue.mixin和用户实例化Vue.js时，设置了同一个生命周期钩子，则触发生命周期时，需要同时执行这两个函数，而转换成数组后，即可在同一个生命周期钩子列表里保存多个生命周期钩子。<br>源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> callHook <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> hook<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// #7573 disable dep collection when invoking lifecycle hooks</span>  <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> handlers <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">[</span>hook<span class="token punctuation">]</span>  <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hook<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> hook`</span></span>  <span class="token comment" spellcheck="true">//取出列表，依次执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> handlers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_hasHookEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'hook:'</span> <span class="token operator">+</span> hook<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p><strong>用法：</strong>用来格式化文本。<br><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>双括号<span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token operator">|</span>capitalize<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>在v<span class="token operator">-</span>bind中<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token punctuation">:</span>id<span class="token operator">=</span><span class="token string">"raw|formatId"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//在组件定义一个本地过滤器,过滤器函数总是将表达式的值作为第一个参数</span>filters<span class="token punctuation">:</span><span class="token punctuation">{</span>  capitalize<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">''</span>     value<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//也可以在Vue.js示例之前全局定义过滤器</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'capitalize'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">''</span>     value<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//过滤器也可以串联</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token operator">|</span>filterA<span class="token operator">|</span>filterB<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//过滤器函数也可以接收参数</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token operator">|</span><span class="token function">filterA</span><span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span><span class="token string">'arg2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>koa源码学习</title>
      <link href="/2022/11/12/koa/"/>
      <url>/2022/11/12/koa/</url>
      
        <content type="html"><![CDATA[<h1 id="koa简介"><a href="#koa简介" class="headerlink" title="koa简介"></a>koa简介</h1><p>官网简介：koa是基于Node.js平台的下一代web开发框架</p><h1 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h1><p>源码lib文件目录：</p><pre class="line-numbers language-javascript"><code class="language-javascript">├── application<span class="token punctuation">.</span>js # 入口文件├── context<span class="token punctuation">.</span>js     # 创建网络请求的上下文对象├── request<span class="token punctuation">.</span>js     # koa的request对象└── response<span class="token punctuation">.</span>js    # koa的response对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="koa-compose"><a href="#koa-compose" class="headerlink" title="koa-compose"></a>koa-compose</h3><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><p>使用app.use可以将给定的中间件添加到应用程序，作为参数的函数（就是一个中间件）接收两个参数：ctx和next，next也是一个函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一个中间件函数'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一个中间件函数next之后!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二个中间件函数'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二个中间件函数next之后!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//运行结果是</span>第一个中间件函数第二个中间件函数第二个中间件函数next之后！第一个中间件函数next之后！<span class="token comment" spellcheck="true">//结合下面源码</span>一个中间件函数其实就是上面的<span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">首先执行的dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>，就是第一个中间件函数，执行完“第一个中间件函数”，后面<span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>开始执行第二个中间件函数，“第二个中间件函数”执行完后，<span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>返回的的Promise <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>之后开始执行“第二个中间函数next之后”，然后第一个中间件的<span class="token keyword">await</span>结束了，开始执行“第一个中间件函数next之后！”，最后执行完毕<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Compose `middleware` returning * a fully valid middleware comprised * of all those which are passed. * * @param {Array} middleware * @return {Function} * @api public */</span><span class="token keyword">function</span> compose <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//参数是一个数组，数组的每一项是一个函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>middleware<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Middleware stack must be an array!'</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> fn <span class="token keyword">of</span> middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Middleware must be composed of functions!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * @param {Object} context   * @return {Promise}   * @api public   */</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// last called middleware #</span>    <span class="token comment" spellcheck="true">// index初始值为-1，因为第一次调用下标是0，同时需要判断index是否大于i，如果为0会和下面判断逻辑冲突</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">//调用dispatch()返回的结果是一个Promise</span>    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token keyword">function</span> dispatch <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> index<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'next() called multiple times'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      index <span class="token operator">=</span> i      <span class="token keyword">let</span> fn <span class="token operator">=</span> middleware<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> middleware<span class="token punctuation">.</span>length<span class="token punctuation">)</span> fn <span class="token operator">=</span> next      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//真正resolve的是这一句，fn是中间件数组第i个，resolve又继续调用第i+1个，依次调用知道最后一个</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> dispatch<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：compose对中间件的处理有点类似于递归的思想，首先是将中间件数组middleware传入，按顺序从第一个开始执行，一遇到next()，就执行数组中的下一个中间件，等所有中间件都执行后，在继续执行next()之后的代码，从最后一个中间件一直执行到第一个。</p><h3 id="Application-js"><a href="#Application-js" class="headerlink" title="Application.js"></a>Application.js</h3><h4 id="koa的简单用法："><a href="#koa的简单用法：" class="headerlink" title="koa的简单用法："></a>koa的简单用法：</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span> <span class="token number">3000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>koa的启动流程主要就是四个步骤：引入koa包–&gt;实例化koa对象–&gt;编写中间件–&gt;监听服务</p><h4 id="Application-js源码"><a href="#Application-js源码" class="headerlink" title="Application.js源码"></a>Application.js源码</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Emitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用koa时引入的koa包其实就是Application类，继承于Node的events类</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">Emitter</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//poxy是代理设置，为true时表示获取真正的客户端ip地址</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> options<span class="token punctuation">.</span>proxy <span class="token operator">||</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//子域名偏移量</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subdomainOffset <span class="token operator">=</span> options<span class="token punctuation">.</span>subdomainOffset <span class="token operator">||</span> <span class="token number">2</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>proxyIpHeader <span class="token operator">=</span> options<span class="token punctuation">.</span>proxyIpHeader <span class="token operator">||</span> <span class="token string">'X-Forwarded-For'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maxIpsCount <span class="token operator">=</span> options<span class="token punctuation">.</span>maxIpsCount <span class="token operator">||</span> <span class="token number">0</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>env <span class="token operator">=</span> options<span class="token punctuation">.</span>env <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">||</span> <span class="token string">'development'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>compose <span class="token operator">=</span> options<span class="token punctuation">.</span>compose <span class="token operator">||</span> compose    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> options<span class="token punctuation">.</span>keys    <span class="token comment" spellcheck="true">//中间件函数队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>middleware <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//context.js、request.js、response.js创建的对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// util.inspect.custom support for node 6+</span>    <span class="token comment" spellcheck="true">/* istanbul ignore else */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>custom<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>custom<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inspect    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//listen函数创建了一个原生的http服务，并监听传入的端口号</span>  listen <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'listen'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//this.callback是对响应内容做一些处理的函数</span>    <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token punctuation">}</span>   toJSON <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">only</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token string">'subdomainOffset'</span><span class="token punctuation">,</span>      <span class="token string">'proxy'</span><span class="token punctuation">,</span>      <span class="token string">'env'</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  inspect <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//use是用来使用中间件函数的，fn即为中间件</span>  use <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'middleware must be a function!'</span><span class="token punctuation">)</span>    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'use %s'</span><span class="token punctuation">,</span> fn<span class="token punctuation">.</span>_name <span class="token operator">||</span> fn<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'-'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//compose来源于koa-compose包，用来处理中间件函数</span>  callback <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>middleware<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listenerCount</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onerror<span class="token punctuation">)</span>    <span class="token keyword">const</span> handleRequest <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> handleRequest  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//执行中间件函数，且一开始就将res的statusCode定义为404。如果在我们没有设置body的情况下，默认就会返回404。</span>  handleRequest <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fnMiddleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> ctx<span class="token punctuation">.</span>res    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>    <span class="token keyword">const</span> onerror <span class="token operator">=</span> err <span class="token operator">=</span><span class="token operator">></span> ctx<span class="token punctuation">.</span><span class="token function">onerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">const</span> handleResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">respond</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token function">onFinished</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> onerror<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">fnMiddleware</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handleResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>onerror<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//调用object.create()对createServer返回的req、res进行封装，创建一个新的上下文</span> <span class="token comment" spellcheck="true">//对象ctx,每次访问ctx对象都是独立的对象</span>  createContext <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span>    <span class="token keyword">const</span> request <span class="token operator">=</span> context<span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">)</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> context<span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span>    context<span class="token punctuation">.</span>app <span class="token operator">=</span> request<span class="token punctuation">.</span>app <span class="token operator">=</span> response<span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token keyword">this</span>    context<span class="token punctuation">.</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>req <span class="token operator">=</span> response<span class="token punctuation">.</span>req <span class="token operator">=</span> req    context<span class="token punctuation">.</span>res <span class="token operator">=</span> request<span class="token punctuation">.</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>res <span class="token operator">=</span> res    request<span class="token punctuation">.</span>ctx <span class="token operator">=</span> response<span class="token punctuation">.</span>ctx <span class="token operator">=</span> context    request<span class="token punctuation">.</span>response <span class="token operator">=</span> response    response<span class="token punctuation">.</span>request <span class="token operator">=</span> request    context<span class="token punctuation">.</span>originalUrl <span class="token operator">=</span> request<span class="token punctuation">.</span>originalUrl <span class="token operator">=</span> req<span class="token punctuation">.</span>url    context<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> context  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：Application类完整的流程是，使用use函数时，会将中间件函数push进中间件数组中，通过compose函数决定执行中间件函数的顺序，将创建好的ctx对象和排好顺序的中间件函数传入handleRequest转化成对应的响应体，再将此传入http服务的listen函数监听执行</p><h3 id="Context-js"><a href="#Context-js" class="headerlink" title="Context.js"></a>Context.js</h3><p>context.js有一个比较特殊的地方就是通过delegate库来代理函数及对象，比如调用ctx.hostname本质则是调用了req.hostname。通过delegate代理到context对应函数方法或对象上。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Response delegation. */</span><span class="token function">delegate</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token string">'response'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'attachment'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'redirect'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'remove'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'vary'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'has'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'append'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'flushHeaders'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'lastModified'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'etag'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'headerSent'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'writable'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * Request delegation. */</span><span class="token function">delegate</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token string">'request'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'acceptsLanguages'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'acceptsEncodings'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'acceptsCharsets'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'accepts'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'is'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'idempotent'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'socket'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'method'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'query'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">'accept'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'origin'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'subdomains'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'protocol'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'hostname'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'URL'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'headers'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'secure'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'stale'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'fresh'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'ips'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">'ip'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Request-js和Response-js"><a href="#Request-js和Response-js" class="headerlink" title="Request.js和Response.js"></a>Request.js和Response.js</h3><p>request和response对象就没有什么特别的了，就是一些get，set方法获取header、修改status等等。</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span> socket <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span>socket  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> header <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> res <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> res<span class="token punctuation">.</span>getHeaders <span class="token operator">===</span> <span class="token string">'function'</span>      <span class="token operator">?</span> res<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">:</span> res<span class="token punctuation">.</span>_headers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Node &lt; 7.7</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> headers <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>header  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> status <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span>statusCode  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> status <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>headerSent<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token function">assert</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'status code must be a number'</span><span class="token punctuation">)</span>    <span class="token function">assert</span><span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`invalid status code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_explicitStatus <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> code    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">.</span>httpVersionMajor <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span>statusMessage <span class="token operator">=</span> statuses<span class="token punctuation">[</span>code<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">&amp;&amp;</span> statuses<span class="token punctuation">.</span>empty<span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> message <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span>statusMessage <span class="token operator">||</span> statuses<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> message <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span>statusMessage <span class="token operator">=</span> msg  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> body <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_body  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> koa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax学习</title>
      <link href="/2022/10/11/ajax%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/11/ajax%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="ajax简介"><a href="#ajax简介" class="headerlink" title="ajax简介"></a>ajax简介</h1><p><code>AJAX</code>全称为<code>Asynchronous JavaScript And XML</code>，就是异步的 JS 和 XML<br>通过<code>AJAX</code>可以在浏览器中向服务器发送异步请求，最大的优势：  <strong>无刷新获取数据</strong><br><code>AJAX</code>不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p><h2 id="XML是什么？"><a href="#XML是什么？" class="headerlink" title="XML是什么？"></a>XML是什么？</h2><p>XML 可扩展标记语言，被设计用来传输和存储数据，现在传输数据用的是JSON</p><h2 id="AJAX-的优点"><a href="#AJAX-的优点" class="headerlink" title="AJAX 的优点"></a>AJAX 的优点</h2><ul><li>可以无需刷新页面而与服务器端进行通信</li><li>允许你根据用户事件来更新部分页面内容</li></ul><h2 id="AJAX-的缺点"><a href="#AJAX-的缺点" class="headerlink" title="AJAX 的缺点"></a>AJAX 的缺点</h2><ul><li>没有浏览历史，不能回退</li><li>存在跨域问题（同源）</li><li>SEO（Search Engine Optimization，搜索引擎优化）不友好，爬虫无法爬取</li></ul><h1 id="AJAX请求"><a href="#AJAX请求" class="headerlink" title="AJAX请求"></a>AJAX请求</h1><h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><p>后台部分是用node的koa框架写的一些简单请求</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> cors<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2-cors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> port<span class="token operator">=</span><span class="token number">9090</span><span class="token comment" spellcheck="true">//get请求</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">const</span> data<span class="token operator">=</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'cyw'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">20</span>    <span class="token punctuation">}</span>    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//超时处理</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">"超时了！"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//post请求</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/server'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">"post请求"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置响应头，允许任意类型的头信息</span>   response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//跨域</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><p>请求其实就是分四步：</p><ol><li>创建XMLHttpRequest对象xhr</li><li>xhr.open</li><li>xhr.send</li><li>xhr.onreadystatechange</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style<span class="token operator">></span>       #content<span class="token punctuation">{</span>        width<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        height<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>textarea id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>发送请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>取消请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token keyword">const</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> btn1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> res<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建对象</span>     <span class="token keyword">let</span> xhr<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 标识是否正在发送 AJAX 请求</span>     <span class="token keyword">let</span> isSending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     btn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 若上一个请求尚未完成，则手动取消请求</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSending<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     isSending<span class="token operator">=</span><span class="token boolean">true</span>     <span class="token comment" spellcheck="true">//初始化，设置请求方法和url</span>     xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:9090/home?a=1&amp;b=2&amp;c=3'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//发送</span>     xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//超时处理</span>    <span class="token comment" spellcheck="true">// xhr.timeout = 1000;</span>  <span class="token comment" spellcheck="true">// 设置超时回调</span>  <span class="token comment" spellcheck="true">/*    xhr.ontimeout = () => {    alert('请求超时！');    };    */</span>     <span class="token comment" spellcheck="true">//事件绑定，处理服务器返回结果</span>     xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 请求响应完毕后，修改变量标识</span>            isSending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2xx 成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 状态码、状态字符串</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 200</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>                <span class="token comment" spellcheck="true">// 响应头</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// content-length: 13  content-type: text/html; charset=utf-8</span>                <span class="token keyword">let</span> data<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span>                res<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>data<span class="token punctuation">.</span>name            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token punctuation">}</span>         btn1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style<span class="token operator">></span>        #res<span class="token punctuation">{</span>            width<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>            height<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>textarea id<span class="token operator">=</span><span class="token string">"res"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>发送请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token keyword">const</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">const</span> res<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       btn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">const</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:9090/server?'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//设置请求头</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'cyw'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'a=2&amp;b=3&amp;c=4'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//事件绑定，处理服务器返回结果</span>        xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2xx 成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 状态码、状态字符串</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 200</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>                <span class="token comment" spellcheck="true">// 响应头</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// content-length: 13  content-type: text/html; charset=utf-8</span>                               <span class="token comment" spellcheck="true">// 将响应体内容设置为文本</span>               res<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="axios请求"><a href="#axios请求" class="headerlink" title="axios请求"></a>axios请求</h1><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style<span class="token operator">></span>        #content<span class="token punctuation">{</span>         width<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>         height<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>     <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/axios/dist/axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>textarea id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>发送请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token keyword">const</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> res<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:9090'</span><span class="token punctuation">;</span>     btn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 请求参数</span>     params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span> <span class="token number">200</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 请求头</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>        d<span class="token punctuation">:</span> <span class="token number">400</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2生命周期</title>
      <link href="/2022/09/21/vue2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/09/21/vue2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="生命周期4个阶段"><a href="#生命周期4个阶段" class="headerlink" title="生命周期4个阶段"></a>生命周期4个阶段</h3><p>Vue2官方文档上的图</p><p>分成4个阶段：初始化阶段、模板编译阶段、挂载阶段、卸载阶段<br><strong>初始化阶段：</strong><br>从new Vue()到created之间的阶段，此阶段主要是在Vue.js实例上初始化一些属性、事件以及响应数据，例如props、methods、data、computed、watch、provide和inject等等。</p><p><strong>模板编译阶段：</strong><br>在created钩子函数到beforeMount钩子函数之间的阶段是模板编译阶段，此阶段主要目的是将模板编译为渲染函数，只存在于完整版中。（原因在于vm.$mount运行时版的实现已经默认存在渲染函数）</p><p><strong>挂载阶段:</strong><br>beforeMount钩子函数到mounted钩子函数之间是挂载阶段，此阶段Vue.js会将其实例挂载到DOM元素上，即将模板渲染到指定的DOM元素中。而且在挂载的过程中，开启Watcher来持续追踪依赖的变化。(在vm.$mount源码分析那里有提到）</p><p><strong>卸载阶段：</strong><br>调用vm.$destroy方法后，Vue.js的生命周期进入卸载阶段</p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><h4 id="new-Vue"><a href="#new-Vue" class="headerlink" title="new Vue()"></a>new Vue()</h4><p>new Vue( )被调用时，首先会进行一些初始化操作，然后进入模板编译阶段，最后进入挂载阶段</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//目录 src/core/instance/index.js</span><span class="token keyword">function</span> Vue <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Vue is a constructor and should be called with the `new` keyword'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="init方法"><a href="#init方法" class="headerlink" title="_init方法"></a>_init方法</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//目录 src/core/instance/init.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> initMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//挂载到Vue.prototype上</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// merge options  </span>    <span class="token comment" spellcheck="true">/*    将当前用户传递的options选项与当前构造函数的options选项及其父级实例构造函数的options属性，    合成一个新的options并赋值给$options属性    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>_isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// optimize internal component instantiation</span>      <span class="token comment" spellcheck="true">// since dynamic options merging is pretty slow, and none of the</span>      <span class="token comment" spellcheck="true">// internal component options needs special treatment.</span>      <span class="token function">initInternalComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">/*        resolveConstructorOptions        获取当前实例中构造函数的options选项及其所有父级的构造函数的options,有父级时因为当前实例        可能是一个子组件        */</span>        <span class="token function">resolveConstructorOptions</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">,</span>        options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        vm      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// expose real self</span>    vm<span class="token punctuation">.</span>_self <span class="token operator">=</span> vm    <span class="token function">initLifecycle</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token function">initEvents</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token function">initRender</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeCreate'</span><span class="token punctuation">)</span>    <span class="token function">initInjections</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// resolve injections before data/props</span>    <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token function">initProvide</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// resolve provide after data/props</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="initLifecycle"><a href="#initLifecycle" class="headerlink" title="initLifecycle"></a>initLifecycle</h4><p>初始化实例属性需要初始化内部使用属性（vm._watcher等，以 _开头的），也初始化供外部使用的属性（vm.$parent等，以$开头的）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initLifecycle <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options  <span class="token comment" spellcheck="true">// locate first non-abstract parent </span>  <span class="token comment" spellcheck="true">/*  vm.$parent 需要找到第一个非抽象类型的父级，如果当前组件不是抽象组件而且存在父级，就通过while  自底向上循环，直到找到第一个非抽象类的父级  */</span>  <span class="token keyword">let</span> parent <span class="token operator">=</span> options<span class="token punctuation">.</span>parent  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>abstract<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>abstract <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>$parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent    <span class="token punctuation">}</span>    parent<span class="token punctuation">.</span>$children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  vm<span class="token punctuation">.</span>$parent <span class="token operator">=</span> parent  <span class="token comment" spellcheck="true">//vm.$root 是自顶向下将根组件的$root依次传递给每一个子组件</span>  vm<span class="token punctuation">.</span>$root <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>$root <span class="token punctuation">:</span> vm  <span class="token comment" spellcheck="true">//vm.$children是子组件主动添加到父组件中的，如第14行</span>  vm<span class="token punctuation">.</span>$children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  vm<span class="token punctuation">.</span>$refs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  vm<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> <span class="token keyword">null</span>  vm<span class="token punctuation">.</span>_inactive <span class="token operator">=</span> <span class="token keyword">null</span>  vm<span class="token punctuation">.</span>_directInactive <span class="token operator">=</span> <span class="token boolean">false</span>  vm<span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">false</span>  vm<span class="token punctuation">.</span>_isDestroyed <span class="token operator">=</span> <span class="token boolean">false</span>  vm<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="initInjections-x2F-initProvide"><a href="#initInjections-x2F-initProvide" class="headerlink" title="initInjections&#x2F;initProvide"></a>initInjections&#x2F;initProvide</h4><p><strong>用法：</strong>inject和provide选项需要一起使用，它们允许祖先组件向其所有子孙后代注入依赖，并在其上下游关系成立的时间里始终生效。<br><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//provide选项应该是一个对象或返回一个对象的函数。该对象包含可注入器子孙的属性</span><span class="token comment" spellcheck="true">//inject选项应该是一个字符串数组或对象，对象的key是本地绑定名，value是一个key或对象，用来在可用的注入内容中搜索</span><span class="token comment" spellcheck="true">//示例一</span><span class="token keyword">var</span> Provider<span class="token operator">=</span><span class="token punctuation">{</span>  provide<span class="token punctuation">:</span><span class="token punctuation">{</span>    foo<span class="token punctuation">:</span><span class="token string">'bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> Child<span class="token operator">=</span><span class="token punctuation">{</span>  inject<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//"bar"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//示例二 可以使用ES2015 Symbol作为key，但是这只在原生支持Symbol和Reflect.ownKeys的环境下可工作</span><span class="token keyword">const</span> s<span class="token operator">=</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> Provider<span class="token operator">=</span><span class="token punctuation">{</span>   <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>     <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'foo'</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> Child<span class="token operator">=</span><span class="token punctuation">{</span>   inject<span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//示例三 可以在data/props中访问注入的值</span><span class="token keyword">const</span> Child<span class="token operator">=</span><span class="token punctuation">{</span>   inject<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   props<span class="token punctuation">:</span><span class="token punctuation">{</span>     bar<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//default 默认值</span><span class="token keyword">const</span> Child<span class="token operator">=</span><span class="token punctuation">{</span>     inject<span class="token punctuation">:</span><span class="token punctuation">{</span>      foo<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'foo'</span> <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  从_init代码可以看出initInjections是data/props之前初始化，initProvide是在data/props之后初始  化，这样做的目的是让用户可以在data/props中使用inject所注入的内容*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong><br><strong>provide</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initProvide <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> provide <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>provide  <span class="token keyword">if</span> <span class="token punctuation">(</span>provide<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内容注入到_provided属性中，如果是函数则执行函数，否则直接赋值</span>    vm<span class="token punctuation">.</span>_provided <span class="token operator">=</span> <span class="token keyword">typeof</span> provide <span class="token operator">===</span> <span class="token string">'function'</span>      <span class="token operator">?</span> provide<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>      <span class="token punctuation">:</span> provide  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>inject</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initInjections <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//resolveInject是通过用户配置的inject,自底向上搜索可用的的注入内容，并将搜索结果返回</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">resolveInject</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>inject<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通知defineReactive函数不要将内容转换成响应式</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* istanbul ignore else */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">defineReactive</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token template-string"><span class="token string">`Avoid mutating an injected value directly since the changes will be `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`overwritten whenever the provided component re-renders. `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`injection being mutated: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">,</span>            vm          <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">defineReactive</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> resolveInject <span class="token punctuation">(</span>inject<span class="token punctuation">:</span> any<span class="token punctuation">,</span> vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>inject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// inject is :any because flow is not smart enough to figure out cached</span>    <span class="token comment" spellcheck="true">/*      如果浏览器原生支持Symbol，使用Reflect.ownKeys读出inject中所有key，如果不支持使用Object.keys      获取key。      原因是Reflect.ownKeys可以读取Symbol类型的属性，而且也可以读出包括不可枚举的属性，要用filter      过滤      Object.keys不可读取Symbol类型的属性    */</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> hasSymbol      <span class="token operator">?</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>inject<span class="token punctuation">)</span>      <span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>inject<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">// #6574 in case the inject object is observed...</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'__ob__'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>      <span class="token comment" spellcheck="true">/*        from属性时provide原属性        Vue.js在实例化的第一步是规格化用户传入的数据(就是在添加$options属性时),即使inject传递的        内容是数组也会被规格化成对象并存放在from属性中        {          inject:[foo]        }        规格化后是        {         inject:{            foo:{              from:'foo'            }         }        }      */</span>      <span class="token keyword">const</span> provideKey <span class="token operator">=</span> inject<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">from</span>      <span class="token keyword">let</span> source <span class="token operator">=</span> vm      <span class="token keyword">while</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//whlie循环自底向上搜索</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span>_provided <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>_provided<span class="token punctuation">,</span> provideKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">.</span>_provided<span class="token punctuation">[</span>provideKey<span class="token punctuation">]</span>          <span class="token keyword">break</span>        <span class="token punctuation">}</span>        source <span class="token operator">=</span> source<span class="token punctuation">.</span>$parent      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//如果搜索不到，有默认值则使用默认值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'default'</span> <span class="token keyword">in</span> inject<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> provideDefault <span class="token operator">=</span> inject<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">default</span>          <span class="token comment" spellcheck="true">//默认值支持函数，若为函数则执行它</span>          result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> provideDefault <span class="token operator">===</span> <span class="token string">'function'</span>            <span class="token operator">?</span> provideDefault<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>            <span class="token punctuation">:</span> provideDefault        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Injection "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" not found`</span></span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="initState"><a href="#initState" class="headerlink" title="initState"></a>initState</h4><p>initState是初始化一些状态，包括props、methods、data、computed、watch</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initState <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span>_watchers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token function">initProps</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span> <span class="token function">initMethods</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">observe</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* asRootData */</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token function">initComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>watch <span class="token operator">!==</span> nativeWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 初始化各种状态的顺序是有讲究的 先初始化props,后初始化data,就可以在data中使用props中的数据 先初始化props、data,所以watch可以观察到里面的数据*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initProps</strong><br>第一步，规格化props，将props规格化为对象格式。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 在_init方法中，调用了mergeOptions，在mergeOptions函数中，调用了normalizeProps(child, vm)、normalizeInject(child, vm)  、normalizeDirectives(child)规格化数据*/</span><span class="token keyword">export</span> <span class="token keyword">function</span> mergeOptions <span class="token punctuation">(</span>  parent<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  child<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  vm<span class="token operator">?</span><span class="token punctuation">:</span> Component<span class="token punctuation">)</span><span class="token punctuation">:</span> Object <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">normalizeProps</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  <span class="token function">normalizeInject</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  <span class="token function">normalizeDirectives</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Ensure all props option syntax are normalized into the * Object-based format. */</span><span class="token comment" spellcheck="true">//对props进行规格化处理，规格化之后的props为对象的格式</span><span class="token keyword">function</span> normalizeProps <span class="token punctuation">(</span>options<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> vm<span class="token punctuation">:</span> <span class="token operator">?</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> options<span class="token punctuation">.</span>props  <span class="token comment" spellcheck="true">//没有props退出</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> i<span class="token punctuation">,</span> val<span class="token punctuation">,</span> name  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> props<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      val <span class="token operator">=</span> props<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//camelize 将val驼峰化</span>        name <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        res<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'props must be strings when using array syntax.'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//不是数组类型，调用isPlainObject函数检查它是否为对象类型</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//for...in...遍历props(for...in遍历的是键)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>      val <span class="token operator">=</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      name <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      res<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token operator">?</span> val        <span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> val <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token string">`Invalid value for option "props": expected an Array or an Object, `</span></span> <span class="token operator">+</span>      <span class="token template-string"><span class="token string">`but got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">toRawType</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">,</span>      vm    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  options<span class="token punctuation">.</span>props <span class="token operator">=</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，初始化props<br>规格化之后的props从其父组件传入的props数据中或从使用new创建实例时传入的propsData参数中，筛选出需要的数据保存在vm._props中，然后在vm上设置一个代理，实现通过vm.x访问vm._props.x</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> initProps <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> propsOptions<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//propsData保存父组件传入或用户通过propsData传入的真实props数据</span>  <span class="token keyword">const</span> propsData <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>propsData <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//props是指向vm._props的指针</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>_props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*  keys是指向vm.$options._propKeys的指针,其作用是缓存props对象中的key,  将来更新props时，只需要遍历  */</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_propKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//判断当前组件是否是根组件</span>  <span class="token keyword">const</span> isRoot <span class="token operator">=</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>$parent  <span class="token comment" spellcheck="true">// root instance props should be converted</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不是根组件不需要将props数据转换为响应式</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> propsOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propsOptions<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* istanbul ignore else */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> hyphenatedKey <span class="token operator">=</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedAttribute</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span> <span class="token operator">||</span>          config<span class="token punctuation">.</span><span class="token function">isReservedAttr</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hyphenatedKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is a reserved attribute and cannot be used as component prop.`</span></span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isUpdatingChildComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token template-string"><span class="token string">`Avoid mutating a prop directly since the value will be `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`overwritten whenever the parent component re-renders. `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`Instead, use a data or computed property based on the prop's `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`value. Prop being mutated: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">,</span>            vm          <span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//将数据设置到vm._props中</span>      <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// static props are already proxied on the component's prototype</span>    <span class="token comment" spellcheck="true">// during Vue.extend(). We only need to proxy props defined at</span>    <span class="token comment" spellcheck="true">// instantiation here.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`_props`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>validateProp是获取props内容的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> validateProp <span class="token punctuation">(</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  propOptions<span class="token punctuation">:</span> Object<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//子级组件用户设置的props选项</span>  propsData<span class="token punctuation">:</span> Object<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//父组件或用户提供的props数据</span>  vm<span class="token operator">?</span><span class="token punctuation">:</span> Component<span class="token punctuation">)</span><span class="token punctuation">:</span> any <span class="token punctuation">{</span>  <span class="token keyword">const</span> prop <span class="token operator">=</span> propOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//absent表示当前的key在用户提供的props选项中是否存在</span>  <span class="token keyword">const</span> absent <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>propsData<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> propsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 处理prop是否为布尔值情况</span>  <span class="token keyword">const</span> booleanIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>booleanIndex <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//key在用户提供的props中不存在，而且也没有设默认值，value为false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>absent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      value <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//key存在但是为空字符串或者value和key相等，hyphenate将key驼峰转换</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// only cast empty string / same name to boolean if</span>      <span class="token comment" spellcheck="true">// boolean has higher priority</span>      <span class="token keyword">const</span> stringIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>stringIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> booleanIndex <span class="token operator">&lt;</span> stringIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//value不存在，如果有默认值则使用默认值，并转换为响应式数据</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取默认值</span>    value <span class="token operator">=</span> <span class="token function">getPropDefaultValue</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// since the default value is a fresh copy,</span>    <span class="token comment" spellcheck="true">// make sure to observe it.</span>    <span class="token keyword">const</span> prevShouldObserve <span class="token operator">=</span> shouldObserve    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span>prevShouldObserve<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token comment" spellcheck="true">// skip validation for weex recycle-list child component props</span>    <span class="token operator">!</span><span class="token punctuation">(</span>__WEEX__ <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token string">'@binding'</span> <span class="token keyword">in</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断prop是否有效，prop验证失败时会产生警告</span>    <span class="token function">assertProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> absent<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> value<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initMethods</strong><br>initMethods只需循环选项中的methods对象，并将每个属性依次挂载到vm上即可</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> initMethods <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> methods<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//方法不合法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Method "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" has type "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">typeof</span> methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" in the component definition. `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`Did you reference the function correctly?`</span></span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//方法已经在props中声明过了</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Method "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" has already been defined as a prop.`</span></span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//方法已经在vm中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isReserved</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Method "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" conflicts with an existing Vue instance method. `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`Avoid defining component methods that start with _ or $.`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将方法挂载到vm中</span>    vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">?</span> noop <span class="token punctuation">:</span> <span class="token function">bind</span><span class="token punctuation">(</span>methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initData</strong><br>data中的数据保存在vm._data中，然后通过设置代理，可以通过vm.x访问到vm._data.x</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> initData <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>data  data <span class="token operator">=</span> vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'function'</span>    <span class="token operator">?</span> <span class="token function">getData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token punctuation">:</span> data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token string">'data functions should return an object:\n'</span> <span class="token operator">+</span>      <span class="token string">'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'</span><span class="token punctuation">,</span>      vm    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// proxy data on instance</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props  <span class="token keyword">const</span> methods <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>methods  <span class="token keyword">let</span> i <span class="token operator">=</span> keys<span class="token punctuation">.</span>length  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//methods有名称为key的方法了，但是data还是会代理到实例中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>methods<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Method "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" has already been defined as a data property.`</span></span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//props上已经存在与key相同的属性了，不会将data代理到实例中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`The data property "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is already declared as a prop. `</span></span> <span class="token operator">+</span>        <span class="token template-string"><span class="token string">`Use prop default value instead.`</span></span><span class="token punctuation">,</span>        vm      <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isReserved</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`_data`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//将data转换为响应式</span>  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* asRootData */</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代理proxy 其实就是通过定义对应 key 的 getter&#x2F;setter 来使得它获取到实际上是其他的值</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> sharedPropertyDefinition <span class="token operator">=</span> <span class="token punctuation">{</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> noop<span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">:</span> noop<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> proxy <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> sourceKey<span class="token punctuation">:</span> string<span class="token punctuation">,</span> key<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> proxyGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> proxySetter <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> sharedPropertyDefinition<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initComputed</strong><br>computed比较常见的一个特性就是它会缓存结果，只有计算依赖的数据或计算结果发生变化才会重新计算。<br>computed的实现其实就是在 vm 上的一个特殊的 getter，它结合了 Watcher 来实现缓存和依赖收集的功能。<br>实现的过程</p><ol><li>使用Watcher读取计算属性</li><li>读取计算属性函数中的数据，使用Watcher观察数据的变化（如果计算属性是模板读取，那么使用组件的Watcher观察，如果是用户自定义的watch,那么使用用户自定义地Watcher观察）</li><li>当数据发生变化时，通知计算属性的Watcher和组件的Watcher(重新渲染模板）</li><li>计算属性的Watcher把dirty设置为true</li><li>模板重新读取计算属性的值，因为dirty为true，所以会重新计算一次值<br>&#96;&#96;&#96;javascript<br>const computedWatcherOptions &#x3D; { lazy: true }</li></ol><p>function initComputed (vm: Component, computed: Object) {<br>  &#x2F;&#x2F;watchers是用来保存所有计算属性的watcher实例<br>  const watchers &#x3D; vm._computedWatchers &#x3D; Object.create(null)<br>  &#x2F;&#x2F;isSSR用于判断当前运行环境是否是SSR(服务端渲染)<br>  const isSSR &#x3D; isServerRendering()</p><p>  for (const key in computed) {<br>    const userDef &#x3D; computed[key]<br>    const getter &#x3D; typeof userDef &#x3D;&#x3D;&#x3D; ‘function’ ? userDef : userDef.get<br>    if (process.env.NODE_ENV !&#x3D;&#x3D; ‘production’ &amp;&amp; getter &#x3D;&#x3D; null) {<br>      warn(<br>        <code>Getter is missing for computed property &quot;$&#123;key&#125;&quot;.</code>,<br>        vm<br>      )<br>    }<br>   &#x2F;&#x2F;在非SSR环境中，为计算属性创建内部观察器<br>    if (!isSSR) {<br>      &#x2F;&#x2F; create internal watcher for the computed property.<br>      watchers[key] &#x3D; new Watcher(<br>        vm,<br>        getter || noop,<br>        noop,<br>        computedWatcherOptions<br>      )<br>    }</p><pre><code>/* 这里如果vm上已经有一个名为key的属性，那么这个名为key的属性就可能是 data、props、methods,但是只有data、props会有警告提示，methods并没 有提示*/if (!(key in vm)) &#123;  defineComputed(vm, key, userDef)&#125; else if (process.env.NODE_ENV !== &#39;production&#39;) &#123;  if (key in vm.$data) &#123;    warn(`The computed property &quot;$&#123;key&#125;&quot; is already defined in data.`, vm)  &#125; else if (vm.$options.props &amp;&amp; key in vm.$options.props) &#123;    warn(`The computed property &quot;$&#123;key&#125;&quot; is already defined as a prop.`, vm)  &#125; else if (vm.$options.methods &amp;&amp; key in vm.$options.methods) &#123;    warn(`The computed property &quot;$&#123;key&#125;&quot; is already defined as a method.`, vm)  &#125;&#125;</code></pre><p>  }<br>}</p><pre><code>&gt; **注意，Object.create(null)创建出来的对象是没有原型的，它不存在__proto__属性**defineComputed就是将key设置到vm上，主要就是要分服务端环境来处理key的getter```javascriptconst sharedPropertyDefinition = &#123;  enumerable: true,  configurable: true,  get: noop,  set: noop&#125;export function defineComputed (  target: any,  key: string,  userDef: Object | Function) &#123;  //shouldCache用来判断computed是否应该有缓存，非服务端才要缓存  const shouldCache = !isServerRendering()  //userDef是函数，则为getter函数  if (typeof userDef === &#39;function&#39;) &#123;    sharedPropertyDefinition.get = shouldCache      ? createComputedGetter(key) //计算属性getter      : createGetterInvoker(userDef)//普通getter    sharedPropertyDefinition.set = noop  &#125;   //否则为对象，将对象的get方法作为getter方法  else &#123;    sharedPropertyDefinition.get = userDef.get      ? shouldCache &amp;&amp; userDef.cache !== false        ? createComputedGetter(key)        : createGetterInvoker(userDef.get)      : noop    sharedPropertyDefinition.set = userDef.set || noop  &#125;  if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp;      sharedPropertyDefinition.set === noop) &#123;    sharedPropertyDefinition.set = function () &#123;      warn(        `Computed property &quot;$&#123;key&#125;&quot; was assigned to but it has no setter.`,        this      )    &#125;  &#125;  Object.defineProperty(target, key, sharedPropertyDefinition)&#125;</code></pre><p>createComputedGetter接受一个key为参数，并返回一个函数为key的getter函数，先获取key对应的watcher,如果watcher存在而且计算属性的返回值也发生了变化，则重新计算得出最新结果</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> createComputedGetter <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> computedGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//dirty属性来标志计算属性是否发生了变化</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        watcher<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将读取计算属性的Watcher添加到计算属性所依赖的所有状态的依赖列表</span>        <span class="token comment" spellcheck="true">//其实就是让读取计算属性的那个Watcher持续观察计算属性所依赖的状态的变化</span>        watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> watcher<span class="token punctuation">.</span>value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>evaluate()就是执行一下this.get()方法重新计算一下值，然后将dirty设置为false；depend()先遍历this.deps属性（保存了计算属性用到的所有状态的dep实例，每个dep实例保存了它的所有依赖），依次执行dep实例的depend方法，将组件的Watcher依次加入这些dep实例的依赖列表中，实现了组件watcher观察计算属性用到的所有状态的变化。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>    vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>    cb<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>    isRenderWatcher<span class="token operator">?</span><span class="token punctuation">:</span> boolean  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token comment" spellcheck="true">// options</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>deep      <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>user      <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>lazy      <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>sync      <span class="token keyword">this</span><span class="token punctuation">.</span>before <span class="token operator">=</span> options<span class="token punctuation">.</span>before    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token comment" spellcheck="true">// for lazy watchers</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy      <span class="token operator">?</span> undefined      <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span>    <span class="token comment" spellcheck="true">/**   * Evaluate the value of the watcher.   * This only gets called for lazy watchers.   */</span>  evaluate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Depend on all deps collected by this watcher.   */</span>  depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>initWatch</strong><br><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//watch选项的格式 { [key:string]:string|Function|Object|Array }</span><span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>     a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>     b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>     c<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>     d<span class="token punctuation">:</span><span class="token number">4</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token punctuation">{</span>      handler<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//深度watcher</span>      immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token comment" spellcheck="true">//侦听开始后会立即调用</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">:</span><span class="token string">'myMethod'</span><span class="token comment" spellcheck="true">//一个函数名,</span>    d<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token keyword">function</span> <span class="token function">handle1</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token function">handle2</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong><br>initState初始化时，先判断用户是否设置watch选项并且watch选项不等于浏览器原生的watch（因为Firefox浏览器中Object.prototype上有一个watch方法）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>watch <span class="token operator">!==</span> nativeWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>initWatch的实现其实并不难，就是遍历watch选项，然后分成数组和其他情况处理，如果是数组则遍历数组中的每一项依次处理</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> initWatch <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> watch<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> watch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> watch<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> handler<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>createWatcher就是将handler分成字符串、对象、函数类型来处理</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> createWatcher <span class="token punctuation">(</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>  expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>  handler<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    options <span class="token operator">=</span> handler    handler <span class="token operator">=</span> handler<span class="token punctuation">.</span>handler  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    handler <span class="token operator">=</span> vm<span class="token punctuation">[</span>handler<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="callHook内部原理"><a href="#callHook内部原理" class="headerlink" title="callHook内部原理"></a>callHook内部原理</h3><p><strong>作用：</strong>callHook的作用时触发用户设置的生命周期钩子，而用户设置的生命周期钩子会在执行new Vue()时，通过参数传递给Vue.js（即可以在Vue.js构造函数中，通过options参数获取到用户设置的生命周期钩子，例如vm.$options.created)<br><strong>注意：</strong>vm.$options.created获取到的是一个数组[fn]，数组中包括了钩子函数。<br>           为什么是数组？<br>          因为Vue.mixin方法会将选项写入Vue.option中，影响之后创建的所有Vue.js实例，而Vue.js初始化时会将用户传入的option和构造函数的options合并成一个选项赋值给vm.$options。如果Vue.mixin和用户实例化Vue.js时，设置了同一个生命周期钩子，则触发生命周期时，需要同时执行这两个函数，而转换成数组后，即可在同一个生命周期钩子列表里保存多个生命周期钩子。<br>源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> callHook <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> hook<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// #7573 disable dep collection when invoking lifecycle hooks</span>  <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> handlers <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">[</span>hook<span class="token punctuation">]</span>  <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hook<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> hook`</span></span>  <span class="token comment" spellcheck="true">//取出列表，依次执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> handlers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_hasHookEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'hook:'</span> <span class="token operator">+</span> hook<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p><strong>用法：</strong>用来格式化文本。<br><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>双括号<span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token operator">|</span>capitalize<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>在v<span class="token operator">-</span>bind中<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token punctuation">:</span>id<span class="token operator">=</span><span class="token string">"raw|formatId"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//在组件定义一个本地过滤器,过滤器函数总是将表达式的值作为第一个参数</span>filters<span class="token punctuation">:</span><span class="token punctuation">{</span>  capitalize<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">''</span>     value<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//也可以在Vue.js示例之前全局定义过滤器</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'capitalize'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">''</span>     value<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//过滤器也可以串联</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token operator">|</span>filterA<span class="token operator">|</span>filterB<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//过滤器函数也可以接收参数</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token operator">|</span><span class="token function">filterA</span><span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span><span class="token string">'arg2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router源码学习</title>
      <link href="/2022/09/12/Vue-router%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/12/Vue-router%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-router简介"><a href="#Vue-router简介" class="headerlink" title="Vue-router简介"></a>Vue-router简介</h1><h2 id="vue-router是什么？"><a href="#vue-router是什么？" class="headerlink" title="vue-router是什么？"></a>vue-router是什么？</h2><p>官网的介绍是这么说的，Vue Router 是 Vue.js官方的路由管理器，它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。<br>它的功能有：</p><ul><li>嵌套的路由&#x2F;视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment" spellcheck="true">//通过Vue.use安装路由插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置组件对应的路由</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/foo'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Foo <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/bar'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Bar <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//创建 router 实例，然后传 routes 配置</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建和挂载根实例，通过 router 配置参数注入路由，</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h1><h2 id="主要源码目录"><a href="#主要源码目录" class="headerlink" title="主要源码目录"></a>主要源码目录</h2><p>src文件目录</p><pre class="line-numbers language-javascript"><code class="language-javascript">│ ├──components│ │ ├── link<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 实现router-link组件</span>│ │ └── view<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 实现router-view组件 </span>│ ├── history <span class="token comment" spellcheck="true">// 四种路由模式</span>│ │ ├── abstract<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// abstract模式</span>│ │ ├── base<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 基本模式</span>│ │ ├── hash<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 哈希模式</span>│ │ └── html5<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// html5模式 </span>│ ├── util <span class="token comment" spellcheck="true">// 许多工具方法</span>│ │  <span class="token operator">|</span>__xxx<span class="token punctuation">.</span>js│ │   <span class="token operator">...</span>├── create<span class="token operator">-</span>matcher<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 创建matcher</span>├── create<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 创建route-map</span>├── install<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 路由插件下载方法</span>└── index<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 入口文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由注册"><a href="#路由注册" class="headerlink" title="路由注册"></a>路由注册</h2><p><code>vue-router</code>其实就是一个插件，在<code>vue</code>项目中，使用的一步是安装路由，安装路由用到的就是<code>Vue</code>的全局   ——<code>Vue.use</code>，在<code>vue2</code>的源码学习中有学习过<code>Vue.use()</code>，现在再来看一遍</p><h3 id="Vue-use-plugin"><a href="#Vue-use-plugin" class="headerlink" title="Vue.use(plugin)"></a>Vue.use(plugin)</h3><p>用法：安装<code>Vue.js</code>插件。<br>参数：<code>&#123;Object|Function&#125;plugin</code><br>原理：<br>如果插件是一个对象则必须提供install方法，如果插件是一个函数，它会被作为install方法。调用install方法时，会将Vue作为参数传入，install方法被同一个插件多次使用，插件也只会安装一次。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> toArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">export</span> <span class="token keyword">function</span> initUse <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>use <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">:</span> Function <span class="token operator">|</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> installedPlugins <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//不重复安装插件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedPlugins<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// toArray方法就是将类数组转成真正的数组,并且得到除了第一个参数外的其他参数</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//把Vue作为args第一个参数</span>    args<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin<span class="token punctuation">.</span>install <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      plugin<span class="token punctuation">.</span>install<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      plugin<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    installedPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="install方法"><a href="#install方法" class="headerlink" title="install方法"></a>install方法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> View <span class="token keyword">from</span> <span class="token string">'./components/view'</span><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">'./components/link'</span><span class="token comment" spellcheck="true">//_Vue是用来存Vue的</span><span class="token keyword">export</span> <span class="token keyword">let</span> _Vue<span class="token comment" spellcheck="true">//这里的Vue就是上面Vue.use传入的第一个参数</span><span class="token keyword">export</span> <span class="token keyword">function</span> install <span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//不重复安装</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>install<span class="token punctuation">.</span>installed <span class="token operator">&amp;&amp;</span> _Vue <span class="token operator">===</span> Vue<span class="token punctuation">)</span> <span class="token keyword">return</span>  install<span class="token punctuation">.</span>installed <span class="token operator">=</span> <span class="token boolean">true</span>  _Vue <span class="token operator">=</span> Vue    <span class="token comment" spellcheck="true">//isDef判断v是否是Vue的根实例</span>  <span class="token keyword">const</span> isDef <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">!==</span> undefined  <span class="token comment" spellcheck="true">//为router-view 组件关联路由组件</span>  <span class="token keyword">const</span> registerInstance <span class="token operator">=</span> <span class="token punctuation">(</span>vm<span class="token punctuation">,</span> callVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//父节点</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_parentVnode    <span class="token comment" spellcheck="true">// i.registerRouteInstance判断父组件是否是router-view组件，如果是则关联当前vm,即将当前vm作为router-view的路由组件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>registerRouteInstance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">i</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> callVal<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//混入一些内容到Vue的初始化参数options中</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//this是Vue的根实例</span>  <span class="token comment" spellcheck="true">//为什么是beforeCreate而不是created呢？因为如果是在created操作的话，$options已经初始化好了。</span>    beforeCreate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果当前组件是根组件</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根组件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 保存VueRouter实例，this.$options.router仅存在于Vue根实例上，其它Vue组件不包含此属性，这句只会执行一次</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router        <span class="token keyword">this</span><span class="token punctuation">.</span>_router<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//响应式定义_route属性，保证_route发生变化时，组件会重新渲染</span>        Vue<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'_route'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_router<span class="token punctuation">.</span>history<span class="token punctuation">.</span>current<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果是子组件，将根组件挂载到子组件上</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>_routerRoot<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//为router-view组件关联路由组件</span>      <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    destroyed <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//取消router-view和路由组件的关联</span>      <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将$router挂载到Vue原型上</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'$router'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot<span class="token punctuation">.</span>_router <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//挂载$route</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'$route'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot<span class="token punctuation">.</span>_route <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//注册 router-view router-link 为全局组件</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'RouterView'</span><span class="token punctuation">,</span> View<span class="token punctuation">)</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'RouterLink'</span><span class="token punctuation">,</span> Link<span class="token punctuation">)</span>  <span class="token keyword">const</span> strats <span class="token operator">=</span> Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>optionMergeStrategies  <span class="token comment" spellcheck="true">//路由守卫</span>  <span class="token comment" spellcheck="true">// use the same hook merging strategy for route hooks</span>  strats<span class="token punctuation">.</span>beforeRouteEnter <span class="token operator">=</span> strats<span class="token punctuation">.</span>beforeRouteLeave <span class="token operator">=</span> strats<span class="token punctuation">.</span>beforeRouteUpdate <span class="token operator">=</span> strats<span class="token punctuation">.</span>created<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>router-view</code>里有<code>registerRouteInstance</code>方法</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'RouterView'</span><span class="token punctuation">,</span>  render <span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         data<span class="token punctuation">.</span>registerRouteInstance <span class="token operator">=</span> <span class="token punctuation">(</span>vm<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// val could be undefined for unregistration</span>      <span class="token keyword">const</span> current <span class="token operator">=</span> matched<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span>val <span class="token operator">&amp;&amp;</span> current <span class="token operator">!==</span> vm<span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token punctuation">(</span><span class="token operator">!</span>val <span class="token operator">&amp;&amp;</span> current <span class="token operator">===</span> vm<span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        matched<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> val      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<br>当执行Vue.use(Router)时是执行Router的install方法，install方法的执行过程：</p><ul><li>检查安装，避免重复安装插件</li><li>存储Vue变量，install方法被调用时， Vue.use()的时候会把 vue 传入作为第一个参数</li><li>注册了一个全局混入：注册了两个生命周期钩子 beforeCreate 和 destroyed，因为是 vue 的 mixin 方法，所以注册时不会调用，只有 vue 执行钩子时调用</li><li>添加实例属性、方法：在 Vue 原型上注入$router、$route 属性，方便在 vue 实例中通过 this.$router、this.$route 快捷访问</li><li>注册 router-view、router-link 全局组件</li><li>设置路由组件守卫</li></ul><h3 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">VueRouter</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> install<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  <span class="token keyword">static</span> version<span class="token punctuation">:</span> string  <span class="token keyword">static</span> isNavigationFailure<span class="token punctuation">:</span> Function  <span class="token keyword">static</span> NavigationFailureType<span class="token punctuation">:</span> any  <span class="token keyword">static</span> START_LOCATION<span class="token punctuation">:</span> Route  app<span class="token punctuation">:</span> any  apps<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span>  ready<span class="token punctuation">:</span> boolean  readyCbs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span>  options<span class="token punctuation">:</span> RouterOptions  mode<span class="token punctuation">:</span> string  history<span class="token punctuation">:</span> HashHistory <span class="token operator">|</span> HTML5History <span class="token operator">|</span> AbstractHistory  matcher<span class="token punctuation">:</span> Matcher  fallback<span class="token punctuation">:</span> boolean  beforeHooks<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>NavigationGuard<span class="token operator">></span>  resolveHooks<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>NavigationGuard<span class="token operator">></span>  afterHooks<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>AfterNavigationHook<span class="token operator">></span>  constructor <span class="token punctuation">(</span>options<span class="token punctuation">:</span> RouterOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">VueRouter</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`Router must be called with the new operator.`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">//挂载的实例</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>apps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//支持多实例</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options <span class="token comment" spellcheck="true">//接收的参数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>beforeHooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//beforeEach hook</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resolveHooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//beforeResolve hook</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>afterHooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//afterEach hook</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>matcher <span class="token operator">=</span> <span class="token function">createMatcher</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>routes <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//路由匹配器</span>    <span class="token keyword">let</span> mode <span class="token operator">=</span> options<span class="token punctuation">.</span>mode <span class="token operator">||</span> <span class="token string">'hash'</span> <span class="token comment" spellcheck="true">//模式默认是hash</span>    <span class="token comment" spellcheck="true">//判断是否可以回退</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fallback <span class="token operator">=</span>      mode <span class="token operator">===</span> <span class="token string">'history'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>supportsPushState <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>fallback <span class="token operator">!==</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//如果可以回退就是hash模式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mode <span class="token operator">=</span> <span class="token string">'hash'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//非浏览器环境强制用abstract模式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mode <span class="token operator">=</span> <span class="token string">'abstract'</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> mode    <span class="token comment" spellcheck="true">//根据不同的模式创建不同的history实例</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'history'</span><span class="token punctuation">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTML5History</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'hash'</span><span class="token punctuation">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fallback<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'abstract'</span><span class="token punctuation">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstractHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`invalid mode: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//一些方法</span>  init <span class="token punctuation">(</span>app<span class="token punctuation">:</span> any <span class="token comment" spellcheck="true">/* Vue component instance */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  match <span class="token punctuation">(</span>raw<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> current<span class="token operator">?</span><span class="token punctuation">:</span> Route<span class="token punctuation">,</span> redirectedFrom<span class="token operator">?</span><span class="token punctuation">:</span> Location<span class="token punctuation">)</span><span class="token punctuation">:</span> Route <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">get</span> currentRoute <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span>Route <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>VueRouter</code>的constructor根据传入的option参数，初始化了全局守卫数组（beforeEach、beforeResolve、afterEach)、匹配器(matcher)、模式（mode）等变量</p><h3 id="Init初始化"><a href="#Init初始化" class="headerlink" title="Init初始化"></a>Init初始化</h3><pre class="line-numbers language-javascript"><code class="language-javascript"> init <span class="token punctuation">(</span>app<span class="token punctuation">:</span> any <span class="token comment" spellcheck="true">/* Vue component instance */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开发环境，确保已经安装VueRouter</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>      <span class="token function">assert</span><span class="token punctuation">(</span>        install<span class="token punctuation">.</span>installed<span class="token punctuation">,</span>        <span class="token template-string"><span class="token string">`not installed. Make sure to call \`Vue.use(VueRouter)\` `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`before creating root instance.`</span></span>      <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//保存根实例</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>apps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// set up app destroyed handler</span>    <span class="token comment" spellcheck="true">// https://github.com/vuejs/vue-router/issues/2639</span>   <span class="token comment" spellcheck="true">// 绑定destroyed hook，避免内存泄露，一次性钩子</span>    app<span class="token punctuation">.</span><span class="token function">$once</span><span class="token punctuation">(</span><span class="token string">'hook:destroyed'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// clean out app from this.apps array once destroyed</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>apps<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>apps<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// ensure we still have a main app or null if no apps</span>      <span class="token comment" spellcheck="true">// we do not release the router so it can be reused</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">===</span> app<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>apps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">null</span>      <span class="token comment" spellcheck="true">// 需要确保始终有个主应用</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// main app previously initialized</span>    <span class="token comment" spellcheck="true">// return as we don't need to set up new history listener</span>    <span class="token comment" spellcheck="true">//不重复监听</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> app    <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>history    <span class="token keyword">if</span> <span class="token punctuation">(</span>history <span class="token keyword">instanceof</span> <span class="token class-name">HTML5History</span> <span class="token operator">||</span> history <span class="token keyword">instanceof</span> <span class="token class-name">HashHistory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> handleInitialScroll <span class="token operator">=</span> routeOrError <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">from</span> <span class="token operator">=</span> history<span class="token punctuation">.</span>current        <span class="token keyword">const</span> expectScroll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>scrollBehavior        <span class="token keyword">const</span> supportsScroll <span class="token operator">=</span> supportsPushState <span class="token operator">&amp;&amp;</span> expectScroll        <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll <span class="token operator">&amp;&amp;</span> <span class="token string">'fullPath'</span> <span class="token keyword">in</span> routeOrError<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> routeOrError<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>            <span class="token keyword">const</span> setupListeners <span class="token operator">=</span> routeOrError <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        history<span class="token punctuation">.</span><span class="token function">setupListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">handleInitialScroll</span><span class="token punctuation">(</span>routeOrError<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 统一执行history类上的改变路由方法</span>      history<span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>        history<span class="token punctuation">.</span><span class="token function">getCurrentLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//hash是获取带#的路径，history是获取/的路径</span>        setupListeners<span class="token punctuation">,</span>        setupListeners      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用父类的listen方法，添加回调；</span>    <span class="token comment" spellcheck="true">// 回调会在父类的updateRoute方法被调用时触发，重新为app._route赋值</span>    <span class="token comment" spellcheck="true">// 由于app._route被定义为响应式，所以app._route发生变化，依赖app._route的组件(route-view组件)都会被重新渲染</span>    history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>apps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        app<span class="token punctuation">.</span>_route <span class="token operator">=</span> route      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>检查了VueRouter是否已经安装</li><li>保存了挂载router实例的vue实例</li><li>注册了一个一次性钩子destroyed，在destroyed时，卸载this.app，避免内存泄露</li><li>检查了this.app，避免重复事件监听</li><li>调用父类transitionTo跳转页面<h2 id="VueRouter的构造函数"><a href="#VueRouter的构造函数" class="headerlink" title="VueRouter的构造函数"></a>VueRouter的构造函数</h2><h3 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h3><h4 id="matcher的数据结构"><a href="#matcher的数据结构" class="headerlink" title="matcher的数据结构"></a>matcher的数据结构</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> type Matcher <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//匹配方法  RawLocation可以是一个url字符串也可以是一个Location</span>  match<span class="token punctuation">:</span> <span class="token punctuation">(</span>raw<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> current<span class="token operator">?</span><span class="token punctuation">:</span> Route<span class="token punctuation">,</span> redirectedFrom<span class="token operator">?</span><span class="token punctuation">:</span> Location<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Route<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//添加路由</span>  addRoutes<span class="token punctuation">:</span> <span class="token punctuation">(</span>routes<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>RouteConfig<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>  addRoute<span class="token punctuation">:</span> <span class="token punctuation">(</span>parentNameOrRoute<span class="token punctuation">:</span> string <span class="token operator">|</span> RouteConfig<span class="token punctuation">,</span> route<span class="token operator">?</span><span class="token punctuation">:</span> RouteConfig<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取路由</span>  getRoutes<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Route对象</span><span class="token keyword">const</span> route<span class="token punctuation">:</span> Route <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> location<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token punctuation">(</span>record <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> meta<span class="token punctuation">:</span> <span class="token punctuation">(</span>record <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>meta<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> path<span class="token punctuation">:</span> location<span class="token punctuation">.</span>path <span class="token operator">||</span> <span class="token string">'/'</span><span class="token punctuation">,</span> hash<span class="token punctuation">:</span> location<span class="token punctuation">.</span>hash <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">,</span> query<span class="token punctuation">,</span> params<span class="token punctuation">:</span> location<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fullPath<span class="token punctuation">:</span> <span class="token function">getFullPath</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> stringifyQuery<span class="token punctuation">)</span><span class="token punctuation">,</span> matched<span class="token punctuation">:</span> record <span class="token operator">?</span> <span class="token function">formatMatch</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>redirectedFrom<span class="token punctuation">)</span> <span class="token punctuation">{</span> route<span class="token punctuation">.</span>redirectedFrom <span class="token operator">=</span> <span class="token function">getFullPath</span><span class="token punctuation">(</span>redirectedFrom<span class="token punctuation">,</span> stringifyQuery<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="matcher构造函数"><a href="#matcher构造函数" class="headerlink" title="matcher构造函数"></a>matcher构造函数</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> createMatcher <span class="token punctuation">(</span>  routes<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>RouteConfig<span class="token operator">></span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//路由配置表</span>  router<span class="token punctuation">:</span> VueRouter <span class="token comment" spellcheck="true">//VueRouter实例</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Matcher <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//createRouteMap根据传入的路由配置表，创建路由映射表</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">,</span> nameMap <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createRouteMap</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//动态添加路由</span>  <span class="token keyword">function</span> addRoutes <span class="token punctuation">(</span>routes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">createRouteMap</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">,</span> nameMap<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//添加单条路由</span>  <span class="token keyword">function</span> addRoute <span class="token punctuation">(</span>parentOrRoute<span class="token punctuation">,</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//父路由</span>    <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> parentOrRoute <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token operator">?</span> nameMap<span class="token punctuation">[</span>parentOrRoute<span class="token punctuation">]</span> <span class="token punctuation">:</span> undefined    <span class="token comment" spellcheck="true">// $flow-disable-line</span>    <span class="token function">createRouteMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span>route <span class="token operator">||</span> parentOrRoute<span class="token punctuation">]</span><span class="token punctuation">,</span> pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">,</span> nameMap<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// add aliases of parent</span>    <span class="token comment" spellcheck="true">//如果父路由有别名</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>alias<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">createRouteMap</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">// $flow-disable-line route is defined if parent is</span>        parent<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>alias <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> alias<span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>route<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        pathList<span class="token punctuation">,</span>        pathMap<span class="token punctuation">,</span>        nameMap<span class="token punctuation">,</span>        parent      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> getRoutes <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据路径匹配路由</span>    <span class="token keyword">return</span> pathList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>path <span class="token operator">=</span><span class="token operator">></span> pathMap<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> match <span class="token punctuation">(</span>    raw<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span>    currentRoute<span class="token operator">?</span><span class="token punctuation">:</span> Route<span class="token punctuation">,</span>    redirectedFrom<span class="token operator">?</span><span class="token punctuation">:</span> Location  <span class="token punctuation">)</span><span class="token punctuation">:</span> Route <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据当前路由格式化路径</span>    <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">normalizeLocation</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> currentRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//路径名称</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> location      <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据路径名称找Route对象</span>      <span class="token keyword">const</span> record <span class="token operator">=</span> nameMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`Route with name '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' does not exist`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//匹配不到Route</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>record<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//获取record非可选的参数</span>      <span class="token keyword">const</span> paramNames <span class="token operator">=</span> record<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>keys        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>key<span class="token punctuation">.</span>optional<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> key<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> location<span class="token punctuation">.</span>params <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        location<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//currentRoute和Record都有，而loaction没有的参数更新到locaion上</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentRoute <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> currentRoute<span class="token punctuation">.</span>params <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> currentRoute<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> location<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> paramNames<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            location<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> currentRoute<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//根据 record.path 和 location.path 计算出 location.path</span>      location<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token function">fillParams</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>path<span class="token punctuation">,</span> location<span class="token punctuation">.</span>params<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`named route "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> location<span class="token punctuation">,</span> redirectedFrom<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//</span>      location<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pathList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> path <span class="token operator">=</span> pathList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">const</span> record <span class="token operator">=</span> pathMap<span class="token punctuation">[</span>path<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>regex<span class="token punctuation">,</span> location<span class="token punctuation">.</span>path<span class="token punctuation">,</span> location<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> location<span class="token punctuation">,</span> redirectedFrom<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// no match</span>    <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//重定位</span>  <span class="token keyword">function</span> redirect <span class="token punctuation">(</span>    record<span class="token punctuation">:</span> RouteRecord<span class="token punctuation">,</span>    location<span class="token punctuation">:</span> Location  <span class="token punctuation">)</span><span class="token punctuation">:</span> Route <span class="token punctuation">{</span>    <span class="token keyword">const</span> originalRedirect <span class="token operator">=</span> record<span class="token punctuation">.</span>redirect    <span class="token keyword">let</span> redirect <span class="token operator">=</span> <span class="token keyword">typeof</span> originalRedirect <span class="token operator">===</span> <span class="token string">'function'</span>      <span class="token operator">?</span> <span class="token function">originalRedirect</span><span class="token punctuation">(</span><span class="token function">createRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> location<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">:</span> originalRedirect    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> redirect <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      redirect <span class="token operator">=</span> <span class="token punctuation">{</span> path<span class="token punctuation">:</span> redirect <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redirect <span class="token operator">||</span> <span class="token keyword">typeof</span> redirect <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`invalid redirect option: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>redirect<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> re<span class="token punctuation">:</span> Object <span class="token operator">=</span> redirect    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> re    <span class="token keyword">let</span> <span class="token punctuation">{</span> query<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> params <span class="token punctuation">}</span> <span class="token operator">=</span> location    query <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'query'</span><span class="token punctuation">)</span> <span class="token operator">?</span> re<span class="token punctuation">.</span>query <span class="token punctuation">:</span> query    hash <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'hash'</span><span class="token punctuation">)</span> <span class="token operator">?</span> re<span class="token punctuation">.</span>hash <span class="token punctuation">:</span> hash    params <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'params'</span><span class="token punctuation">)</span> <span class="token operator">?</span> re<span class="token punctuation">.</span>params <span class="token punctuation">:</span> params    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// resolved named direct</span>      <span class="token keyword">const</span> targetRecord <span class="token operator">=</span> nameMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assert</span><span class="token punctuation">(</span>targetRecord<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`redirect failed: named route "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" not found.`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        _normalized<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        name<span class="token punctuation">,</span>        query<span class="token punctuation">,</span>        hash<span class="token punctuation">,</span>        params      <span class="token punctuation">}</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> location<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1. resolve relative redirect</span>      <span class="token keyword">const</span> rawPath <span class="token operator">=</span> <span class="token function">resolveRecordPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> record<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 2. resolve params</span>      <span class="token keyword">const</span> resolvedPath <span class="token operator">=</span> <span class="token function">fillParams</span><span class="token punctuation">(</span>rawPath<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`redirect route with path "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rawPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 3. rematch with existing query and hash</span>      <span class="token keyword">return</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        _normalized<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span> resolvedPath<span class="token punctuation">,</span>        query<span class="token punctuation">,</span>        hash      <span class="token punctuation">}</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> location<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`invalid redirect option: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>redirect<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> alias <span class="token punctuation">(</span>    record<span class="token punctuation">:</span> RouteRecord<span class="token punctuation">,</span>    location<span class="token punctuation">:</span> Location<span class="token punctuation">,</span>    matchAs<span class="token punctuation">:</span> string  <span class="token punctuation">)</span><span class="token punctuation">:</span> Route <span class="token punctuation">{</span>    <span class="token keyword">const</span> aliasedPath <span class="token operator">=</span> <span class="token function">fillParams</span><span class="token punctuation">(</span>matchAs<span class="token punctuation">,</span> location<span class="token punctuation">.</span>params<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`aliased route with path "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matchAs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>    <span class="token keyword">const</span> aliasedMatch <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      _normalized<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> aliasedPath    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aliasedMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> matched <span class="token operator">=</span> aliasedMatch<span class="token punctuation">.</span>matched      <span class="token keyword">const</span> aliasedRecord <span class="token operator">=</span> matched<span class="token punctuation">[</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      location<span class="token punctuation">.</span>params <span class="token operator">=</span> aliasedMatch<span class="token punctuation">.</span>params      <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span>aliasedRecord<span class="token punctuation">,</span> location<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> _createRoute <span class="token punctuation">(</span>    record<span class="token punctuation">:</span> <span class="token operator">?</span>RouteRecord<span class="token punctuation">,</span>    location<span class="token punctuation">:</span> Location<span class="token punctuation">,</span>    redirectedFrom<span class="token operator">?</span><span class="token punctuation">:</span> Location  <span class="token punctuation">)</span><span class="token punctuation">:</span> Route <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>record <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>redirect<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> redirectedFrom <span class="token operator">||</span> location<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>record <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>matchAs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">alias</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> location<span class="token punctuation">,</span> record<span class="token punctuation">.</span>matchAs<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">createRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> location<span class="token punctuation">,</span> redirectedFrom<span class="token punctuation">,</span> router<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    match<span class="token punctuation">,</span>    addRoute<span class="token punctuation">,</span>    getRoutes<span class="token punctuation">,</span>    addRoutes  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="create-route-map"><a href="#create-route-map" class="headerlink" title="create-route-map"></a>create-route-map</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> createRouteMap <span class="token punctuation">(</span>  routes<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>RouteConfig<span class="token operator">></span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//路由配置表</span>  oldPathList<span class="token operator">?</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span>  oldPathMap<span class="token operator">?</span><span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  oldNameMap<span class="token operator">?</span><span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  parentRoute<span class="token operator">?</span><span class="token punctuation">:</span> RouteRecord<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  pathList<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span>  pathMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  nameMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//旧的相关变量存在即用旧的初始化，没有则创建为空</span>  <span class="token comment" spellcheck="true">// the path list is used to control path matching priority</span>  <span class="token keyword">const</span> pathList<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">=</span> oldPathList <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// $flow-disable-line</span>  <span class="token keyword">const</span> pathMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span> <span class="token operator">=</span> oldPathMap <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// $flow-disable-line</span>  <span class="token keyword">const</span> nameMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span> <span class="token operator">=</span> oldNameMap <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//遍历路由配置对象生成路由记录</span>  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">addRouteRecord</span><span class="token punctuation">(</span>pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">,</span> nameMap<span class="token punctuation">,</span> route<span class="token punctuation">,</span> parentRoute<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//确保*在路由列表最后</span>  <span class="token comment" spellcheck="true">// ensure wildcard routes are always at the end</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> pathList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pathList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pathList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      l<span class="token operator">--</span>      i<span class="token operator">--</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// warn if routes do not include leading slashes</span>    <span class="token keyword">const</span> found <span class="token operator">=</span> pathList    <span class="token comment" spellcheck="true">// check for missing leading slash</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>path <span class="token operator">=</span><span class="token operator">></span> path <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'*'</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> pathNames <span class="token operator">=</span> found<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>path <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`Non-nested routes must include a leading slash character. Fix the following routes: \n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pathNames<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    pathList<span class="token punctuation">,</span>    pathMap<span class="token punctuation">,</span>    nameMap  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：createRouteMap做的事情比较简单，先初始化pathList、pathMap、nameMap，遍历routes添加路由记录，将*的路由添加在路由表末尾</p><h3 id="addRouteRecord"><a href="#addRouteRecord" class="headerlink" title="addRouteRecord"></a><strong>addRouteRecord</strong></h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> addRouteRecord <span class="token punctuation">(</span>  pathList<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span>  pathMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  nameMap<span class="token punctuation">:</span> Dictionary<span class="token operator">&lt;</span>RouteRecord<span class="token operator">></span><span class="token punctuation">,</span>  route<span class="token punctuation">:</span> RouteConfig<span class="token punctuation">,</span>  parent<span class="token operator">?</span><span class="token punctuation">:</span> RouteRecord<span class="token punctuation">,</span>  matchAs<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> path<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> route  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assert</span><span class="token punctuation">(</span>path <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`"path" is required in a route configuration.`</span></span><span class="token punctuation">)</span>    <span class="token function">assert</span><span class="token punctuation">(</span>      <span class="token keyword">typeof</span> route<span class="token punctuation">.</span>component <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">,</span>      <span class="token template-string"><span class="token string">`route config "component" for path: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">String</span><span class="token punctuation">(</span>        path <span class="token operator">||</span> name      <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> cannot be a `</span></span> <span class="token operator">+</span> <span class="token template-string"><span class="token string">`string id. Use an actual component instead.`</span></span>    <span class="token punctuation">)</span>    <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// eslint-disable-next-line no-control-regex</span>      <span class="token operator">!</span><span class="token regex">/[^\u0000-\u007F]+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token template-string"><span class="token string">`Route with path "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" contains unencoded characters, make sure `</span></span> <span class="token operator">+</span>        <span class="token template-string"><span class="token string">`your path is correctly encoded before passing it to the router. Use `</span></span> <span class="token operator">+</span>        <span class="token template-string"><span class="token string">`encodeURI to encode static segments of your path.`</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> pathToRegexpOptions<span class="token punctuation">:</span> PathToRegexpOptions <span class="token operator">=</span>    route<span class="token punctuation">.</span>pathToRegexpOptions <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> normalizedPath <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> pathToRegexpOptions<span class="token punctuation">.</span>strict<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> route<span class="token punctuation">.</span>caseSensitive <span class="token operator">===</span> <span class="token string">'boolean'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pathToRegexpOptions<span class="token punctuation">.</span>sensitive <span class="token operator">=</span> route<span class="token punctuation">.</span>caseSensitive  <span class="token punctuation">}</span>  <span class="token keyword">const</span> record<span class="token punctuation">:</span> RouteRecord <span class="token operator">=</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> normalizedPath<span class="token punctuation">,</span>    regex<span class="token punctuation">:</span> <span class="token function">compileRouteRegex</span><span class="token punctuation">(</span>normalizedPath<span class="token punctuation">,</span> pathToRegexpOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> route<span class="token punctuation">.</span>components <span class="token operator">||</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> route<span class="token punctuation">.</span>component <span class="token punctuation">}</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> route<span class="token punctuation">.</span>alias      <span class="token operator">?</span> <span class="token keyword">typeof</span> route<span class="token punctuation">.</span>alias <span class="token operator">===</span> <span class="token string">'string'</span>        <span class="token operator">?</span> <span class="token punctuation">[</span>route<span class="token punctuation">.</span>alias<span class="token punctuation">]</span>        <span class="token punctuation">:</span> route<span class="token punctuation">.</span>alias      <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    instances<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    enteredCbs<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">,</span>    parent<span class="token punctuation">,</span>    matchAs<span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> route<span class="token punctuation">.</span>redirect<span class="token punctuation">,</span>    beforeEnter<span class="token punctuation">:</span> route<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> route<span class="token punctuation">.</span>meta <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span>      route<span class="token punctuation">.</span>props <span class="token operator">==</span> <span class="token keyword">null</span>        <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">:</span> route<span class="token punctuation">.</span>components          <span class="token operator">?</span> route<span class="token punctuation">.</span>props          <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> route<span class="token punctuation">.</span>props <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Warn if route is named, does not redirect and has a default child route.</span>    <span class="token comment" spellcheck="true">// If users navigate to this route by name, the default child will</span>    <span class="token comment" spellcheck="true">// not be rendered (GH Issue #629)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        route<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span>        <span class="token operator">!</span>route<span class="token punctuation">.</span>redirect <span class="token operator">&amp;&amp;</span>        route<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token regex">/^\/?$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token template-string"><span class="token string">`Named Route '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>route<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' has a default child route. `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`When navigating to this named route (:to="{name: '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>              route<span class="token punctuation">.</span>name            <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}"), `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`the default child route will not be rendered. Remove the name from `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`this route and use the name of the default child route for named `</span></span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`links instead.`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    route<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> childMatchAs <span class="token operator">=</span> matchAs        <span class="token operator">?</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matchAs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>child<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> undefined      <span class="token function">addRouteRecord</span><span class="token punctuation">(</span>pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">,</span> nameMap<span class="token punctuation">,</span> child<span class="token punctuation">,</span> record<span class="token punctuation">,</span> childMatchAs<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pathMap<span class="token punctuation">[</span>record<span class="token punctuation">.</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pathList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>path<span class="token punctuation">)</span>    pathMap<span class="token punctuation">[</span>record<span class="token punctuation">.</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> record  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>alias <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> aliases <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>alias<span class="token punctuation">)</span> <span class="token operator">?</span> route<span class="token punctuation">.</span>alias <span class="token punctuation">:</span> <span class="token punctuation">[</span>route<span class="token punctuation">.</span>alias<span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aliases<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> alias <span class="token operator">=</span> aliases<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> alias <span class="token operator">===</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token template-string"><span class="token string">`Found an alias with the same value as the path: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">". You have to remove that alias. It will be ignored in development.`</span></span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// skip in dev to make it work</span>        <span class="token keyword">continue</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> aliasRoute <span class="token operator">=</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> alias<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> route<span class="token punctuation">.</span>children      <span class="token punctuation">}</span>      <span class="token function">addRouteRecord</span><span class="token punctuation">(</span>        pathList<span class="token punctuation">,</span>        pathMap<span class="token punctuation">,</span>        nameMap<span class="token punctuation">,</span>        aliasRoute<span class="token punctuation">,</span>        parent<span class="token punctuation">,</span>        record<span class="token punctuation">.</span>path <span class="token operator">||</span> <span class="token string">'/'</span> <span class="token comment" spellcheck="true">// matchAs</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nameMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      nameMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> record    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>matchAs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token string">`Duplicate named routes definition: `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`{ name: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">", path: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" }`</span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由3种模式"><a href="#路由3种模式" class="headerlink" title="路由3种模式"></a>路由3种模式</h2><p>在VueRouter的构造函数中可以看到有3种路由模式：history、hash、abstract</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'history'</span><span class="token punctuation">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTML5History</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'hash'</span><span class="token punctuation">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fallback<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'abstract'</span><span class="token punctuation">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstractHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`invalid mode: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="History基类"><a href="#History基类" class="headerlink" title="History基类"></a>History基类</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// the starting route that represents the initial state</span><span class="token keyword">export</span> <span class="token keyword">const</span> START <span class="token operator">=</span> <span class="token function">createRoute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>  router<span class="token punctuation">:</span> Router  base<span class="token punctuation">:</span> string  current<span class="token punctuation">:</span> Route  pending<span class="token punctuation">:</span> <span class="token operator">?</span>Route  cb<span class="token punctuation">:</span> <span class="token punctuation">(</span>r<span class="token punctuation">:</span> Route<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  ready<span class="token punctuation">:</span> boolean  readyCbs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span>  readyErrorCbs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span>  errorCbs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span>  listeners<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span>  cleanupListeners<span class="token punctuation">:</span> Function  <span class="token comment" spellcheck="true">//需要子类实现的方法</span>  <span class="token comment" spellcheck="true">// implemented by sub-classes</span>  <span class="token operator">+</span>go<span class="token punctuation">:</span> <span class="token punctuation">(</span>n<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  <span class="token operator">+</span>push<span class="token punctuation">:</span> <span class="token punctuation">(</span>loc<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  <span class="token operator">+</span>replace<span class="token punctuation">:</span> <span class="token punctuation">(</span>    loc<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span>    onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span>    onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function  <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  <span class="token operator">+</span>ensureURL<span class="token punctuation">:</span> <span class="token punctuation">(</span>push<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  <span class="token operator">+</span>getCurrentLocation<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> string  <span class="token operator">+</span>setupListeners<span class="token punctuation">:</span> Function  constructor <span class="token punctuation">(</span>router<span class="token punctuation">:</span> Router<span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token operator">?</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>router <span class="token operator">=</span> router<span class="token comment" spellcheck="true">//router对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//格式化base,保证base是以'/'开头</span>    <span class="token comment" spellcheck="true">// start with a route object that stands for "nowhere"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> START<span class="token comment" spellcheck="true">//current指向当前的route对象,默认值是START</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">//即将跳转的路由</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>readyCbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>readyErrorCbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>errorCbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//更新路由，其实就是改变this.current</span>  updateRoute <span class="token punctuation">(</span>route<span class="token punctuation">:</span> Route<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> route    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//切换路由的重要方法</span>  transitionTo <span class="token punctuation">(</span>    location<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//目标</span>    onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//切换完成后的回调</span>    onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function <span class="token comment" spellcheck="true">//取消切换</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> route    <span class="token comment" spellcheck="true">// catch redirect option https://github.com/vuejs/vue-router/issues/3201</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//根据this.current当前路径和目标location去匹配目标路径</span>      route <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>errorCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">cb</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Exception should still be thrown</span>      <span class="token keyword">throw</span> e    <span class="token punctuation">}</span>        <span class="token keyword">const</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current    <span class="token comment" spellcheck="true">//确定切换</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirmTransition</span><span class="token punctuation">(</span>      route<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//改变current</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>afterHooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>hook <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          hook <span class="token operator">&amp;&amp;</span> <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> prev<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// fire ready cbs once</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>readyCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">cb</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onAbort<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">onAbort</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Initial redirection should not mark the history as ready yet</span>          <span class="token comment" spellcheck="true">// because it's triggered by the redirection instead</span>          <span class="token comment" spellcheck="true">// https://github.com/vuejs/vue-router/issues/3225</span>          <span class="token comment" spellcheck="true">// https://github.com/vuejs/vue-router/issues/3331</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> NavigationFailureType<span class="token punctuation">.</span>redirected<span class="token punctuation">)</span> <span class="token operator">||</span> prev <span class="token operator">!==</span> START<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>readyErrorCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  confirmTransition <span class="token punctuation">(</span>route<span class="token punctuation">:</span> Route<span class="token punctuation">,</span> onComplete<span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current    <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> route    <span class="token keyword">const</span> abort <span class="token operator">=</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// changed after adding errors with</span>      <span class="token comment" spellcheck="true">// https://github.com/vuejs/vue-router/pull/3047 before that change,</span>      <span class="token comment" spellcheck="true">// redirect and aborted navigation would produce an err == null</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorCbs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>errorCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">warn</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'uncaught error during route navigation:'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      onAbort <span class="token operator">&amp;&amp;</span> <span class="token function">onAbort</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> lastRouteIndex <span class="token operator">=</span> route<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">const</span> lastCurrentIndex <span class="token operator">=</span> current<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token function">isSameRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token comment" spellcheck="true">// in the case the route map has been dynamically appended to</span>      lastRouteIndex <span class="token operator">===</span> lastCurrentIndex <span class="token operator">&amp;&amp;</span>      route<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>lastRouteIndex<span class="token punctuation">]</span> <span class="token operator">===</span> current<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>lastCurrentIndex<span class="token punctuation">]</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">,</span> current<span class="token punctuation">,</span> route<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationDuplicatedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> updated<span class="token punctuation">,</span> deactivated<span class="token punctuation">,</span> activated <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">resolveQueue</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>matched<span class="token punctuation">,</span>      route<span class="token punctuation">.</span>matched    <span class="token punctuation">)</span>    <span class="token keyword">const</span> queue<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>NavigationGuard<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// in-component leave guards</span>      <span class="token function">extractLeaveGuards</span><span class="token punctuation">(</span>deactivated<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// global before hooks</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>beforeHooks<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// in-component update hooks</span>      <span class="token function">extractUpdateHooks</span><span class="token punctuation">(</span>updated<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// in-config enter guards</span>      activated<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// async components</span>      <span class="token function">resolveAsyncComponents</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">:</span> NavigationGuard<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">!==</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationCancelledError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token punctuation">(</span>to<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// next(false) -> abort navigation, ensure current URL</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationAbortedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isError</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token function">abort</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">||</span>            <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token keyword">typeof</span> to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// next('/') or next({ path: '/' }) -> redirect</span>            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationRedirectedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// confirm transition and pass on the value</span>            <span class="token function">next</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">abort</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// wait until async components are resolved before</span>      <span class="token comment" spellcheck="true">// extracting in-component enter guards</span>      <span class="token keyword">const</span> enterGuards <span class="token operator">=</span> <span class="token function">extractEnterGuards</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span>      <span class="token keyword">const</span> queue <span class="token operator">=</span> enterGuards<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>resolveHooks<span class="token punctuation">)</span>      <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">!==</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationCancelledError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">handleRouteEntered</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<code>History</code>类是3中路由模式的基类，初始化时格式化了<code>base</code>，初始化当前路由指向<code>START</code>，跳转路由为<code>null</code>，当切换路由时，执行的是<code>tansitionTo</code>方法，切换路由就是先调用<code>this.router.match</code>匹配到目标路由，然后改变当前的路由<code>this.current</code>，实现路由的切换</p><h3 id="HTML5History类"><a href="#HTML5History类" class="headerlink" title="HTML5History类"></a>HTML5History类</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//继承History类</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HTML5History</span> <span class="token keyword">extends</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>  _startLocation<span class="token punctuation">:</span> string  constructor <span class="token punctuation">(</span>router<span class="token punctuation">:</span> Router<span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token operator">?</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化父类</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> base<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//获取初始化location</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_startLocation <span class="token operator">=</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">)</span>  <span class="token punctuation">}</span>    setupListeners <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//监听任务队列，如果有popState监听了就返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>router    <span class="token keyword">const</span> expectScroll <span class="token operator">=</span> router<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scrollBehavior    <span class="token comment" spellcheck="true">//检测是否需要支持scroll</span>    <span class="token keyword">const</span> supportsScroll <span class="token operator">=</span> supportsPushState <span class="token operator">&amp;&amp;</span> expectScroll    <span class="token comment" spellcheck="true">//支持scroll，初始化scroll相关逻辑</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">setupScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//popstate事件</span>    <span class="token keyword">const</span> handleRoutingEvent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取当前路由</span>      <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current           <span class="token comment" spellcheck="true">// Avoiding first `popstate` event dispatched in some browsers but first</span>      <span class="token comment" spellcheck="true">// history route not updated since async guard at the same time.</span>      <span class="token comment" spellcheck="true">//获取Location</span>      <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//某些浏览器，会在打开页面时触发一次popstate</span>      <span class="token comment" spellcheck="true">// 此时如果初始路由是异步路由,就会出现`popstate`先触发,初始路由后解析完成，进而导致route未更新</span>      <span class="token comment" spellcheck="true">// 所以需要避免，如果路径是初始值并且初始location值时候需要返回</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> START <span class="token operator">&amp;&amp;</span> location <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_startLocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//路由地址变化，跳转</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">handleScroll</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> route<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//监听popstate事件</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> handleRoutingEvent<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//当路由切换时，就是触发popstate，push进事件队列中</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> handleRoutingEvent<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  go <span class="token punctuation">(</span>n<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//日常常用this.$router.push就是调用这里的push</span>  push <span class="token punctuation">(</span>location<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前路由</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> current<span class="token punctuation">:</span> fromRoute <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment" spellcheck="true">//调用History类的方法，实现跳转，</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">pushState</span><span class="token punctuation">(</span><span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">+</span> route<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">,</span> route<span class="token punctuation">,</span> fromRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> onAbort<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<code>HTML5History</code>类继承于<code>History</code>类，在构造函数中先调用父类构造函数，之后再检查是否支持滚动行为，实现相关逻辑，监听路由切换<code>popstate</code>事件，真正实现路由的跳转调用的还是调用父类<code>transitionTo</code>方法。</p><blockquote><p>在初始化popstate事件监听时，因为某些浏览器打开页面会触发一次popstate，此时如果路由组件是异步的，就会出现popstate发生了，但是异步组件还没解析完成，导致route没有更新</p></blockquote><h3 id="HashHistory"><a href="#HashHistory" class="headerlink" title="HashHistory"></a>HashHistory</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//继承父类History</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HashHistory</span> <span class="token keyword">extends</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>router<span class="token punctuation">:</span> Router<span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token operator">?</span>string<span class="token punctuation">,</span> fallback<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用父类构造函数</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> base<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// check history fallback deeplinking</span>    <span class="token comment" spellcheck="true">// fallback只有在指明了mode为history，但是浏览器又不支持popstate，用户手动指明了fallback为true时，才为true，其它情况为false</span>    <span class="token comment" spellcheck="true">// 如果需要回退，则将url换为hash模式(/#开头)</span>    <span class="token comment" spellcheck="true">// this.base来自父类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fallback <span class="token operator">&amp;&amp;</span> <span class="token function">checkFallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//确保url是'/'开头</span>    <span class="token function">ensureSlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// this is delayed until the app mounts</span>  <span class="token comment" spellcheck="true">// to avoid the hashchange listener being fired too early</span>  setupListeners <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>router    <span class="token keyword">const</span> expectScroll <span class="token operator">=</span> router<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scrollBehavior    <span class="token keyword">const</span> supportsScroll <span class="token operator">=</span> supportsPushState <span class="token operator">&amp;&amp;</span> expectScroll    <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">setupScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> handleRoutingEvent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ensureSlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">,</span> route<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsPushState<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">replaceHash</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据是否支持pushstate来决定监听popstate还是hashchange事件</span>    <span class="token keyword">const</span> eventType <span class="token operator">=</span> supportsPushState <span class="token operator">?</span> <span class="token string">'popstate'</span> <span class="token punctuation">:</span> <span class="token string">'hashchange'</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>      eventType<span class="token punctuation">,</span>      handleRoutingEvent    <span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handleRoutingEvent<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  push <span class="token punctuation">(</span>location<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> current<span class="token punctuation">:</span> fromRoute <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>      location<span class="token punctuation">,</span>      route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">pushHash</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span>        <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">,</span> route<span class="token punctuation">,</span> fromRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      onAbort    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 确保url是以/开头</span><span class="token keyword">function</span> ensureSlash <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> boolean <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//获取路径</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//如果不是以'/'开头，</span>  <span class="token function">replaceHash</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取'#'后面的地址内容</span><span class="token comment" spellcheck="true">//由于火狐浏览器一些兼容性的问题，不能直接使用window.location.hash来获取hash部分的path，这里VueRouter使用了原生的字符串截取的方法获取hash部分的path</span><span class="token keyword">export</span> <span class="token keyword">function</span> getHash <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// We can't use window.location.hash here because it's not</span>  <span class="token comment" spellcheck="true">// consistent across browsers - Firefox will pre-decode it!</span>  <span class="token keyword">let</span> href <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href  <span class="token keyword">const</span> index <span class="token operator">=</span> href<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// empty path</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>  href <span class="token operator">=</span> href<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> href<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据是否支持popstate，如果兼容的话就会调用getUrl传入'/'并调用replaceState将getUrl的结果传入replaceState的参数中。</span><span class="token comment" spellcheck="true">//不支持则用 window.location.replace</span><span class="token keyword">function</span> replaceHash <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsPushState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在地址里加上'#'</span><span class="token keyword">function</span> getUrl <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> href <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href  <span class="token keyword">const</span> i <span class="token operator">=</span> href<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> base <span class="token operator">=</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> href<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">:</span> href  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>base<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//检查回退，将url转换成hash模式</span><span class="token keyword">function</span> checkFallback <span class="token punctuation">(</span>base<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">getLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^\/#/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">cleanPath</span><span class="token punctuation">(</span>base <span class="token operator">+</span> <span class="token string">'/#'</span> <span class="token operator">+</span> location<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：HashHistory大体方法都和HTML5History的类似，在构造函数初始化时有些不同</p><ol><li>检查了fallback,看是否需要回退，传入的fallback只有在用户设置了history且又不支持pushState并且启用了回退时才为true,，此时，需要将history模式的url替换成hash模式，即添加上#，这个逻辑是由checkFallback实现的</li><li>如果没有fallback，则直接调用ensureSlash,确保url是以’&#x2F;‘开头</li></ol><h3 id="AbstractHistory类"><a href="#AbstractHistory类" class="headerlink" title="AbstractHistory类"></a>AbstractHistory类</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AbstractHistory</span> <span class="token keyword">extends</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>  index<span class="token punctuation">:</span> number  stack<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Route<span class="token operator">></span>  constructor <span class="token punctuation">(</span>router<span class="token punctuation">:</span> Router<span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token operator">?</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用父类构造函数</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> base<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用栈来存route</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//指向当前路由</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">}</span>  push <span class="token punctuation">(</span>location<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>      location<span class="token punctuation">,</span>      route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//拼接新路由</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//更新指针</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span>        onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      onAbort    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  replace <span class="token punctuation">(</span>location<span class="token punctuation">:</span> RawLocation<span class="token punctuation">,</span> onComplete<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>      location<span class="token punctuation">,</span>      route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//替换路由</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      onAbort    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  go <span class="token punctuation">(</span>n<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过index指针上移下移来跳转</span>    <span class="token keyword">const</span> targetIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">+</span> n    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> targetIndex <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span>targetIndex<span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirmTransition</span><span class="token punctuation">(</span>      route<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> targetIndex        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>afterHooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>hook <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          hook <span class="token operator">&amp;&amp;</span> <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> prev<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> NavigationFailureType<span class="token punctuation">.</span>duplicated<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> targetIndex        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  getCurrentLocation <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前就是栈顶指针</span>    <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> current <span class="token operator">?</span> current<span class="token punctuation">.</span>fullPath <span class="token punctuation">:</span> <span class="token string">'/'</span>  <span class="token punctuation">}</span>  ensureURL <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// noop</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<code>AbstractHistory</code>模式跟上面两种模式的实现不太一样，是通过一个栈，和一个指向当前路由的指针index来实现各种操作</p><h2 id="router-view和router-link"><a href="#router-view和router-link" class="headerlink" title="router-view和router-link"></a>router-view和router-link</h2><h3 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'RouterView'</span><span class="token punctuation">,</span>  functional<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//函数式组件</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'default'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  render <span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// used by devtools to display a router-view badge</span>    <span class="token comment" spellcheck="true">//标记为routerView组件</span>    data<span class="token punctuation">.</span>routerView <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// directly use parent context's createElement() function</span>    <span class="token comment" spellcheck="true">// so that components rendered by router-view can resolve named slots</span>    <span class="token comment" spellcheck="true">//用于渲染组件</span>    <span class="token keyword">const</span> h <span class="token operator">=</span> parent<span class="token punctuation">.</span>$createElement    <span class="token keyword">const</span> name <span class="token operator">=</span> props<span class="token punctuation">.</span>name    <span class="token keyword">const</span> route <span class="token operator">=</span> parent<span class="token punctuation">.</span>$route<span class="token comment" spellcheck="true">//当前路径</span>    <span class="token comment" spellcheck="true">//获取routerView缓存</span>    <span class="token keyword">const</span> cache <span class="token operator">=</span> parent<span class="token punctuation">.</span>_routerViewCache <span class="token operator">||</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>_routerViewCache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// determine current view depth, also check to see if the tree</span>    <span class="token comment" spellcheck="true">// has been toggled inactive but kept-alive.</span>    <span class="token comment" spellcheck="true">//深度，解决嵌套问题</span>    <span class="token keyword">let</span> depth <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">let</span> inactive <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//从当前组件一直遍历到最外层的根组件</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>_routerRoot <span class="token operator">!==</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> vnodeData <span class="token operator">=</span> parent<span class="token punctuation">.</span>$vnode <span class="token operator">?</span> parent<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>data <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//有routerView属性的深度加1</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vnodeData<span class="token punctuation">.</span>routerView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        depth<span class="token operator">++</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//keepAlive是否激活</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vnodeData<span class="token punctuation">.</span>keepAlive <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>_directInactive <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>_inactive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        inactive <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>      parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent    <span class="token punctuation">}</span>    data<span class="token punctuation">.</span>routerViewDepth <span class="token operator">=</span> depth    <span class="token comment" spellcheck="true">// render previous view if the tree is inactive and kept-alive</span>    <span class="token comment" spellcheck="true">//当前组件被keepAlive缓存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inactive<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取缓存数据和组件</span>      <span class="token keyword">const</span> cachedData <span class="token operator">=</span> cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span>      <span class="token keyword">const</span> cachedComponent <span class="token operator">=</span> cachedData <span class="token operator">&amp;&amp;</span> cachedData<span class="token punctuation">.</span>component      <span class="token comment" spellcheck="true">//如果有缓存组件就渲染缓存组件</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// #2301</span>        <span class="token comment" spellcheck="true">// pass props</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedData<span class="token punctuation">.</span>configProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">fillPropsinData</span><span class="token punctuation">(</span>cachedComponent<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cachedData<span class="token punctuation">.</span>route<span class="token punctuation">,</span> cachedData<span class="token punctuation">.</span>configProps<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>cachedComponent<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// render previous empty view</span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//从路由的matched列表中获取当前的record（传入路由实例的routes数组，包含name, components, redirect, path等属性）</span>    <span class="token keyword">const</span> matched <span class="token operator">=</span> route<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>depth<span class="token punctuation">]</span>    <span class="token keyword">const</span> component <span class="token operator">=</span> matched <span class="token operator">&amp;&amp;</span> matched<span class="token punctuation">.</span>components<span class="token punctuation">[</span>name<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// render empty node if no matched route or no config component</span>    <span class="token comment" spellcheck="true">//找不到组件和matched就清空缓存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matched <span class="token operator">||</span> <span class="token operator">!</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// cache component</span>    <span class="token comment" spellcheck="true">//缓存组件</span>    cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> component <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// attach instance registration hook</span>    <span class="token comment" spellcheck="true">// this will be called in the instance's injected lifecycle hooks</span>    data<span class="token punctuation">.</span>registerRouteInstance <span class="token operator">=</span> <span class="token punctuation">(</span>vm<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// val could be undefined for unregistration</span>      <span class="token keyword">const</span> current <span class="token operator">=</span> matched<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span>val <span class="token operator">&amp;&amp;</span> current <span class="token operator">!==</span> vm<span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token punctuation">(</span><span class="token operator">!</span>val <span class="token operator">&amp;&amp;</span> current <span class="token operator">===</span> vm<span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        matched<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> val      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// also register instance in prepatch hook</span>    <span class="token comment" spellcheck="true">// in case the same component instance is reused across different routes</span>    <span class="token punctuation">;</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>hook <span class="token operator">||</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>hook <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prepatch <span class="token operator">=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      matched<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// register instance in init hook</span>    <span class="token comment" spellcheck="true">// in case kept-alive component be actived when routes changed</span>    data<span class="token punctuation">.</span>hook<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>keepAlive <span class="token operator">&amp;&amp;</span>        vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">&amp;&amp;</span>        vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">!==</span> matched<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        matched<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// if the route transition has already been confirmed then we weren't</span>      <span class="token comment" spellcheck="true">// able to call the cbs during confirmation as the component was not</span>      <span class="token comment" spellcheck="true">// registered yet, so we call it here.</span>      <span class="token function">handleRouteEntered</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> configProps <span class="token operator">=</span> matched<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> matched<span class="token punctuation">.</span>props<span class="token punctuation">[</span>name<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// save route and configProps in cache</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">extend</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        route<span class="token punctuation">,</span>        configProps      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">fillPropsinData</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> data<span class="token punctuation">,</span> route<span class="token punctuation">,</span> configProps<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//渲染组件</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>先将当前组件标记为routerView组件，获取当前组件的路由，要渲染组件的名称等等</li><li>从当前组件一直向外遍历到根组件，记录深度和是否被keepAlive缓存</li><li>如果被keepAlive缓存则直接渲染缓存的数据</li><li>否则从路由的matched列表获取相应的数据，然后再进行渲染</li></ul><h3 id="Router-Link"><a href="#Router-Link" class="headerlink" title="Router-Link"></a>Router-Link</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'RouterLink'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    to<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> toTypes<span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    tag<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'a'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    custom<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>    exact<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>    exactPath<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>    append<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>    replace<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>    activeClass<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    exactActiveClass<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    ariaCurrentValue<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'page'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    event<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> eventTypes<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'click'</span> <span class="token comment" spellcheck="true">//默认是click事件触发跳转</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  render <span class="token punctuation">(</span>h<span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取router实例和当前route</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$router    <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route    <span class="token keyword">const</span> <span class="token punctuation">{</span> location<span class="token punctuation">,</span> route<span class="token punctuation">,</span> href <span class="token punctuation">}</span> <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span>      current<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>append    <span class="token punctuation">)</span>    <span class="token operator">...</span>    <span class="token comment" spellcheck="true">//事件回调</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">guardEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//增加或者替换历史记录</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>          router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> noop<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> noop<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> on <span class="token operator">=</span> <span class="token punctuation">{</span> click<span class="token punctuation">:</span> guardEvent <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//guardEvent 返回true或undefined</span>    <span class="token comment" spellcheck="true">//event是数组则依次触发事件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        on<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> handler      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      on<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> handler    <span class="token punctuation">}</span>   <span class="token operator">...</span>    <span class="token comment" spellcheck="true">//处理包裹标签，默认是a</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data<span class="token punctuation">.</span>on <span class="token operator">=</span> on      data<span class="token punctuation">.</span>attrs <span class="token operator">=</span> <span class="token punctuation">{</span> href<span class="token punctuation">,</span> <span class="token string">'aria-current'</span><span class="token punctuation">:</span> ariaCurrentValue <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 查找子标签中第一个A标签，并绑定回调和href属性到这个A标签上</span>      <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">findAnchor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// in case the &lt;a> is a static node</span>        a<span class="token punctuation">.</span>isStatic <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">const</span> aData <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        aData<span class="token punctuation">.</span>on <span class="token operator">=</span> aData<span class="token punctuation">.</span>on <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// transform existing events in both objects into arrays so we can push later</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> event <span class="token keyword">in</span> aData<span class="token punctuation">.</span>on<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> handler <span class="token operator">=</span> aData<span class="token punctuation">.</span>on<span class="token punctuation">[</span>event<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">in</span> on<span class="token punctuation">)</span> <span class="token punctuation">{</span>            aData<span class="token punctuation">.</span>on<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">?</span> handler <span class="token punctuation">:</span> <span class="token punctuation">[</span>handler<span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// append new listeners for router-link</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> event <span class="token keyword">in</span> on<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">in</span> aData<span class="token punctuation">.</span>on<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// on[event] is always a function</span>            aData<span class="token punctuation">.</span>on<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>on<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            aData<span class="token punctuation">.</span>on<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> handler          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> aAttrs <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">.</span>attrs <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>data<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token punctuation">)</span>        aAttrs<span class="token punctuation">.</span>href <span class="token operator">=</span> href        aAttrs<span class="token punctuation">[</span><span class="token string">'aria-current'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ariaCurrentValue      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// doesn't have &lt;a> child, apply listener to self</span>        <span class="token comment" spellcheck="true">//没有a标签，事件回调绑定到自身</span>        data<span class="token punctuation">.</span>on <span class="token operator">=</span> on      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> guardEvent <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// don't redirect with control keys 控制键不处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>metaKey <span class="token operator">||</span> e<span class="token punctuation">.</span>altKey <span class="token operator">||</span> e<span class="token punctuation">.</span>ctrlKey <span class="token operator">||</span> e<span class="token punctuation">.</span>shiftKey<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment" spellcheck="true">// don't redirect when preventDefault called 已经禁用默认，不处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>defaultPrevented<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment" spellcheck="true">// don't redirect on right click 右击不处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>button <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>button <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment" spellcheck="true">// don't redirect if `target="_blank"` _black不处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>getAttribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/\b_blank\b/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// this may be a Weex event which doesn't have this method</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<br>router-link的实现其实就是router.push或者router.replace，默认的标签是a标签，如果没有a标签回调函数就绑定到组件自身</p>]]></content>
      
      
      <categories>
          
          <category> vue-router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-router </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2实例方法和全局API</title>
      <link href="/2022/09/11/vue2%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E5%92%8C%E5%85%A8%E5%B1%80API/"/>
      <url>/2022/09/11/vue2%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E5%92%8C%E5%85%A8%E5%B1%80API/</url>
      
        <content type="html"><![CDATA[<h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p><strong>实例方法是在</strong><code>Vue</code><strong>的原型</strong><code>Vue.prototype</code><strong>上挂载方法</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> initMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./init'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> stateMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./state'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> renderMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./render'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> eventsMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./events'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> lifecycleMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./lifecycle'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> warn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">function</span> Vue <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Vue is a constructor and should be called with the `new` keyword'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">stateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">eventsMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">lifecycleMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">renderMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据相关的"><a href="#数据相关的" class="headerlink" title="数据相关的"></a>数据相关的</h3><p>与数据相关的实例方法主要有3个<code>vm.$watch、vm.$set、vm.$delete</code>,它们是在<code>stateMixin</code>中挂载到<code>Vue</code>原型上的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">{</span>  <span class="token keyword">set</span><span class="token punctuation">,</span>  del<span class="token punctuation">}</span><span class="token keyword">from</span> <span class="token string">'../observer/index'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">stateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token operator">=</span><span class="token keyword">set</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$<span class="token keyword">delete</span><span class="token operator">=</span>del  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">,</span>cb<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-watch"><a href="#vm-watch" class="headerlink" title="vm.$watch"></a>vm.$watch</h4><p><strong>用法：</strong>用于观察一个表达式或computed函数在Vue.js实例上的变化。回调函数调用时，会从参数得到新数据和旧数据。<br><strong>参数：</strong><code>&#123;string|Function&#125;expOrFn</code><br>           <code>&#123;Function|Object&#125;callback</code><br>           <code>&#123;Object&#125;[options] (&#123;boolean&#125;deep   &#123;boolean&#125;immediate )</code><br><strong>返回值：</strong><code>&#123;Function&#125;unwatch</code><br><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a.b.c'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> unwatch<span class="token operator">=</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//取消观察</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>callback<span class="token punctuation">,</span><span class="token punctuation">{</span>   deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//观察对象内部值的变化</span>  immediate<span class="token punctuation">:</span><span class="token boolean">true</span> <span class="token comment" spellcheck="true">//将表达式的当前值触发回调</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong><br>选项deep的原理主要是在Watcher的代码里实现，就是除了触发当前被监听的数据收集依赖之外，还要把这个值在内的所有子值都触发一遍收集依赖逻辑。immediate原理就是把回调函数触发一遍</p><pre class="line-numbers language-javascript"><code class="language-javascript"> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>    cb<span class="token punctuation">:</span> any<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> Object  <span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//immediate为true,cb立刻执行一次</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token string">`callback for immediate watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>watcher<span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span>      <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token punctuation">[</span>watcher<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//unwatch就是调用Watcher的teardown方法，将Watcher从它的Dep列表中移除</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> unwatchFn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-set"><a href="#vm-set" class="headerlink" title="vm.$set"></a>vm.$set</h4><p><strong>用法：</strong>在object上设置一个属性，如果object是响应式，Vue.js会保证属性被创建后也是响应式，并且触发视图更新。（这个方法主要是用来避开Vue.js不能侦测属性被添加的限制）<br><strong>参数：</strong><code>&#123;Object | Array&#125; target</code><br>          <code> &#123;string | number&#125; key</code><br>          <code> &#123;any&#125; value</code><br><strong>返回值：</strong><code>&#123;Function &#125;unwatch</code><br><strong>原理：</strong><br>原理主要就是分情况讨论，也没有很难懂~~</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> Object<span class="token punctuation">,</span> key<span class="token punctuation">:</span> any<span class="token punctuation">,</span> val<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> any <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Cannot set reactive property on undefined, null, or primitive value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//如果target是一个数组而且key是一个合理的索引值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果传递的索引值大于数组的length就让target的length为key</span>    target<span class="token punctuation">.</span>length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//使用splice方法把val设置到target上，这样数组拦截器会侦测到target发生了变化，会自动把新增</span>    <span class="token comment" spellcheck="true">//的val转换为响应式</span>    target<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//key已经存在于target中，直接修改就好了</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> target <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>__ob__  <span class="token comment" spellcheck="true">//target不能是Vue.js实例或Vue.js实例的根数据对象</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>_isVue <span class="token operator">||</span> <span class="token punctuation">(</span>ob <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">.</span>vmCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token string">'Avoid adding reactive properties to a Vue instance or its root $data '</span> <span class="token operator">+</span>      <span class="token string">'at runtime - declare it upfront in the data option.'</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//没有__ob__，数据不是响应式，只需直接设置即可</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//如果以上条件都不满足，说明用户是在响应式数据上新增一个属性，所以要用defineReactive将新属性</span>  <span class="token comment" spellcheck="true">//转换成getter/setter形式</span>  <span class="token function">defineReactive</span><span class="token punctuation">(</span>ob<span class="token punctuation">.</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> val<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-delete"><a href="#vm-delete" class="headerlink" title="vm.$delete"></a>vm.$delete</h4><p>用法：对象删除一个属性或者数组删除一个元素，它删除后会自动想依赖发送消息<br>原理：<br>原理主要就是分情况讨论，也没有很难懂~~</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> del <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> Object<span class="token punctuation">,</span> key<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Cannot delete reactive property on undefined, null, or primitive value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//处理数组情况，splice删除元素，数组拦截器会自动向依赖发送通知</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>__ob__  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>_isVue <span class="token operator">||</span> <span class="token punctuation">(</span>ob <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">.</span>vmCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token string">'Avoid deleting properties on a Vue instance or its root $data '</span> <span class="token operator">+</span>      <span class="token string">'- just set it to null.'</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//如果key不是target自身的属性，直接return</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">delete</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//非响应式直接返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//响应式发通知</span>  ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件相关的"><a href="#事件相关的" class="headerlink" title="事件相关的"></a>事件相关的</h3><p>目录src&#x2F;score&#x2F;instance&#x2F;events.js<br>与事件相关的实例方法主要有4个<code>vm.$on、vm.$off、vm.$once、vm.$emit</code>,它们是在<code>eventsMixin</code>中挂载到<code>Vue</code>原型上的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> eventsMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$on <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$once <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$off <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$emit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-on-event-callback"><a href="#vm-on-event-callback" class="headerlink" title="vm.$on(event,callback)"></a>vm.$on(event,callback)</h4><p>用法：主要用于监听当前实例上的自定义事件，事件可以由<code>vm.$emit</code>触发。回调函数会接收所有传入事件所触发的函数的额外参数<br>参数：<code>&#123;string|Array&lt;string&gt;&#125;event</code><br>           <code>&#123;Function&#125;callback</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'try'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//触发       </span>vm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'try'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>源码：在注册事件的时候将回调函数收集起来，在触发事件的时候将收集起来的回调函数依次调用</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$on <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> string <span class="token operator">|</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vm._events是一个对象，用来存储事件。当event不为数组时，直接通过vm._events中取出事件列表<br>vm._events在<code>new Vue()</code>的时候，调用<code>this._init</code>方法初始化创建的，用来存储事件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> initEvents <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这句创建vm._events</span>  vm<span class="token punctuation">.</span>_events <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  vm<span class="token punctuation">.</span>_hasHookEvent <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// init parent attached events</span>  <span class="token keyword">const</span> listeners <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_parentListeners  <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">updateComponentListeners</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-off-event-callback"><a href="#vm-off-event-callback" class="headerlink" title="vm.$off([event,callback])"></a>vm.$off([event,callback])</h4><p>用法：移除自定义事件监听器（若无提供参数，则移除所有事件监听器；若只提供了事件，则移除该事件的监听器；若同时提供了事件和回调，则只移除这个回调的监听器）<br>参数：<code>&#123;string|Array&lt;string&gt;&#125;event</code><br>           <code>&#123;Function&#125;callback</code><br>源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$off <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> fn<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment" spellcheck="true">// all 移除所有事件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_events <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// array of events 多个事件，遍历取消监听</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// specific event 没有找到事件的监听器，直接退出</span>    <span class="token keyword">const</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//只有事件没有回调，直接置为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// specific handler 有回调则移除对应的回调函数</span>    <span class="token comment" spellcheck="true">/*     这里还有一个重要的问题是，遍历回调函数是从后向前遍历的，因为从前向后遍历的话会导致数组     向前移动，而i并没有回退，会跳过一个元素    */</span>    <span class="token keyword">let</span> cb    <span class="token keyword">let</span> i <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      cb <span class="token operator">=</span> cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">===</span> fn <span class="token operator">||</span> cb<span class="token punctuation">.</span>fn <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cbs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="vm-emit（event-…args"><a href="#vm-emit（event-…args" class="headerlink" title="vm.$emit（event,[…args])"></a>vm.$emit（event,[…args])</h4><p>用法：用于触发当前实例上的事件，附加的参数都会传给监听器回调<br>参数：<code>&#123;string&#125;event</code><br>           <code>[...args]</code><br>源码：实现原理就是从vm._events中取出事件监听器的回调函数列表赋值给cbs，若列表存在即调用每个监听器回调并将参数传给监听器回调</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//invokeWithErrorHandling(cbs[i], vm, args, vm, info)后面补充。。。。。</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$emit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> lowerCaseEvent <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerCaseEvent <span class="token operator">!==</span> event <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>lowerCaseEvent<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">tip</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Event "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lowerCaseEvent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is emitted in component `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">formatComponentName</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> but the handler is registered for "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">". `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`Note that HTML attributes are case-insensitive and you cannot use `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`v-on to listen to camelCase events when using in-DOM templates. `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`You should probably use "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">hyphenate</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" instead of "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">".`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cbs <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">toArray</span><span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">:</span> cbs      <span class="token comment" spellcheck="true">/*      toArray是将类似数组数据转换成真正数组，第二个参数是起始位置，即args是一个除了第一个      参数之外的所有参数      */</span>      <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token string">`event handler for "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> args<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-once-event-callback"><a href="#vm-once-event-callback" class="headerlink" title="vm.$once(event,callback)"></a>vm.$once(event,callback)</h4><p>用法：监听一个自定义事件，但是只触发一次，在第一次触发之后移除监听器<br>参数：<code>&#123;string|Array&lt;string&gt;&#125;event</code><br>          <code>&#123;Function&#125;callback</code><br>源码：<br>实现的过程是首先将函数on注册到事件中。当事件被触发时，会执行函数on，on函数里会使用vm.$off移除自定义事件，然后再通过apply执行函数fn，并将参数传递给函数fn</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$once <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> string<span class="token punctuation">,</span> fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">function</span> on <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    on<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn    vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有个问题是注册的函数是on函数，但是用户触发的函数是fn，在用vm.$off移除事件监听器时会失效。源码上通过<code>on.fn=fn</code>来解决，<code>vm.$off</code>源码上用 <code> if (cb === fn || cb.fn === fn) &#123;  &#125;</code>来判断</p><h3 id="生命周期相关的"><a href="#生命周期相关的" class="headerlink" title="生命周期相关的"></a>生命周期相关的</h3><p>与生命周期相关的实例方法主要有4个<code>vm.$mount、vm.$forceUpdate、vm.$nextTick、vm.$destroy</code>,<code>vm.$forceUpdate</code>和<code>vm.$destroy</code>是在<code>lifecycleMixin</code>中挂载到<code>Vue</code>原型上的，<code>vm.$nextTick</code>是在<code>renderMixin</code>中挂载到<code>Vue</code>原型上的，<code>vm.$mount</code>是在跨平台的代码中挂载到<code>Vue</code>原型上的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 目录 src/score/instance/lifecycle.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> lifecycleMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$forceUpdate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token punctuation">}</span>     Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$destroy <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 目录 src/score/instance/render.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> renderMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$nextTick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行时版(以web平台为例) src/platforms/web/runtime/index.js</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//完整版(以web平台为例) src/platforms/web/entry-runtime-with-compiler.js</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h4 id="vm-forceUpdate"><a href="#vm-forceUpdate" class="headerlink" title="vm.forceUpdate()"></a>vm.forceUpdate()</h4><p>作用：迫使Vue.js实例重新渲染（注意它仅仅影响实例本身以及插入插槽内容的子组件，而不是所有子组件）<br>源码：实现该功能只需手动执行一下当前实例watcher的update()方法。因为Vue.js的每一个实例都有一个watcher（Vue.js的一个实例其实就相当于一个组件，而当状态发生变化的时候，会通知到组件级别，然后在组件内部使用虚拟DOM进行重新渲染）</p><pre class="line-numbers language-javascript"><code class="language-javascript">  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$forceUpdate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-destroy"><a href="#vm-destroy" class="headerlink" title="vm.destroy"></a>vm.destroy</h4><p>作用：完全销毁一个实例，它会清理改实例与其他实例的连接，并解绑其全部指令及生命周期，同时会触发beforeDestory和destroyed的钩子函数<br>源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$destroy <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>   <span class="token comment" spellcheck="true">//判断实例是否正在销毁，因为销毁只能销毁一次，不能反复</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isBeingDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeDestroy'</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">=</span> <span class="token boolean">true</span>   <span class="token comment" spellcheck="true">/*     为什么只从一个父组件中移除？     因为虽然一个组件可以被多个父组件引入，当时其实子组件在不同的父组件中是不同的Vue.js实例，     所以一个子组件实例其实只有一个父组件   */</span>    <span class="token comment" spellcheck="true">// remove self from parent  清除当前组件和父组件之间的连接</span>    <span class="token keyword">const</span> parent <span class="token operator">=</span> vm<span class="token punctuation">.</span>$parent    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>parent<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>abstract<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">remove</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>$children<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// teardown watchers </span>    <span class="token comment" spellcheck="true">/*      从watcher监听的所有状态的依赖列表中移除watcher      vm._watcher是在执行new Vue()初始化时创建的，它是监听当前组件用到的所有状态，即这个组      件内用到的所有状态的依赖列表。当这些状态发生变化时，就会通知vm._watcher,再调用虚拟DOM      进行重新渲染    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这里销毁的是用户使用vm.$watch所创建的watcher实例</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//这里要研究一下。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</span>    <span class="token comment" spellcheck="true">// remove reference from data ob</span>    <span class="token comment" spellcheck="true">// frozen object may not have observer.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>__ob__<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span>vmCount<span class="token operator">--</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// call the last hook...</span>    vm<span class="token punctuation">.</span>_isDestroyed <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// invoke destroy hooks on current rendered tree</span>    vm<span class="token punctuation">.</span><span class="token function">__patch__</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// fire destroyed hook</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'destroyed'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// turn off all instance listeners.移除事件监听器</span>    vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// remove __vue__ reference</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>__vue__ <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// release circular reference (#6759)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*每创建一个watcher实例时，都会将watcher实例添加到vm._watchers中，vm._watchers是在new Vue()初始化时创建的,所以每当用户使用vm.$watch时，就会向vm._watchers添加一个watcher实例。所以现在只需遍历vm._watchers，执行每一个watch实例的teardown方法即可*/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span>expOrFn<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">{</span>       vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>       <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-mount"><a href="#vm-mount" class="headerlink" title="vm.$mount"></a>vm.$mount</h4><p><strong>用法</strong>：如果Vue.js实例在实例化的时候没有收到el选项，则它处于“未挂载”状态，没有关联的DOM元素。可以使用vm.$mount手动挂载一个未挂载的实例。<br><strong>参数</strong>：<code>&#123;Element|string&#125;[elementOrSelector]</code><br><strong>返回值</strong>：vm，即实例本身<br><strong>示例</strong>：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> MyComponent<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span><span class="token string">'&lt;div>hello&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建并挂载到#app</span><span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建并挂载到#app</span><span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//没有传入参数，模板会被渲染为文档之外的元素，可以使用DOM的API把它插入文档中</span><span class="token keyword">var</span> mycomponent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>源码</strong>：<br>完整版（Vue.js)和运行时版(Vue.runtime.js）的差异是是否有编译器，而是否有编译器的差异主要就在vm.$mount方法的表现形式。</p><p><strong>完整版</strong><br>在完整版中，vm.$mount会首先检查template或el选项所提供的模板是否已经转换为渲染函数（render函数），如果没有，则立即进入编译过程，将模板编译成渲染函数，完成后再进入挂载与渲染的流程中</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*这种先保存Vue原型的prototype方法，然后用一个新的方法覆盖，在新方法中调用原始方法的做法叫函数劫持*/</span><span class="token keyword">const</span> mount <span class="token operator">=</span> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mountVue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>   el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> mount<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取DOM元素</span><span class="token keyword">export</span> <span class="token keyword">function</span> query <span class="token punctuation">(</span>el<span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">)</span><span class="token punctuation">:</span> Element <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> el <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> selected <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token string">'Cannot find element: '</span> <span class="token operator">+</span> el      <span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//获取不到，则创建一个空元素</span>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> selected  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果不是字符串，则认为el是元素类型，直接返回</span>    <span class="token keyword">return</span> el  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Get outerHTML of elements, taking care * of SVG elements in IE as well. */</span><span class="token keyword">function</span> getOuterHTML <span class="token punctuation">(</span>el<span class="token punctuation">:</span> Element<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>outerHTML<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> el<span class="token punctuation">.</span>outerHTML  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> container<span class="token punctuation">.</span>innerHTML  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//主要代码</span><span class="token keyword">function</span> compileToFunctions <span class="token punctuation">(</span>    template<span class="token punctuation">:</span> string<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">,</span>    vm<span class="token operator">?</span><span class="token punctuation">:</span> Component  <span class="token punctuation">)</span><span class="token punctuation">:</span> CompiledFunctionResult <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将options属性混合到空对象中，目的是让options成为可选参数</span>    options <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// check cache 检查缓存，若已经编译则直接返回</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> options<span class="token punctuation">.</span>delimiters      <span class="token operator">?</span> <span class="token function">String</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">)</span> <span class="token operator">+</span> template      <span class="token punctuation">:</span> template    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// compile  将template编译成代码字符串并储存在compiled的render属性中</span>    <span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// turn code into functions 将代码字符串转换为函数</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    res<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token function">createFunction</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>render<span class="token punctuation">,</span> fnGenErrors<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mount <span class="token operator">=</span> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mountVue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>  el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">===</span> document<span class="token punctuation">.</span>body <span class="token operator">||</span> el <span class="token operator">===</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token string">`Do not mount Vue to &lt;html> or &lt;body> - mount to normal elements instead.`</span></span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//options是初始化时创建的，它可以访问到实例化Vue.js时，用户设置的一些参数，例如template和render</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options  <span class="token comment" spellcheck="true">//如果没有render选项，需要获取模板并将模板编译成render函数赋值给render选项</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> template <span class="token operator">=</span> options<span class="token punctuation">.</span>template    <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//template选项可以是字符串模板、#开头的选项符、DOM元素</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> template <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//如果是#开头的选项符，则调用共idToTemplate获取模板</span>          template <span class="token operator">=</span> <span class="token function">idToTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">warn</span><span class="token punctuation">(</span>              <span class="token template-string"><span class="token string">`Template element not found or is empty: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>options<span class="token punctuation">.</span>template<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>              <span class="token keyword">this</span>            <span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        template <span class="token operator">=</span> template<span class="token punctuation">.</span>innerHTML      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'invalid template option:'</span> <span class="token operator">+</span> template<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果没有template选项，则使用getOuterHTML方法从用户提供的el选项中获取模板</span>      template <span class="token operator">=</span> <span class="token function">getOuterHTML</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">'compile'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//compileToFunctions可以将模板编译成渲染函数并设置在this.$options上</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> staticRenderFns <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">compileToFunctions</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>        outputSourceRange<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">,</span>        shouldDecodeNewlines<span class="token punctuation">,</span>        shouldDecodeNewlinesForHref<span class="token punctuation">,</span>        delimiters<span class="token punctuation">:</span> options<span class="token punctuation">.</span>delimiters<span class="token punctuation">,</span>        comments<span class="token punctuation">:</span> options<span class="token punctuation">.</span>comments      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>      options<span class="token punctuation">.</span>render <span class="token operator">=</span> render      options<span class="token punctuation">.</span>staticRenderFns <span class="token operator">=</span> staticRenderFns      <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">'compile end'</span><span class="token punctuation">)</span>        <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> compile`</span></span><span class="token punctuation">,</span> <span class="token string">'compile'</span><span class="token punctuation">,</span> <span class="token string">'compile end'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> mount<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行时版</strong><br>运行时版的vm.$mount没有编译步骤，它会默认实例上已存在渲染函数，如果不存在会设置一个。并且这个渲染函数在执行时会返会一个空节点VNode,以保证执行时不会因为函数不存在而报错</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>  el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> inBrowser <span class="token operator">?</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined  <span class="token keyword">return</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将Vue.js实例挂载到DOM元素上，当数据(状态)发生变化时依然可以渲染到指定DOM元素中</span><span class="token keyword">export</span> <span class="token keyword">function</span> mountComponent <span class="token punctuation">(</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>  el<span class="token punctuation">:</span> <span class="token operator">?</span>Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> el  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//实例不存在渲染函数，设置默认渲染函数createEmptyVNode,该函数执行后会返回一个注释类型的VNode节点</span>     vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>render <span class="token operator">=</span> createEmptyVNode    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//开发环境下发出警告</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//触发生命周期钩子</span>  <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeMount'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> updateComponent  <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>    updateComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> name <span class="token operator">=</span> vm<span class="token punctuation">.</span>_name      <span class="token keyword">const</span> id <span class="token operator">=</span> vm<span class="token punctuation">.</span>_uid      <span class="token keyword">const</span> startTag <span class="token operator">=</span> <span class="token template-string"><span class="token string">`vue-perf-start:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      <span class="token keyword">const</span> endTag <span class="token operator">=</span> <span class="token template-string"><span class="token string">`vue-perf-end:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      <span class="token function">mark</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span>      <span class="token keyword">const</span> vnode <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">mark</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>      <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> render`</span></span><span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">)</span>      <span class="token function">mark</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span>      vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span>      <span class="token function">mark</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>      <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> patch`</span></span><span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    updateComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*       vm._render 执行渲染函数，得到一份最新的VNode节点树       vm._update 调用虚拟DOM的patch方法来执行节点的对比与渲染操作       这一句其实就是一次渲染操作      */</span>      vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*    在介绍Watcher那一节中，如果Watcher的第二个参数是一个函数，则会同时观察函数中所读取的Vue.js    实例上的实例数据      */</span>  <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">{</span>    before <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>_isDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* isRenderWatcher */</span><span class="token punctuation">)</span>  hydrating <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// manually mounted instance, call mounted on self</span>  <span class="token comment" spellcheck="true">// mounted is called for render-created child components in its inserted hook</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'mounted'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> vm<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vm-nextTick"><a href="#vm-nextTick" class="headerlink" title="vm.$nextTick"></a>vm.$nextTick</h4><p><strong>前置：</strong>在 Vue 之中，当状态发生变化，会通知依赖这个状态的所有 watcher，然后触发虚拟 DOM 渲染流程。在 watcher 触发渲染这个操作并不是同步的，它是异步的。Vue 在内部有一个队列，每当需要渲染时，就将要渲染的 watcher 推送到这个队列，下一次事件循环再统一清空队列。<br><strong>用法：</strong>将回调延迟到下次DOM更新周期之后执行。（主要就是开发中有一种场景，就是更新了数据之后，需要对新的DOM做一些操作，但是这时获取不到更新后的DOM)</p><p>注意，这个DOM更新周期之后的意思是指下次微任务执行时更新DOM，vm.$nextTick其实就是将回调添加到微任务中(只有在特殊情况下才会降级成宏任务，默认是添加到微任务），所以如果使用vm.$nextTick来获取更新后的DOM，要注意顺序问题，无论是DOM更新后的回调还是是用vm.$nextTick注册的回调，都是向微任务中添加任务，所以是先来先服务。</p><blockquote><p>事实上，更新DOM的回调也是使用vm.$nextTick来注册到微任务里的</p></blockquote><p><strong>示例：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token operator">...</span>   methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    example<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//修改数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'change'</span>      <span class="token comment" spellcheck="true">//DOM还没有更新，要在更改数据后才能使用vm.$nextTick注册回调</span>      <span class="token comment" spellcheck="true">//如果是先使用vm.$nextTick注册回调，再修改数据，是获取不到最新的DOM的</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//DOM更新了</span>        <span class="token comment" spellcheck="true">//this绑定到当前实例</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//宏任务执行比微任务晚，所以setTimeout里可以获取到最新的DOM</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token operator">...</span>   methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    example<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//使用setTimeout向宏任务注册回调</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//DOM更新了</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//修改数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'change'</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong><br>当调用nextTick时，回调函数被添加到callbacks,然后判断任务队列中是否已经添加任务，没添加就需要执行timerFunc向任务队列里添加任务，如果已经添加就无需再添加，无需添加重复任务（被添加到任务队列的任务只需执行一次），然后当任务被执行时，就会依次执行callbacks中的所有回调</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//isUsingMicroTask来判断是否使用微任务方法</span><span class="token keyword">export</span> <span class="token keyword">let</span> isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">//callbacks存储用户注册的回调</span><span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//pending来保证每次只向任务队列添加一个任务</span><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">//清空callbacks</span><span class="token keyword">function</span> flushCallbacks <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  pending <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">const</span> copies <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  callbacks<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> copies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//异步执行函数</span><span class="token keyword">let</span> timerFunc <span class="token comment" spellcheck="true">/*    有Promise、MutationObserver以及setImmediate、setTimeout尝试得到timerFunc的方法，    优先使用Promise，在Promise不存在的情况下使用MutationObserver，这两个方法都会在    microtask中执行，会比宏任务更早执行，所以优先使用。如果上述两种方法都不支持的环境    则会使用setImmediate、setTimeout，这两种属于宏任务，比微任务慢执行  */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIOS<span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isIE <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> MutationObserver <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>  <span class="token function">isNative</span><span class="token punctuation">(</span>MutationObserver<span class="token punctuation">)</span> <span class="token operator">||</span>  MutationObserver<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object MutationObserverConstructor]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>  observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token punctuation">{</span>    characterData<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    counter <span class="token operator">=</span> <span class="token punctuation">(</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>    textNode<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>setImmediate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setImmediate</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Fallback to setTimeout.</span>  timerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ctx是上下文</span><span class="token keyword">export</span> <span class="token keyword">function</span> nextTick <span class="token punctuation">(</span>cb<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> ctx<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> _resolve  <span class="token comment" spellcheck="true">//cb回调函数push进callbacks函数</span>  callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token string">'nextTick'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">_resolve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//pending为false,说明本轮事件循环还没执行过timerFunc()</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">timerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// $flow-disable-line 没传入回调函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      _resolve <span class="token operator">=</span> resolve    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h2><p><strong>全局API是直接在</strong><code>Vue</code><strong>上挂载方法</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"> Vue<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>extendOptions<span class="token punctuation">:</span> Object<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>   <span class="token operator">...</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="Vue-extend（options"><a href="#Vue-extend（options" class="headerlink" title="Vue.extend（options)"></a>Vue.extend（options)</h3><p>用法：使用基础Vue构建一个“子类”，参数是一个包含组件选项”的对象<br>参数：<code>&#123;Object&#125;options</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//创建构造器</span><span class="token keyword">var</span> Profile<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     template<span class="token punctuation">:</span><span class="token string">'&lt;p>{{firstName}}-{{lastName}}&lt;/p>'</span><span class="token punctuation">,</span>     data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>           firstName<span class="token punctuation">:</span><span class="token string">'chen'</span><span class="token punctuation">,</span>           lastName<span class="token punctuation">:</span><span class="token string">'yiwei'</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建Profile实例，并挂载在一个元素上</span><span class="token keyword">new</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果</span><span class="token operator">&lt;</span>p<span class="token operator">></span>chen<span class="token operator">--</span>yiwei<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现原理：<br>其实原理并不复杂，就是创建一个Sub函数继承父类，利用了父类的cid缓存子类，依次继承父类的原型、父类的option选项，若有props或者computed就将它们初始化</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">export</span> <span class="token keyword">function</span> initExtend <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**   * Each instance constructor, including Vue, has a unique   * cid. This enables us to create wrapped "child   * constructors" for prototypal inheritance and cache them.   */</span>  Vue<span class="token punctuation">.</span>cid <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> cid <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">/**   * Class inheritance   */</span>  Vue<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>extendOptions<span class="token punctuation">:</span> Object<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>    extendOptions <span class="token operator">=</span> extendOptions <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> Super <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">const</span> SuperId <span class="token operator">=</span> Super<span class="token punctuation">.</span>cid    <span class="token keyword">const</span> cachedCtors <span class="token operator">=</span> extendOptions<span class="token punctuation">.</span>_Ctor <span class="token operator">||</span> <span class="token punctuation">(</span>extendOptions<span class="token punctuation">.</span>_Ctor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果已经缓存过了，就直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedCtors<span class="token punctuation">[</span>SuperId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> cachedCtors<span class="token punctuation">[</span>SuperId<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> extendOptions<span class="token punctuation">.</span>name <span class="token operator">||</span> Super<span class="token punctuation">.</span>options<span class="token punctuation">.</span>name    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">validateComponentName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> Sub <span class="token operator">=</span> <span class="token keyword">function</span> VueComponent <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//到时回过头看看 这一句，this._init是new Vue()的时候初始化用的</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这三句是实现子类继承父类的原型</span>    Sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Super<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>    Sub<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub    Sub<span class="token punctuation">.</span>cid <span class="token operator">=</span> cid<span class="token operator">++</span>           <span class="token comment" spellcheck="true">/*     * 这两句是实现父类的options选项继承到子类中     * mergeOptions方法是将两个选项合成一个     */</span>    Sub<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>      Super<span class="token punctuation">.</span>options<span class="token punctuation">,</span>      extendOptions    <span class="token punctuation">)</span>    Sub<span class="token punctuation">[</span><span class="token string">'super'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Super    <span class="token comment" spellcheck="true">// For props and computed properties, we define the proxy getters on</span>    <span class="token comment" spellcheck="true">// the Vue instances at extension time, on the extended prototype. This</span>    <span class="token comment" spellcheck="true">// avoids Object.defineProperty calls for each instance created.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Sub<span class="token punctuation">.</span>options<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">initProps</span><span class="token punctuation">(</span>Sub<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Sub<span class="token punctuation">.</span>options<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">initComputed</span><span class="token punctuation">(</span>Sub<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// allow further extension/mixin/plugin usage</span>    Sub<span class="token punctuation">.</span>extend <span class="token operator">=</span> Super<span class="token punctuation">.</span>extend    Sub<span class="token punctuation">.</span>mixin <span class="token operator">=</span> Super<span class="token punctuation">.</span>mixin    Sub<span class="token punctuation">.</span>use <span class="token operator">=</span> Super<span class="token punctuation">.</span>use    <span class="token comment" spellcheck="true">// create asset registers, so extended classes</span>    <span class="token comment" spellcheck="true">// can have their private assets too.</span>    ASSET_TYPES<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Sub<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> Super<span class="token punctuation">[</span>type<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// enable recursive self-lookup</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Sub<span class="token punctuation">.</span>options<span class="token punctuation">.</span>components<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> Sub    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// keep a reference to the super options at extension time.</span>    <span class="token comment" spellcheck="true">// later at instantiation we can check if Super's options have</span>    <span class="token comment" spellcheck="true">// been updated.</span>    Sub<span class="token punctuation">.</span>superOptions <span class="token operator">=</span> Super<span class="token punctuation">.</span>options    Sub<span class="token punctuation">.</span>extendOptions <span class="token operator">=</span> extendOptions    Sub<span class="token punctuation">.</span>sealedOptions <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Sub<span class="token punctuation">.</span>options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// cache constructor 缓存Sub，因为反复调用Vue.extend应该返回同一个结果</span>    cachedCtors<span class="token punctuation">[</span>SuperId<span class="token punctuation">]</span> <span class="token operator">=</span> Sub    <span class="token keyword">return</span> Sub  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//初始化props的作用是将key代理到_props</span><span class="token comment" spellcheck="true">//比如vm.name实际上访问的是Sub.prototype._props.name</span><span class="token keyword">function</span> initProps <span class="token punctuation">(</span>Comp<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> Comp<span class="token punctuation">.</span>options<span class="token punctuation">.</span>props  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">proxy</span><span class="token punctuation">(</span>Comp<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`_props`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> proxy <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> sourceKey<span class="token punctuation">:</span> string<span class="token punctuation">,</span> key<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> proxyGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> proxySetter <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> sharedPropertyDefinition<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化computed就是遍历computed对象，将对象里每一项都定义一遍</span><span class="token keyword">function</span> initComputed <span class="token punctuation">(</span>Comp<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> computed <span class="token operator">=</span> Comp<span class="token punctuation">.</span>options<span class="token punctuation">.</span>computed  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">defineComputed</span><span class="token punctuation">(</span>Comp<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">,</span> computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>这个 defineComputed后面补充。。。。。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h3 id="Vue-nextTick（-callback-context"><a href="#Vue-nextTick（-callback-context" class="headerlink" title="Vue.nextTick（[callback,context])"></a>Vue.nextTick（[callback,context])</h3><p>用法：在下次<code>DOM</code>更新循环结束之后执行延迟回调，修改数据之后立即使用这个方法获取更新后的<code>DOM</code><br>参数：<code>&#123;Function&#125;[callback]</code><br>          <code> &#123;Object&#125;[context]</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//修改数据</span>vm<span class="token punctuation">.</span>msg<span class="token operator">=</span><span class="token string">'hello'</span><span class="token comment" spellcheck="true">//DOM还没有更新</span>Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//DOM更新后的操作~~</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//也可以作为一个Promise使用</span>Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//DOM更新后的操作~~   })</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理：<code>Vue.nextTick</code>实现原理和<code>vm.$nextTick</code>是一样的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>nextTick<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span>Vue<span class="token punctuation">.</span>nextTick<span class="token operator">=</span>nextTick<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><h3 id="Vue-set-target-key-value"><a href="#Vue-set-target-key-value" class="headerlink" title="Vue.set(target,key,value)"></a>Vue.set(target,key,value)</h3><p>用法：设置对象属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开Vue不能检测到属性被添加的限制（注意这个对象不能是Vue.js实例或者Vue.js实例的根数据对象？？？？？）<br>参数：<code>&#123;Object|Array&#125;target</code><br>           <code>&#123;string|number&#125;key</code><br>           <code>&#123;any&#125;value</code><br>返回值：设置的值<br>原理：和vm.delete的实现原理相同</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">set</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../observer/index'</span>Vue<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><h3 id="Vue-delete-target-key"><a href="#Vue-delete-target-key" class="headerlink" title="Vue.delete(target,key)"></a>Vue.delete(target,key)</h3><p>用法：删除对象属性。如果对象是响应式的，确保属性被删除后能触发视图更新。这个方法主要用于避开Vue不能检测到属性被删除的限制</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../observer/index'</span>Vue<span class="token punctuation">.</span><span class="token keyword">delete</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><h3 id="Vue-directive-x2F-filter-x2F-component-id-definition"><a href="#Vue-directive-x2F-filter-x2F-component-id-definition" class="headerlink" title="Vue.directive&#x2F;filter&#x2F;component(id,[definition])"></a>Vue.directive&#x2F;filter&#x2F;component(id,[definition])</h3><p>用法：注册或获取全局指令、全局过滤器、全局组件（注册组件时，还会自动使用给定的id设置组件的名称），注意比如全局指令，这里只是注册或者获取全局指令，并不是让其生效，其他两个API也是同样的道理。<br>参数：<code>&#123;string&#125;id</code><br>          <code>&#123;Function|Object&#125;[definition]</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Vue.directive</span><span class="token comment" spellcheck="true">//注册指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  bind<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  inserted<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  update<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  componentUpdated<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  unbind<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注册指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里的内容会被bind和update调用</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//getter方法，返回已注册的指令</span><span class="token keyword">var</span> myDirective<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Vue.filter</span><span class="token comment" spellcheck="true">//注册</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'my-filter'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//返回处理后的值  })</span><span class="token comment" spellcheck="true">//getter方法，返回已注册的过滤器</span><span class="token keyword">var</span> myFilter<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'my-filter'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//过滤器可以用在双括号插值和v-bind表达式</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token operator">|</span>capitalize<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token punctuation">:</span>id<span class="token operator">=</span><span class="token string">"rawId|formatId"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token comment" spellcheck="true">//Vue.component</span>  <span class="token comment" spellcheck="true">//注册组件，传入一个扩展过的构造器</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//注册组件，传入一个选项对象(自动调用Vue.extend)</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取注册组件(返回构造器)</span>  <span class="token keyword">var</span> myComponent<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理：<br><code>Vue.directive、Vue.filter、Vue.component</code>的源码</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  shared/constants.js </span><span class="token keyword">export</span> <span class="token keyword">const</span> ASSET_TYPES <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'component'</span><span class="token punctuation">,</span>  <span class="token string">'directive'</span><span class="token punctuation">,</span>  <span class="token string">'filter'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// src/core/global-api/index.js</span>Vue<span class="token punctuation">.</span>options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> ASSET_TYPES<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span>options<span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">'s'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>options<span class="token punctuation">.</span>_base <span class="token operator">=</span> Vue<span class="token function">initAssetRegisters</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// src/core/global-api/assets.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> initAssetRegisters <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * Create asset registration methods.   */</span>  ASSET_TYPES<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>      id<span class="token punctuation">:</span> string<span class="token punctuation">,</span>      definition<span class="token punctuation">:</span> Function <span class="token operator">|</span> Object    <span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token operator">|</span> Object <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//definition参数不存在，是注册操作</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">'component'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">validateComponentName</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果是Object类型，就调用Vue.extend变成Vue的子类</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'component'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          definition<span class="token punctuation">.</span>name <span class="token operator">=</span> definition<span class="token punctuation">.</span>name <span class="token operator">||</span> id          definition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>_base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'directive'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> definition <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          definition <span class="token operator">=</span> <span class="token punctuation">{</span> bind<span class="token punctuation">:</span> definition<span class="token punctuation">,</span> update<span class="token punctuation">:</span> definition <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> definition        <span class="token keyword">return</span> definition      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue-use-plugin"><a href="#Vue-use-plugin" class="headerlink" title="Vue.use(plugin)"></a>Vue.use(plugin)</h3><p>用法：安装Vue.js插件。<br>参数：<code>&#123;Object|Function&#125;plugin</code><br>原理：<br>如果插件是一个对象则必须提供install方法，如果插件是一个函数，它会被作为install方法。调用install方法时，会将Vue作为参数传入，install方法被同一个插件多次使用，插件也只会安装一次。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> toArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">export</span> <span class="token keyword">function</span> initUse <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>use <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">:</span> Function <span class="token operator">|</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> installedPlugins <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//不重复安装插件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedPlugins<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// toArray方法就是将类数组转成真正的数组,并且得到除了第一个参数外的其他参数</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//把Vue作为args第一个参数</span>    args<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin<span class="token punctuation">.</span>install <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      plugin<span class="token punctuation">.</span>install<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      plugin<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    installedPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-7"><a href="#-7" class="headerlink" title=""></a></h3><h3 id="Vue-mixin-mixin"><a href="#Vue-mixin-mixin" class="headerlink" title="Vue.mixin(mixin)"></a>Vue.mixin(mixin)</h3><p>用法：全局注册一个混入，影响注册之后创建的每个Vue.js实例。插件作者可以使用混入向组件注入自定义行为。（不推荐在应用代码中使用）<br>参数：<code>&#123;Object&#125;mixin</code><br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   created<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> myOption<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>$option<span class="token punctuation">.</span>myOption<span class="token punctuation">,</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>myOption<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myOption<span class="token punctuation">)</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   myOption<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理：<br>实现原理只是将<code>mixin</code>与<code>Vue</code>自身的<code>options</code>属性合并在一起了</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mergeOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">export</span> <span class="token keyword">function</span> initMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>mixin <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>mixin<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> mixin<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue-compile"><a href="#Vue-compile" class="headerlink" title="Vue.compile"></a>Vue.compile</h3><p>作用：编译模板字符串并返回包含渲染函数的对象。(只在完整版中才有效，只有完整版才包含编译器）<br>参数：{string}template<br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> res<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;div>&lt;span>{{msg}}&lt;/span>&lt;/div>'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">'hello'</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span>res<span class="token punctuation">.</span>render<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>compile<span class="token operator">=</span>compileToFunctions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Vue-version"><a href="#Vue-version" class="headerlink" title="Vue.version"></a>Vue.version</h3><p>作用：提供字符串形式的Vue.js安装版本号。<br>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> version<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>version<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//2.x.x版本</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//1.x.x版本</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//不支持的Vue.js版本</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2响应式系统</title>
      <link href="/2022/09/01/vue2%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/09/01/vue2%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="响应式系统"><a href="#响应式系统" class="headerlink" title="响应式系统"></a>响应式系统</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>渲染：</strong>vue通过状态生成DOM，并在页面上显示出来的过程就是渲染。<br>在运行时，应用内部状态会不断发生变化，需要不停地渲染，而变化侦测就是来解决这个问题的。</p><p><strong>变化侦测</strong><br>vue、react、angular变化侦测的区别？<br>Angular和React的变化侦测属于”拉”，就是说框架不清楚是哪个状态发生变化，框架知道状态变了，然后进行“暴力对比”寻找需要重新渲染的DOM节点（Angular是脏检查的流程，React中使用的是虚拟DOM，待展开…..）<br>Vue的变化侦测属于”推”，当状态发生变化时，Vue可以知道说是哪些状态发生了变化，然后它可以向这个状态的所有依赖发送通知。</p><p><strong>粒度</strong><br>Vue.js2.0以前，是一个状态绑定好多个依赖，每个依赖表示一个具体的DOM节点，当状态发生变化时，向这个状态的所有依赖发送通知，让他们进行DOM更新操作。（粒度比较细，但是绑定的依赖多，而且依赖追踪在内存上的开销大）<br>Vue.js2.0之后，引入了虚拟DOM，一个状态绑定的依赖不再是DOM节点，而是一个组件，粒度就调整为中等粒度了。（比之前有了提升,但是它的粒度还是比”拉”的粒度小的）</p><p><strong>侦测方式</strong><br>Object.defineProperty,proxy(下面Vue3再讲)</p><p>补充个人的大白话<br>其实没那么复杂，就是就是比如说在代码的各个地方都用到了某个数据，当这个数据变化时，这些地方就都要更新。更新的方法就是之前在用这个数据的时候就把它使用的地方都收集起来（这些地方就叫依赖），后面这个数据变化了，就通过遍历之前收集的那些地方，一一去更新它。</p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="如何收集依赖？"><a href="#如何收集依赖？" class="headerlink" title="如何收集依赖？"></a>如何收集依赖？</h4><p>在getter中收集依赖，在setter中触发依赖</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>  obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  val<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  customSetter<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>  shallow<span class="token operator">?</span><span class="token punctuation">:</span> boolean   <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> dep<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//getter</span>        <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//收集依赖</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//setter</span>        <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>            <span class="token punctuation">}</span>             val<span class="token operator">=</span>newVal<span class="token punctuation">;</span>             dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//触发依赖</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="依赖收集在哪里？"><a href="#依赖收集在哪里？" class="headerlink" title="依赖收集在哪里？"></a>依赖收集在哪里？</h4><p>用Dep类收集，可以用这个类来收集依赖、删除依赖、向依赖发送通知等等<br>Dep其实主要就两个主要的功能，一是用一个数组收集依赖Watcher,二就是遍历数组对每个Watcher进行update</p><pre class="line-numbers language-javascript"><code class="language-javascript">Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">//Dep其实是一个依赖收集器，一个响应式数据的依赖收集器可以被许多指令订阅</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//静态属性target</span>   <span class="token keyword">static</span> target<span class="token punctuation">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//收集所有的订阅者</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//添加订阅者</span>   addSub <span class="token punctuation">(</span>sub<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//取消订阅</span>   removeSub <span class="token punctuation">(</span>sub<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">,</span> sub<span class="token punctuation">)</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//触发getter时收集依赖</span>    depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//拷贝数组</span>        <span class="token keyword">const</span> subs<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subs<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span>id <span class="token operator">-</span> b<span class="token punctuation">.</span>id<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 依次触发更新</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> remove <span class="token punctuation">(</span>arr<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除某一个</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Dep.target是指向一个具体的Watcher，每个Watcher自己也维护了一个依赖收集器</span><span class="token comment" spellcheck="true">//表示自己依赖了多少个数据</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">//targetStack用来存放依赖的</span><span class="token keyword">const</span> targetStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">function</span> pushTarget <span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>  targetStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> popTarget <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  targetStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> targetStack<span class="token punctuation">[</span>targetStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="依赖究竟是什么？"><a href="#依赖究竟是什么？" class="headerlink" title="依赖究竟是什么？"></a>依赖究竟是什么？</h4><p>由于使用这个数据的地方有很多，有多种类型，有可能是模板，也有可能是用户写的一个watch，所以抽象成一个类来处理这些情况，这个类叫Watcher,所以收集的就是Watcher实例</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Watcher</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>    vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表达式</span>    cb<span class="token punctuation">:</span> Function<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//回调函数</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>    isRenderWatcher<span class="token operator">?</span><span class="token punctuation">:</span> boolean     <span class="token operator">...</span>       <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//只截取关键部分代码</span>          <span class="token comment" spellcheck="true">//这里主要是跟vm.$watch的deep选项有关</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>deep      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用set，不会重复订阅</span>                 <span class="token comment" spellcheck="true">/*     调用this.getter()就可以读取到属性的值     注意这里expOrFn可以是函数，如果它是函数，Watcher会同时观察函数里读取的所有Vue.js示例上的     响应式数据，而如果是字符串类型的则会直接读取字符串指向的数据     */</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> expOrFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> noop        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Failed watching path: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expOrFn<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" `</span></span> <span class="token operator">+</span>          <span class="token string">'Watcher only accepts simple dot-delimited paths. '</span> <span class="token operator">+</span>          <span class="token string">'For full control, use a function instead.'</span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这个是更新时要用的方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token operator">=</span>cb<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在非惰性检测情况下，触发对象属性的getter方法，收集依赖</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token operator">?</span> undefined<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//触发getter，重新收集依赖</span>   <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把当前Watcher的实例赋值加入targetStack</span>    <span class="token keyword">let</span> value    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取属性的值,这样就会触发属性的getter,然后将watcher实例push进Dep实例里</span>      value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`getter for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//实现vm.$watch的deep选项，递归value的所有子值来触发它们的收集依赖的功能</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把当前Watcher的实例赋值弹出targetStack</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value  <span class="token punctuation">}</span>     addDep <span class="token punctuation">(</span>dep<span class="token punctuation">:</span> Dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id    <span class="token comment" spellcheck="true">//如果没有判断，每次数据发生了变化，watcher的get方法都会读取最新数据，收集依赖，会导致Dep有</span>    <span class="token comment" spellcheck="true">//依赖重复</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//把dep加入当前watcher，在Watcher中记录自己都订阅过哪些Dep</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//把当前watcher加入dep</span>        dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//同步更新</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//异步更新</span>      <span class="token function">queueWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//从所有依赖项的Dep列表中将自己移除</span>   teardown <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// remove self from vm's watcher list</span>      <span class="token comment" spellcheck="true">// this is a somewhat expensive operation so we skip it</span>      <span class="token comment" spellcheck="true">// if the vm is being destroyed.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span>_isBeingDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>触发属性的getter，就会调用Watcher实例的get()方法收集该依赖<br>触发属性的setter，就会通知Dep的各个依赖，然后调用依赖的update()方法更新</p><p>上面的addDep中，Dep收集了Watcher，而Watcher中同样也记录了自己会被哪些Dep通知，Dep和Watcher之间是多对多的关系。为什么Watcher被多个Dep通知？<br>因为如果expOrFn参数是一个表达式，那么肯定只收集一个Dep,但是如果expOrFn是一个函数，而且此函数使用了多个数据，那么此时的Watcher就要收集多个Dep了</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上例用vm.$watch观察一个函数，函数里用到了age和name两个响应式数据，这种情况下Watcher内部会收集两个Dep(name的Dep和age的Dep),同时这两个Dep中也会收集Watcher，这样age和name中任意一个数据发生变化，Watcher都会收到通知</p><h4 id="递归侦测所有属性"><a href="#递归侦测所有属性" class="headerlink" title="递归侦测所有属性"></a>递归侦测所有属性</h4><p>上面已经可以侦测一个属性了，但是要实现对象所有属性的侦测<strong>，因为存在对象嵌套，所以要递归，需要封装一个Observer类。</strong></p><p>这个类的作用是将一个数据内的所有属性都转换成getter、setter形式，然后可以去追踪他们的变化。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  value<span class="token punctuation">:</span> any<span class="token punctuation">;</span>  dep<span class="token punctuation">:</span> Dep<span class="token punctuation">;</span>  vmCount<span class="token punctuation">:</span> number<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number of vms that have this object as root $data</span>     <span class="token comment" spellcheck="true">//目前分析这里传入的value是一个对象</span>  constructor <span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vmCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 遍历对象</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">walk</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> keys<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的keys是obj第一层的key,不包括嵌套的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>obj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>  obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  val<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  customSetter<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>  shallow<span class="token operator">?</span><span class="token punctuation">:</span> boolean  <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> property <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span>configurable <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// cater for pre-defined getter/setters</span>  <span class="token keyword">const</span> getter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">get</span>  <span class="token keyword">const</span> setter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>getter <span class="token operator">||</span> setter<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若属性值也是对象，深度遍历递归执行observe实例化</span>    <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// getter，触发getter时，收集依赖。</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获得当前值</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val      <span class="token comment" spellcheck="true">// 如果当前有目标依赖这个数据，则添加依赖Watcher</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 子对象也要增加依赖收集</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>          childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 数组特殊处理</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// setter，触发setter时，派发更新。newVal待设置的值</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveSetter <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获得当前值</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val      <span class="token comment" spellcheck="true">// 如果值没有变化，则不触发更新通知</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 自定义setter方法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> customSetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">customSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果属性不支持setter，则直接跳过</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>getter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>setter<span class="token punctuation">)</span> <span class="token keyword">return</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 有自己的setter就调用自身setter</span>        setter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新赋值</span>        val <span class="token operator">=</span> newVal      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 子对象也要重新observe实例化</span>      childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 通知更新</span>      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="存在问题？"><a href="#存在问题？" class="headerlink" title="存在问题？"></a>存在问题？</h4><p>1.Vue.js通过Object.defineProperty来将对象的key转换成getter&#x2F;setter的形式来追踪变化，但getter&#x2F;setter只能追踪一个属性是否被修改（就是这个属性要存在），无法追踪新增属性和删除属性。(vm.$set和vm.$delete可以解决)</p><p>2.数组调用原型上的方法（push、pop、shift、unshift、splice、sort、reverse),还有直接修改数组长度，直接修改某个元素的值，并不会触发setter。前一个问题可以用拦截器覆盖原型上的方法，后两个问题未解决。（或许es6的poxy就可以解决了。。）</p><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>拦截器可以覆盖原型上的方法，这样每次调用的就是拦截器中提供的方法</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//src/core/observer/array.js</span><span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token comment" spellcheck="true">//arrayProto作为arrayMethods的原型</span><span class="token keyword">export</span> <span class="token keyword">const</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>arrayProto<span class="token punctuation">)</span><span class="token keyword">const</span> methodsToPatch <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'push'</span><span class="token punctuation">,</span>  <span class="token string">'pop'</span><span class="token punctuation">,</span>  <span class="token string">'shift'</span><span class="token punctuation">,</span>  <span class="token string">'unshift'</span><span class="token punctuation">,</span>  <span class="token string">'splice'</span><span class="token punctuation">,</span>  <span class="token string">'sort'</span><span class="token punctuation">,</span>  <span class="token string">'reverse'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">/** * Intercept mutating methods and emit events */</span>methodsToPatch<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// cache original method 缓存原始方法</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//覆盖原方法</span>  <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> mutator <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__    <span class="token keyword">let</span> inserted    <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token punctuation">:</span>      <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// notify change</span>    ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// src/core/util/lang.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> def <span class="token punctuation">(</span>obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> key<span class="token punctuation">:</span> string<span class="token punctuation">,</span> val<span class="token punctuation">:</span> any<span class="token punctuation">,</span> enumerable<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> val<span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>enumerable<span class="token punctuation">,</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么不直接覆盖Array.prototype?</strong></p><p>因为我们希望拦截操作只覆盖那些响应式数组的原型，不希望污染全局的Array。而把一个数据转换成响应式的，需要通过Observer,所以需要在Observer中使用拦截器覆盖数组即可。</p><p><strong>有些浏览器不支持 <strong><code>**__proto__**</code></strong>?</strong><br>Vue的做法是，直接将arrayMethods身上的这些方法设置到被侦测的数组上</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>arrayMethods<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./array'</span><span class="token punctuation">;</span><span class="token keyword">const</span> hasProto <span class="token operator">=</span> <span class="token string">'__proto__'</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否支持__proto__</span><span class="token keyword">const</span> arrayKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hasProto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">protoAugment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">copyAugment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">,</span> arrayKeys<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Augment a target Object or Array by intercepting * the prototype chain using __proto__ */</span><span class="token keyword">function</span> protoAugment <span class="token punctuation">(</span>target<span class="token punctuation">,</span> src<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* eslint-disable no-proto */</span>  target<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> src  <span class="token comment" spellcheck="true">/* eslint-enable no-proto */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Augment a target Object or Array by defining * hidden properties. */</span><span class="token comment" spellcheck="true">/* istanbul ignore next */</span><span class="token keyword">function</span> copyAugment <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> src<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token function">def</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何收集依赖"><a href="#如何收集依赖" class="headerlink" title="如何收集依赖"></a>如何收集依赖</h4><p>数组收集依赖的方式和object一样，都是在getter收集，但是要注意的是<strong>数组是在拦截器中触发依赖</strong></p><h4 id="依赖收集在哪里"><a href="#依赖收集在哪里" class="headerlink" title="依赖收集在哪里?"></a>依赖收集在哪里?</h4><p>数组的依赖保存在Observer里，因为getter需要访问到依赖，拦截器也需要，所以要保存在两者都能访问到的地方——Observer.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>getter访问和收集依赖</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> childOb<span class="token operator">=</span><span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新增 这个主要是解决多维数组，对象数组的。。</span>    <span class="token keyword">let</span> dep<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//新增 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>childOb<span class="token punctuation">)</span><span class="token punctuation">{</span>              childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//收集依赖</span>             <span class="token punctuation">}</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//setter</span>        <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">===</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             val<span class="token operator">=</span>newVal<span class="token punctuation">;</span>             dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断value是否存在Observer实例，有则返回无则新建</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>asRootData<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> ob<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">'__ob__'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>value<span class="token punctuation">.</span>__ob__ <span class="token keyword">instanceof</span> <span class="token class-name">Observer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       ob<span class="token operator">=</span>value<span class="token punctuation">.</span>__ob__<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       ob<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ob<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拦截器访问依赖并发送通知</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 工具函数</span><span class="token keyword">function</span> def <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> enumerable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> val<span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>enumerable<span class="token punctuation">,</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">'__ob__'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样就可以拿到observer实例，从而拿到dep了</span>    <span class="token operator">...</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">,</span><span class="token string">'pop'</span><span class="token punctuation">,</span><span class="token string">'shift'</span><span class="token punctuation">,</span><span class="token string">'unshift'</span><span class="token punctuation">,</span><span class="token string">'splice'</span><span class="token punctuation">,</span><span class="token string">'sort'</span><span class="token punctuation">,</span><span class="token string">'reverse'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method <span class="token punctuation">,</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token function">mutator</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">const</span> result<span class="token operator">=</span>original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">const</span> ob<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>__ob__<span class="token punctuation">;</span>       ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送通知</span>      <span class="token keyword">return</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token operator">...</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="侦测所有数据子集"><a href="#侦测所有数据子集" class="headerlink" title="侦测所有数据子集"></a>侦测所有数据子集</h4><p>前面的只是侦测到一个数组自身的变化，比如增加一个元素，删除一个元素等等，但是数组中保存的元素也需要侦测</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>     <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">'__ob__'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//侦测Array的每一项</span>    <span class="token function">observeArray</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token operator">=</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">observe</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="侦测新增元素的变化-这里没懂-，晕"><a href="#侦测新增元素的变化-这里没懂-，晕" class="headerlink" title="侦测新增元素的变化(这里没懂~~~，晕)"></a>侦测新增元素的变化(这里没懂~~~，晕)</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span>  <span class="token string">'push'</span><span class="token punctuation">,</span>  <span class="token string">'pop'</span><span class="token punctuation">,</span>  <span class="token string">'shift'</span><span class="token punctuation">,</span>  <span class="token string">'unshift'</span><span class="token punctuation">,</span>  <span class="token string">'splice'</span><span class="token punctuation">,</span>  <span class="token string">'sort'</span><span class="token punctuation">,</span>  <span class="token string">'reverse'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// cache original method</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> mutator <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__    <span class="token keyword">let</span> inserted    <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token punctuation">:</span>      <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// notify change</span>    ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="官网图片"><a href="#官网图片" class="headerlink" title="官网图片"></a>官网图片</h3>]]></content>
      
      
      <categories>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/08/23/test/"/>
      <url>/2022/08/23/test/</url>
      
        <content type="html"><![CDATA[<p><a name="e8f8c269"></a></p><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么</p><p><a name="e8f8c269-1"></a></p><h2 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么</p><p><a name="e8f8c269-2"></a></p><h2 id="进程与线程-2"><a href="#进程与线程-2" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br />为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么</p><p><a name="89480b0f"></a></p><h3 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h3><p><a name="d994d598"></a></p><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>样式计算的目的是为了计算出DOM节点中每个元素的具体样式。</p><p><a name="703d6307"></a></p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p><strong>第一步：把CSS转换为浏览器能够理解的结构</strong><br /><strong>浏览器无法直接理解代码所写的CSS样式，必须转换为浏览器能够识别的结构styleSheets</strong><br />CSS样式来源主要有三种：</p><ol><li>通过link引用的外部CSS文件</li><li>元素的style属性内嵌的CSS</li><li><code> &lt;style&gt;</code>标记内的 CSS</li></ol><p>代码块：</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'124234'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> a<span class="token operator">=</span><span class="token string">'llll'</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/2022/08/23/test1/"/>
      <url>/2022/08/23/test1/</url>
      
        <content type="html"><![CDATA[<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么</p><h2 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么</p><h2 id="进程与线程-2"><a href="#进程与线程-2" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么</p><h3 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>样式计算的目的是为了计算出DOM节点中每个元素的具体样式。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p><strong>第一步：把CSS转换为浏览器能够理解的结构</strong><br><strong>浏览器无法直接理解代码所写的CSS样式，必须转换为浏览器能够识别的结构styleSheets</strong><br>CSS样式来源主要有三种：</p><ol><li>通过link引用的外部CSS文件</li><li>元素的style属性内嵌的CSS</li><li><code> &lt;style&gt;</code>标记内的 CSS</li></ol><p>代码块：</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'124234'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> a<span class="token operator">=</span><span class="token string">'llll'</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>try</title>
      <link href="/2022/08/23/try/"/>
      <url>/2022/08/23/try/</url>
      
        <content type="html"><![CDATA[<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么</p><h2 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么</p><h2 id="进程与线程-2"><a href="#进程与线程-2" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么</p><h3 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>样式计算的目的是为了计算出DOM节点中每个元素的具体样式。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p><strong>第一步：把CSS转换为浏览器能够理解的结构</strong><br><strong>浏览器无法直接理解代码所写的CSS样式，必须转换为浏览器能够识别的结构styleSheets</strong><br>CSS样式来源主要有三种：</p><ol><li>通过link引用的外部CSS文件</li><li>元素的style属性内嵌的CSS</li><li><style>标签内的 CSS可以在控制台输入document.styleSheets查看当前页面的styleSheets![image.png](https://cdn.nlark.com/yuque/0/2022/png/25385691/1657612154061-2bfa934d-74d0-4665-82f5-eeac24f40e38.png#clientId=ub13e2e87-3542-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=454&id=u66d868d4&name=image.png&originHeight=681&originWidth=951&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59785&status=done&style=none&taskId=u55bdf8a4-0c4d-429b-ab63-d3a944db65f&title=&width=634)</li></ol><p><strong>第二步： 转换样式表中的属性值，使其标准化</strong><br>标准化属性值就是将比如em、blue、bold，这种的转换为px、rgb(0,0,255)、700<br><strong>第三步：计算出DOM树中每个节点的具体样式</strong><br>样式的计算涉及到CSS的继承和层叠规则<br><strong>样式的继承</strong>是如果子节点没有定义相应的样式，会继承父节点的样式，如果没有定义页面任何样式，会继承浏览器的默认样式（UserAgent)<br><strong>样式的层叠</strong>就是处理多个地方定义了同个属性计算出最终属性值的算法<br>什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么<br>为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染过程</title>
      <link href="/2022/08/23/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/08/23/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="进程与线程分别是什么？"><a href="#进程与线程分别是什么？" class="headerlink" title="进程与线程分别是什么？"></a>进程与线程分别是什么？</h3><p>进程：进程是<strong>CPU资源分配的最小单位</strong>，是能拥有资源和独立运行的最小单位。<br>线程：线程是<strong>CPU调度的最小单位</strong>。一个进程中可以有多个线程，多个线程之间共享进程的资源。<br>我们也可以打开电脑的任务管理器，可以看到电脑各个进程占用的内存还有CPU利用率。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25385691/1661236750593-328f75e4-5349-4cc4-929b-3e5a2a3e7fbc.png#clientId=u1e37258e-8c2c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=553&id=u43955407&margin=%5Bobject%20Object%5D&name=image.png&originHeight=829&originWidth=1121&originalType=binary&ratio=1&rotation=0&showTitle=false&size=106644&status=done&style=none&taskId=u0e075326-c6f8-4f9d-9ce8-9a571685923&title=&width=747.3333333333334" alt="image.png"></p><h2 id="Chrome浏览器是多进程的"><a href="#Chrome浏览器是多进程的" class="headerlink" title="Chrome浏览器是多进程的"></a>Chrome浏览器是多进程的</h2><h3 id="chrome浏览器架构的发展历史？"><a href="#chrome浏览器架构的发展历史？" class="headerlink" title="chrome浏览器架构的发展历史？"></a>chrome浏览器架构的发展历史？</h3><p>具体的浏览器架构的发展历史就不过多介绍了，不是课题的重点可以参考以下文章<a href="https://juejin.cn/post/6936750270151917576#heading-5">https://juejin.cn/post/6936750270151917576#heading-5</a></p><h3 id="chorme浏览器有哪些进程？"><a href="#chorme浏览器有哪些进程？" class="headerlink" title="chorme浏览器有哪些进程？"></a>chorme浏览器有哪些进程？</h3><p>打开谷歌浏览器的一个页面，再打开chrome的任务管理器（点击Chrome浏览器右上角的“选项”菜单，选择“更多工具”子菜单，点击“任务管理器”）可以看到浏览器的各个进程<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25385691/1661239121569-7e77b40e-76d9-4edc-905f-40876e2a6e3b.png#clientId=ue1c97520-91cd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=459&id=u6658efe9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=688&originWidth=1172&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54647&status=done&style=none&taskId=ufd0e3cd5-aa3e-4d2f-99f8-2d7db913ec2&title=&width=781.3333333333334" alt="image.png"><br>浏览器的进程包括了：1个浏览器主进程、1个GPU进程、1个网络进程、多个渲染进程、多个插件进程</p><ul><li><strong>浏览器进程</strong>：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li><strong>渲染进程</strong>：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎Blink和JavaScript引擎V8都是运行在该进程中，默认情况下，Chrome会为每个Tab标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li><strong>GPU进程</strong>：其实，Chrome刚开始发布的时候是没有GPU进程的。而GPU的使用初衷是为了实现3D CSS的效果，只是随后网页、Chrome的UI界面都选择采用GPU来绘制，这使得GPU成为浏览器普遍的需求。最后，Chrome在其多进程架构上也引入了GPU进程。</li><li><strong>网络进程</strong>：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li><li><strong>插件进程</strong>：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响<h3 id="渲染进程包括哪些线程？"><a href="#渲染进程包括哪些线程？" class="headerlink" title="渲染进程包括哪些线程？"></a>渲染进程包括哪些线程？</h3></li></ul><p><strong>GUI渲染线程：</strong>负责渲染页面，解析HTML和CSS、构建DOM树、CSSOM树、渲染树和绘制页面，重排重绘也是在该线程执行<br><strong>JS引擎线程：</strong>一个tab页中只有一个JS引擎线程（JS是单线程的），负责解析和执行JS。（JS引擎线程和GUI线程是互斥的，不能同时执行）<br><strong>计时器线程：</strong>指的是setInterval和setTimeout，因为JS引擎是单线程的，所以如果处于阻塞状态，那么计数器就会不准的，所以需要单独的线程来负责计时器的工作。<br><strong>异步http请求线程：</strong>XMLHttpRequest链接后浏览器开的一个进程，比如请求有回调函数，异步线程就会将回调函数加入事件队列，等待JS引擎空闲的时候执行<br><strong>事件触发线程：</strong>主要用来控制事件循环，比如JS执行遇到定时器，ajax异步请求等，就会将对应任务添加到事件触发线程中，在对应事件符合触发条件时触发，就是把事件添加到待处理队列队尾，等JS引擎处理</p><h2 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h2><p>当我们向浏览器输入HTML、CSS 、JavaScript代码，浏览器通过渲染就可以生成相应的页面。渲染按照时间顺序，可分为如下几个子阶段：<strong>构建DOM树、样式计算、布局阶段、分层、绘制、分块、光栅化和合成。</strong></p><h3 id="构建DOM树"><a href="#构建DOM树" class="headerlink" title="构建DOM树"></a>构建DOM树</h3><h4 id="为什么要构建DOM树？"><a href="#为什么要构建DOM树？" class="headerlink" title="为什么要构建DOM树？"></a>为什么要构建DOM树？</h4><p>这是因为浏览器无法直接理解和使用HTML，所以需要将HTML转换为浏览器能够理解的结构——DOM树。<br><img src="https://cdn.nlark.com/yuque/0/2022/webp/25385691/1661243176167-ac73c281-6e5f-4fe5-8bac-e13acd4d8428.webp#clientId=udd2135a5-78e0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9e6989bf&originHeight=890&originWidth=1538&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u8d13d5c8-75d7-4a71-8f30-cd577c53bb0&title="></p><h4 id="如何构建？"><a href="#如何构建？" class="headerlink" title="如何构建？"></a>如何构建？</h4><p><strong>HTML 解析器是等整个 HTML 文档加载完成之后开始解析的，还是随着 HTML 文档边加载边解析的？</strong><br>HTML 解析器并不是等整个文档加载完成之后再解析的，而是随着 HTML 文档边加载边解析的，是网络进程加载了多少数据，HTML 解析器便解析多少数据。<br><strong>流程</strong>：网络进程接收到响应头之后，会根据响应头中的 content-type 字段来判断文件的类型，比如 content-type 的值是“text&#x2F;html”，那么浏览器就会判断这是一个 HTML 类型的文件，根据这个判断选择相应的解析引擎，然后为该请求选择或者创建一个渲染进程。渲染进程准备好之后，网络进程和渲染进程之间会建立一个共享数据的管道，网络进程接收到数据后就往这个管道里面放，而渲染进程则从管道的另外一端不断地读取数据，并同时将读取的数据传送给 HTML 解析器。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25385691/1661244282590-426e30c4-a11a-48d3-96ad-d8aec8d38e9d.png#clientId=udd2135a5-78e0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=487&id=u029acbe5&name=image.png&originHeight=730&originWidth=746&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76146&status=done&style=none&taskId=ud78df389-b29e-4cde-b63a-ef6c5a5d3b2&title=&width=497.3333333333333" alt="image.png"></p><p><strong>第一步：通过分词器将字节流转换为 Token。</strong><br>分词器先将HTML字节流转换为一个个 Token，分为 Tag Token 和文本 Token。将 HTML 代码通过词法分析生成的 Token 如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2022/webp/25385691/1661243088842-869d9a0b-54c6-4ea0-aa98-3fe9151fb1a3.webp#clientId=udd2135a5-78e0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ufb56ee82&originHeight=340&originWidth=1442&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u2660f413-fe42-490a-8204-2303acbf9f3&title="><br><strong>第二步：是将 Token 解析为 DOM 节点</strong><br>HTML 解析器维护了一个Token 栈结构，该 Token 栈主要用来计算节点之间的父子关系，在第一个阶段中生成的 Token 会被按照顺序压到这个栈中。具体的处理规则如下所示：</p><ul><li>如果压入到栈中的是StartTag Token，HTML 解析器会为该 Token 创建一个 DOM 节点，然后将该节点加入到 DOM 树中，它的父节点就是栈中相邻的那个元素生成的节点。</li><li>如果分词器解析出来是文本 Token，那么会生成一个文本节点，然后将该节点加入到 DOM 树中，文本 Token 是不需要压入到栈中，它的父节点就是当前栈顶 Token 所对应的 DOM 节点。</li><li>如果分词器解析出来的是EndTag 标签，比如是 EndTag div，HTML 解析器会查看 Token 栈顶的元素是否是 StarTag div，如果是，就将 StartTag div 从栈中弹出，表示该 div 元素解析完成。</li></ul><p>通过分词器产生的新 Token 就这样不停地压栈和出栈，整个解析过程就这样一直持续下去，直到分词器将所有字节流分词完成。<br><strong>第三阶段是将 DOM 节点添加到 DOM 树中</strong><br>将创建的 DOM 节点，添加到 document 上，形成 DOM 树。<br><img src="https://cdn.nlark.com/yuque/0/2022/webp/25385691/1661244858142-5e94563b-115a-4fcb-b043-5044b5f8f923.webp#clientId=udd2135a5-78e0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=235&id=u9eb87841&originHeight=938&originWidth=1454&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uabf87166-4a67-4a3f-892d-024959ecdbd&title=&width=364">     <img src="https://cdn.nlark.com/yuque/0/2022/webp/25385691/1661245029569-c161c849-fc3e-48da-9c32-e7771f4a0148.webp#clientId=udd2135a5-78e0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=252&id=u9162612a&originHeight=1006&originWidth=1432&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ua4574053-4f9b-41ee-bcc0-7237047ba6f&title=&width=358"></p><h3 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>样式计算的目的是为了计算出DOM节点中每个元素的具体样式。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p><strong>第一步：把CSS转换为浏览器能够理解的结构</strong><br><strong>浏览器无法直接理解代码所写的CSS样式，必须转换为浏览器能够识别的结构styleSheets</strong><br>CSS样式来源主要有三种：</p><ol><li>通过link引用的外部CSS文件</li><li><style>标记内的 CSS</li><li>元素的style属性内嵌的CSS</li></ol><p>可以在控制台输入document.styleSheets查看当前页面的styleSheets<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25385691/1657612154061-2bfa934d-74d0-4665-82f5-eeac24f40e38.png#clientId=ub13e2e87-3542-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=454&id=u66d868d4&name=image.png&originHeight=681&originWidth=951&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59785&status=done&style=none&taskId=u55bdf8a4-0c4d-429b-ab63-d3a944db65f&title=&width=634" alt="image.png"><br><strong>第二步： 转换样式表中的属性值，使其标准化</strong><br>标准化属性值就是将比如em、blue、bold，这种的转换为px、rgb(0,0,255)、700<br><strong>第三步：计算出DOM树中每个节点的具体样式</strong><br>样式的计算涉及到CSS的继承和层叠规则<br><strong>样式的继承</strong>是如果子节点没有定义相应的样式，会继承父节点的样式，如果没有定义页面任何样式，会继承浏览器的默认样式（UserAgent)<br><strong>样式的层叠</strong>就是处理多个地方定义了同个属性计算出最终属性值的算法</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>这个阶段就是将输入的CSS文本，经过以上3个步骤生成每个DOM节点的样式，并保存在ComputedStyle的结构内<br><img src="https://cdn.nlark.com/yuque/0/2022/png/25385691/1661245533465-c11fff25-245d-4c72-9646-126778d951f7.png#clientId=udd2135a5-78e0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=495&id=ub537b266&name=image.png&originHeight=742&originWidth=1183&originalType=binary&ratio=1&rotation=0&showTitle=false&size=119985&status=done&style=none&taskId=ua62fcc95-810d-43e4-924e-aeac6bafd7b&title=&width=788.6666666666666" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> 渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/15/nihao/"/>
      <url>/2022/08/15/nihao/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript原型</title>
      <link href="/2022/07/20/javascript%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/20/javascript%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="四-构造函数、原型链、继承、类"><a href="#四-构造函数、原型链、继承、类" class="headerlink" title="四 构造函数、原型链、继承、类"></a>四 构造函数、原型链、继承、类</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h4 id="什么是构造函数？"><a href="#什么是构造函数？" class="headerlink" title="什么是构造函数？"></a>什么是构造函数？</h4><p>其实构造函数和普通函数没有特别的区别，任何普通函数只要使用了new操作符就是构造函数。（一般构造函数名的首字母是大写，普通函数小写），如下</p><h4 id="使用new操作符创建构造函数的实例整个过程？"><a href="#使用new操作符创建构造函数的实例整个过程？" class="headerlink" title="使用new操作符创建构造函数的实例整个过程？"></a>使用new操作符创建构造函数的实例整个过程？</h4><p>例如上面例子，</p><p>1.首先在内存显式创建一个新对象。</p><p>2.将新对象的[[prototype]]属性赋值为构造函数的prototype属性。</p><p>3.构造函数内部的this赋值为这个新对象（这个就是this指向的第四种情况）</p><p>4.执行构造函数内部的代码，给新对象添加属性。</p><p>5.如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的对象。</p><p>注意，</p><p>dog的constructor属性会指向Dog构造函数</p><p>Dog的prototype属性和dog的 ** proto ** 指向同一个原型对象。</p><h4 id="构造函数存在的问题？"><a href="#构造函数存在的问题？" class="headerlink" title="构造函数存在的问题？"></a>构造函数存在的问题？</h4><p>当构造函数里面有定义方法时，创建实例时都会创建方法，而不是指向同一个方法？</p><p>解决方法？</p><p>实际上</p><p>this.sayName&#x3D;function(){console.log(this.name); }等价于this.sayName&#x3D;new function(){console.log(this.name);}</p><p>所以每个实例的方法都不是指向同一个</p><p>这样就可以了，this指向是第二种隐式绑定</p><p>上面问题用原型解决更好，使用原型对象的好处就是在原型对象上定义的属性和方法都可以被对象共享（所以在原型对象上定义sayName方法就可以实现应用同一个函数）</p><p>注意，如果用 下面这样改要加上constructor</p><p>[[prototype]]是什么？</p><p>所有对象在创建时都会生成一个[[prototype]]属性（包括函数，对象，数组等Object类型），几乎都会被赋予一个非空的值。</p><p>介绍一下各种跟原型相关的方法</p><p>A.isPrototypeOf(B)                 检查A是否是B的原型</p><p>Object.getPrototypeOf（B）获取B原型对象</p><p>Object.setPrototypeOf(A,B)   把对象B设置为对象A的原型对象</p><p>B&#x3D;Object.create(A)                  把对象A设置为对象B的原型</p><p>A.hasOwnProperty(“属性”)    A上是否有对应属性，若属性来自原型链则为false</p><p>“属性” in 对象                            A上是否有对应属性，不管来自本对象还是原型链有就是true</p><p>hasPrototypeProperty(A,”属性”)    是否只有A的原型有该属性，若A上也有则false</p><p>for…in…                                           遍历对象查找的是整条prototype链(不可枚举的Enumberable:false不可以访问)</p><p>Object.keys(A)                                 遍历A上可枚举的属性包括prototype链</p><p>Object.getOwnPropertyNames(A)   遍历A上所有属性无论能否枚举包括prototype链</p><p>Object.values()                                     接收一个对象返回它们内容的数组，对象值的数组</p><p>Object.entries()                                    接收一个对象返回它们内容的数组，键值对数组</p><p>[[prototype]]链应该就是原型链。</p><p>Dog原型链的整个结构基本如下（但是这个还不是真正的继承）</p><h3 id="继承（补充优缺点…"><a href="#继承（补充优缺点…" class="headerlink" title="继承（补充优缺点…)"></a>继承（补充优缺点…)</h3><p><strong>原型链继承</strong></p><p>举个简单的例子</p><p>具体原型链如下图</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/25385691/1657873908278-b85d5c73-72d0-481c-a93e-00f8760c4869.png#averageHue=%23f4f3f3&clientId=u43e0bddf-219c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=459&id=uab9ba526&name=image-20220124151130973.png&originHeight=688&originWidth=1317&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31101&status=done&style=none&taskId=ufb7f76ee-f4c2-4f23-b233-4ee02a5d754&title=&width=878" alt="image-20220124151130973.png"></p><p>其中，实现继承的句子是Sub.prototype&#x3D;new Super()，实现Sub继承Super</p><p>最后，s.getSuper(),通过3步搜索s—-&gt;Sub.prototype—&gt;Super.prototype最后一步找到这个方法</p><p>补充：因为所有的引用类型都继承自Object，所以后面省略的是Object.prototype,Object.prototype的方法有如下，所以自定义的引用类型都有以下这些方法。</p><p>判断继承关系</p><ol><li>A instanceof B        A是否是B的实例（是 true,否 false)</li><li>A.prototype.isPrototypeOf(B)      A是否是B的原型</li></ol><p>存在的问题</p><p>1.所有继承的属性和方法都会在对象实例间共享，无法做到实例私有（就是一个实例改变了原型链上的属性或方法，其他实例也会改变）</p><p>2.子类型在实例化时不能给父类型的构造函数传参</p><p>盗用构造函数</p><p>利用call或apply方法和改变this指向，实现继承</p><p>优点：解决属性共享问题和向父类构造函数传参问题</p><p>缺点：必须在构造函数中定义方法，函数不能重用。子类也不能访问父类原型上定义的方法。</p><p>组合继承（最流行的方法）</p><p>使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例属性（就是方法在原型链上可以重用，属性用盗用构造函数各个实例可不同）</p><p>缺点：有效率问题，会对父类构造函数调用两次，一次是创建子类原型时，二次是在子类构造函数中调用。</p><p>原型式继承</p><p>object函数的原型链图</p><p>这种继承适合有一个对象，想在它的基础上在创建一个新对象。类似于复制一个对象，然后再对其进行添加。</p><p>Object.create()和object方法效果相同。</p><p>寄生式继承</p><p>其实就是对原型式继承的封装而已，缺点是难以重用。</p><p>寄生式组合继承（这种应该是最有效的继承方式了）</p><p>其实就是通过寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript之this</title>
      <link href="/2022/07/15/javascript%E7%9A%84this%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/15/javascript%E7%9A%84this%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="三-this指向问题"><a href="#三-this指向问题" class="headerlink" title="三 this指向问题"></a>三 this指向问题</h2><p>this是在运行是绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p><h4 id="默认绑定-this指向全局对象window"><a href="#默认绑定-this指向全局对象window" class="headerlink" title="默认绑定(this指向全局对象window)"></a>默认绑定(this指向全局对象window)</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上代码中，f()是不带任何修饰的函数引用进行调用的，所以是属于默认绑定</p><h4 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f   <span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况是函数的引用有上下文对象的（obj对象的上下文），所以隐式绑定规则会把函数调用中的this绑定到这个上下文对象</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> obj<span class="token punctuation">:</span>obj<span class="token punctuation">}</span>obj1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用的是最接近的变量a</strong></p><p>注意，<strong>将如上要调用的函数赋值给另外变量后,”隐式“会消失</strong><br>以下3个例子都属于赋值操作，setTimeout()函数实现也是类似的<br>例一:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>   a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>   f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span>obj<span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例二：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token function">fun</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>相当于将f赋值给func</strong></p><p>例三:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>f<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h4><p>指定某个对象为函数调用时的this，<strong>call、apply、bind函数</strong></p><p><strong>call</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>apply</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>argumments<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//argumments是固定变量，不能改名</span><span class="token punctuation">}</span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>bind</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h4><p>所有函数都可以用new来调用，new调用的过程见下文  <strong>使用new操作符创建构造函数的实例整个过程？</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>this四条规则的优先级就不一一细说，new绑定&gt;显式绑定&gt;隐式绑定&gt;默认绑定（可参考《你不知道的javaScript上》91~95页）</li><li>当call、apply、bind需要忽略this绑定时，可以传入null(但是会改变this绑定，函数中如果使用this会绑定到全局对象)，可以用∅。</li><li>还有一种叫软绑定的（好像很复杂。。。。《你不知道的javaScript上》98 有空再看看吧）</li><li>特殊的箭头函数，箭头函数中的this指的是其外层作用域.<br>&#96;&#96;&#96;javascript<br>function f(a){<br>return (a)&#x3D;&gt;{<br> &#x2F;&#x2F;这里面的this是f里的<br> console.log(this.a);<br>  }<br>}</li></ol><p>var obj1&#x3D;{<br>  a:1<br>}</p><p>var obj2&#x3D;{<br>  a:2<br>}</p><p>var other&#x3D;f.call(obj1);<br>other.call(obj2);&#x2F;&#x2F;1<br>&#96;&#96;&#96;</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript上下文</title>
      <link href="/2022/07/13/javascript%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
      <url>/2022/07/13/javascript%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="二-上下文"><a href="#二-上下文" class="headerlink" title="二 上下文"></a>二 上下文</h2><h3 id="全局上下文："><a href="#全局上下文：" class="headerlink" title="全局上下文："></a>全局上下文：</h3><p>只有一个，其实就是window对象，所有<strong>通过var定义的全局变量和函数</strong>都会成为window对象的属性和方法，（let、const的顶级声明不会定义在全局上下文中），上下文在其所有代码都执行完毕后会被销毁。</p><h3 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文:"></a>函数执行上下文:</h3><p>有无数个，每个函数调用都有自己的上下文，当代码执行流进入函数时，函数的上下文被推到一个上下文栈中，当函数执行完毕后，上下文栈会弹出该函数上下文，将控制权返还给之前的上下文栈上。</p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> b<span class="token operator">=</span><span class="token number">2</span>  <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的执行时栈如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658298655944-4b4b3eab-1e73-4d42-a1b9-74085e180c88.jpeg"></p><h3 id="执行上下文和作用域的区别"><a href="#执行上下文和作用域的区别" class="headerlink" title="执行上下文和作用域的区别"></a>执行上下文和作用域的区别</h3><h4 id="区别1"><a href="#区别1" class="headerlink" title="区别1"></a>区别1</h4><p>全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时已经确定了，而不是在函数调用时。<br>全局执行上下文是在全局作用域确定后，js代码马上执行之前创建。<br>函数执行上下文是在调用函数时，函数体代码马上执行前创建。</p><h4 id="区别2"><a href="#区别2" class="headerlink" title="区别2"></a>区别2</h4><p>作用域是<strong>静态的</strong>，只要函数定义好了就一直存在，并且不再发生变化。<br>执行上下文时<strong>动态的</strong>，调用函数时创建，调用结束后就会自动释放。</p><blockquote><p>全局执行上下文存在在整个页面的生存周期内，全局执行上下文只有一份<br>函数执行上下文在函数执行结束之后会被销毁</p></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>区别3</p><p>执行上下文对象是从属于所在的作用域<br>全局上下文环境—-&gt;全局作用域<br>函数上下文环境—-&gt;对应的函数作用域</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript作用域</title>
      <link href="/2022/07/12/javascript%E9%97%AD%E5%8C%85/"/>
      <url>/2022/07/12/javascript%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="二-闭包问题"><a href="#二-闭包问题" class="headerlink" title="二 闭包问题"></a>二 闭包问题</h2><h3 id="简单定义"><a href="#简单定义" class="headerlink" title="简单定义"></a>简单定义</h3><p><strong>闭包简单来讲就是一个外部函数里面嵌套一个内部函数，内部函数引用了外部函数的变量等内容，外部函数将内部函数作为返回值(其实也未必要以返回值的形式，只要能够把内部函数传递出去就行），这就是一个闭包。</strong></p><p>有了闭包，这样就可以在外部函数以外的地方调用内部函数，本来一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。但是闭包却可以继续保持对该函数作用域的引用,闭包使得函数可以继续访问定义时的词法作用域。</p><ul><li>优点：使得外部可以访问内部函数等，延长内部函数等的寿命</li><li>缺点：滥用闭包造成内存泄露</li></ul><p>如下为一个简单的闭包：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> inner<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> other<span class="token operator">=</span><span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本来outer函数执行完之后，它的执行上下文应该是会被销毁的，但是通过inner（outer函数的闭包），在outer函数执行结束后还能打印出a的值</p><p><strong>调用栈的变化如下：</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658306075281-82b4dd56-c89c-48b8-8aea-624be31669d3.jpeg"></p><p>其实other函数的执行上下文中并没有变量a，当other函数执行到输入变量a时，其实是从作用域链<strong>other函数作用域–&gt;outer函数的闭包–&gt;全局作用域，</strong></p><h3 id="使用回调函数也是闭包"><a href="#使用回调函数也是闭包" class="headerlink" title="使用回调函数也是闭包"></a>使用回调函数也是闭包</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">'你好呀'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wait（）执行1000毫秒之后，它的内部作用域并不会消失，timer函数依然保持有wait()作用域的闭包</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>模块模式需要具备两个条件</p><p>1.必须有外部封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）</p><p>2.封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</p><p>注意：一个从函数调用所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块。</p><p>单例模块化（IIFE立刻执行函数）</p><p><code>var module=(function m()&#123;</code></p><p><code>var a=&quot;cool&quot;;</code></p><p><code>var b=[1,2,3];</code></p><p><code>function f()&#123;</code></p><p>    <code>console.log(a);</code></p><p><code>&#125;</code></p><p><code>function f1()&#123;</code></p><p>    <code>console.log(b.join(&#39;!&#39;));</code></p><p><code>&#125;</code></p><p><code>return &#123;</code></p><p>    <code>f:f,</code></p><p>    <code>f1:f1</code></p><p><code>&#125;</code></p><p><code>&#125;)();</code></p><p><code>module.f();//&#39;cool&#39;</code></p><p><code>module.f1();//1!2!3</code></p><h2 id="三-this指向问题"><a href="#三-this指向问题" class="headerlink" title="三 this指向问题"></a>三 this指向问题</h2><p>this是在运行是绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p><h4 id="默认绑定-this指向全局对象window"><a href="#默认绑定-this指向全局对象window" class="headerlink" title="默认绑定(this指向全局对象window)"></a>默认绑定(this指向全局对象window)</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上代码中，f()是不带任何修饰的函数引用进行调用的，所以是属于默认绑定</p><h4 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f   <span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况是函数的引用有上下文对象的（obj对象的上下文），所以隐式绑定规则会把函数调用中的this绑定到这个上下文对象</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> obj<span class="token punctuation">:</span>obj<span class="token punctuation">}</span>obj1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用的是最接近的变量a</strong></p><p>注意，<strong>将如上要调用的函数赋值给另外变量后,”隐式“会消失</strong><br>以下3个例子都属于赋值操作，setTimeout()函数实现也是类似的<br>例一:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>   a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>   f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span>obj<span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例二：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token function">fun</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>相当于将f赋值给func</strong></p><p>例三:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>f<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h4><p>指定某个对象为函数调用时的this，<strong>call、apply、bind函数</strong></p><p><strong>call</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>apply</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>argumments<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//argumments是固定变量，不能改名</span><span class="token punctuation">}</span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>bind</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h4><p>所有函数都可以用new来调用，new调用的过程见下文  <strong>使用new操作符创建构造函数的实例整个过程？</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> other<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>this四条规则的优先级就不一一细说，new绑定&gt;显式绑定&gt;隐式绑定&gt;默认绑定（可参考《你不知道的javaScript上》91~95页）</li><li>当call、apply、bind需要忽略this绑定时，可以传入null(但是会改变this绑定，函数中如果使用this会绑定到全局对象)，可以用∅。</li><li>还有一种叫软绑定的（好像很复杂。。。。《你不知道的javaScript上》98 有空再看看吧）</li><li>特殊的箭头函数，箭头函数中的this指的是其外层作用域.<br>&#96;&#96;&#96;javascript<br>function f(a){<br>return (a)&#x3D;&gt;{<br> &#x2F;&#x2F;这里面的this是f里的<br> console.log(this.a);<br>  }<br>}</li></ol><p>var obj1&#x3D;{<br>  a:1<br>}</p><p>var obj2&#x3D;{<br>  a:2<br>}</p><p>var other&#x3D;f.call(obj1);<br>other.call(obj2);&#x2F;&#x2F;1</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript作用域</title>
      <link href="/2022/07/10/javascript%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2022/07/10/javascript%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript进阶"><a href="#JavaScript进阶" class="headerlink" title="JavaScript进阶"></a>JavaScript进阶</h1><h2 id="一-作用域问题"><a href="#一-作用域问题" class="headerlink" title="一 作用域问题"></a>一 作用域问题</h2><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>词法作用域就是指作用域是由<strong>代码中函数声明的位置来决定的</strong>，所以词法作用域是<strong>静态的作用域</strong>，通过它就能够预测代码在执行过程中如何查找标识符</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果注释这一行结果是undefined</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子是一个常见的问题，或许多数人会认为调用f1应该输出的是3，会把这个问题理解成一个作用域链的问题，但是其实不全是，第九行是<strong>f函数在f1里面调用，不是在f1里定义，f的上级作用域是全局，</strong>所以其实作用域链是<strong>f函数作用域–&gt;全局作用域和f1函数作用域–&gt;全局作用于，</strong>所以调用f1输出的是3。这就是体现了一个词法作用域的概念，就是它是一个静态的作用域，是编写代码时决定的，跟在哪里调用没关系。</p><p>改成如下，作用域就是<strong>f函数作用域–&gt;f1函数作用域–&gt;全局作用域</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果注释这一行结果是undefined</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>全局作用域就是在程序任何地方都能访问，window对象的内置属性都属于全局作用域</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数作用域指的是，属于这个函数的全部变量可以在函数的范围内使用，但是函数外不行。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 同样的变量,已重复赋值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用栈如下</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658299563727-13d8af3d-5221-4af2-bdb7-42a15493e84f.jpeg"><br>因为变量x处于函数test的执行上下文中，函数test编译后变量x的值首先为undefined，接着执行赋值语句，先赋值为1，之后又赋值为2，所以，执行最后两个输出语句时，输出的值是2</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>简单理解就是{ }内的作用域就称为块级作用域，比如if、while等括号里。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错uncaught ReferenceError: b is not defined，如果let改成var就是4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>let不会在块级作用域变量提升，var会</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错uncaught ReferenceError: b is not defined，如果let改成var就是undefined</span><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子分析：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//把上面的test例子的x变量用let定义</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> y<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> z<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 同样的变量,已重复赋值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test的执行上下文：<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/25385691/1658301762871-b0d0d6a2-abc8-4622-89c9-1755f7266489.jpeg"><br>上面的图是test执行到第8行后的执行上下文，let声明的变量和var的不同，函数内部通过var声明的变量，在编译阶段全都var被存放到变量环境里面了，通过let声明的变量会在编译阶段会被存放到词法环境（Lexical Environment）中，而且<strong>不同块是不同是词法环境，</strong>if块是单独的一个环境。<strong>词法环境是一个栈结构，</strong>第9行的输出是if块里的x为2，之后块执行完毕，<strong>if块的环境弹出</strong>，之后输出的x是底下的1。<br><strong>一个变量的查找的过程的从词法环境的栈顶到栈底，再从变量环境里从底往上找(如上图的红线）</strong></p><h3 id="var、let、const的区别"><a href="#var、let、const的区别" class="headerlink" title="var、let、const的区别"></a>var、let、const的区别</h3><table><thead><tr><th></th><th>作用域</th><th>变量提升</th><th>重复声明同一变量</th><th>声明的变量能否改</th><th>成为window对象的属性</th></tr></thead><tbody><tr><td>var</td><td>函数作用域</td><td>有</td><td>可以</td><td>能</td><td>是</td></tr><tr><td>let</td><td>块级作用域</td><td>没有</td><td>不可以</td><td>能</td><td>否</td></tr><tr><td>const</td><td>块级作用域</td><td>没有</td><td>不可以</td><td>不能</td><td>否</td></tr></tbody></table><p>一个常见的问题</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5 5 5 5 5</span>解决方法方法一<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>方法二<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么是暂时性死区？"><a href="#什么是暂时性死区？" class="headerlink" title="什么是暂时性死区？"></a>什么是暂时性死区？</h3><p>MDN上的定义：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let?retiredLocale=he">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let?retiredLocale=he</a></p><p><a href="https://juejin.cn/post/6983702070293430303">https://juejin.cn/post/6983702070293430303</a></p><blockquote><p>个人感觉不用去纠结let有没有变量提升，变量提升就是一段代码在编译阶段是能够识别到var和let创建的变量的，只会对二者的操作不一样：对var定义的变量初始化为undefined，而let定义的变量仍然处于未初始化状态。</p></blockquote><p>在用let声明某变量之前引用该变量，就会出现暂时性死区。其实就是因为let没有变量提升，而var有。</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错 Cannot access 'abc' before initialization</span><span class="token keyword">let</span> abc<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><h4 id="主要有以下3条规律："><a href="#主要有以下3条规律：" class="headerlink" title="主要有以下3条规律："></a>主要有以下3条规律：</h4><p><strong>1.变量和函数在内的所有声明都会在执行代码前先被处理,先编译后执行。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于   var a;a=2;console.log(a);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//相当于  var b; console.log(b); b=1;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.函数声明会提升，但是函数表达式不会</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//TypeError</span><span class="token keyword">var</span> f1<span class="token operator">=</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.变量和函数名称相同时，函数会先提升，然后才是变量（个人感觉这个结论不太对）</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span><span class="token keyword">var</span> f<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>f<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果定义了两个同名的函数，后定义的会覆盖前定义的</p></blockquote><p>总结1：<br><strong>所谓的变量提升，是指在JavaScript代码执行过程中，JavaScript引擎把变量的声明部分和函数的声明部分提升到代码开头的“行为”。变量被提升后，会给变量设置默认值undefined</strong>。</p><h4 id="变量提升的原理"><a href="#变量提升的原理" class="headerlink" title="变量提升的原理"></a>变量提升的原理</h4><p>一段JavaScript代码在执行之前需要被JavaScript引擎编译，编译完成之后，才会进入执行阶段<br><strong>编译阶段</strong><br>编译的结果是形成执行上下文和可执行代码，<br><strong>执行上下文</strong>是JavaScript执行一段代码时的运行环境，比如调用一个函数，就会进入这个函数的执行上下文，确定该函数在执行期间用到的诸如this、变量、对象以及函数等。执行上下文中存在一个变量环境的对象（Viriable Environment），该对象中保存了变量提升的内容。<br><strong>可执行代码</strong>就是除了声明外的代码</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码在编译时，第3行有var声明的变量，js引擎会在在环境对象中创建一个名为a的属性，并使用undefined对其初始化，第4行有一个通过function定义的函数，所以它将函数定义存储到堆(heap）中，并在环境对象中创建一个f的属性，然后将该属性值指向堆中函数的位置。<br>在执行阶段的时候函数f执行输出<strong>“函数”</strong>，执行第二行时，环境对象中a的值为<strong>undefined</strong>，输出undefined，之后再执行<strong>a&#x3D;1</strong></p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>一般情况下，变量取值到创建这个变量的函数作用域去取值，但是如果在当前作用域中没有查找到值，就会想上级作用域去查找，直到查到全局作用域，这么查找的过程形成的链条叫作用域链。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> f1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node学习</title>
      <link href="/2022/01/05/node%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/05/node%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="从命令行接受输入"><a href="#从命令行接受输入" class="headerlink" title="从命令行接受输入"></a>从命令行接受输入</h2><p> readline模块可以每次一行地从可读流（例如 process.stdin 流）获取输入。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'readline'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  input<span class="token punctuation">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>  output<span class="token punctuation">:</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">}</span><span class="token punctuation">)</span>readline<span class="token punctuation">.</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`你叫什么名字?`</span></span><span class="token punctuation">,</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`你好 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span>  readline<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Node模块规范"><a href="#Node模块规范" class="headerlink" title="Node模块规范"></a>Node模块规范</h2><p>Node中模块用的是CommonJS规范，有以下两种使用方式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//导出的文件中</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式一</span>exports<span class="token punctuation">.</span>sum<span class="token operator">=</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导出方式二</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    sum<span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//导入的文件</span> <span class="token keyword">const</span> sum<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//文件路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CommonJS 以同步的方式加载模块。这一点其实可以理解，因为 Node 通常是运行于服务端，而在服务端模块文件通常存放在本地磁盘，读取速度比起前端通过网络下载要快得多，所以一般没有什么问题（但是因此也不适用于前端）</li><li>CommonJS 输出的是模块的拷贝，这一点与 ESNext 模块不同。模块一旦输出后便独立（即后续更改不影响）</li><li>Node 中对引入过的模块都会进行缓存，减少后续引入的开销。</li></ul><h2 id="nodejs常用内置模块"><a href="#nodejs常用内置模块" class="headerlink" title="nodejs常用内置模块"></a>nodejs常用内置模块</h2><ul><li>fs ，文件操作模块，例如fs.readFile（异步读取文件）、fs.readFileSync（同步读取文件）</li><li>http ，网络操作模块，用于创建服务器。如 http.createServer</li><li>path ，路径操作模块，用于获取和处理文件路径</li><li>url ，url 模块，主要是一些操作url的API，例如url解析</li></ul><h2 id="Buffer数据类型"><a href="#Buffer数据类型" class="headerlink" title="Buffer数据类型"></a>Buffer数据类型</h2><p>Node.js 中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区，Buffer 类似于一个整数数组。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//根据一个数组创建 Buffer 对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//&lt;Buffer 61 62 63> 以16进制存在buffer对象中</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">"nodejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//根据一个字符串创建 Buffer 对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> buf3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 创建了可以存放10个字符的buffer对象</span>buf3<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//按照ASCII表的值，转16进制，存在buffer中</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;Buffer .....  > 需要  toString()   才能看到里面的真实数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两个文件"><a href="#两个文件" class="headerlink" title="两个文件"></a>两个文件</h2><h3 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h3><p>package.json 是项目描述文件，保存在项目的根目录下面，记录了当前的项目信息，用npm init -y命令生成<br>例子如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"plant"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>  <span class="token string">"private"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"serve"</span><span class="token punctuation">:</span> <span class="token string">"vue-cli-service serve"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"vue-cli-service build"</span><span class="token punctuation">,</span>    <span class="token string">"lint"</span><span class="token punctuation">:</span> <span class="token string">"vue-cli-service lint"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"axios"</span><span class="token punctuation">:</span> <span class="token string">"^0.26.1"</span><span class="token punctuation">,</span>    <span class="token string">"core-js"</span><span class="token punctuation">:</span> <span class="token string">"^3.6.5"</span><span class="token punctuation">,</span>    <span class="token string">"echarts"</span><span class="token punctuation">:</span> <span class="token string">"^5.3.3"</span><span class="token punctuation">,</span>    <span class="token string">"echarts-gl"</span><span class="token punctuation">:</span> <span class="token string">"^2.0.9"</span><span class="token punctuation">,</span>    <span class="token string">"element-plus"</span><span class="token punctuation">:</span> <span class="token string">"^2.1.0"</span><span class="token punctuation">,</span>    <span class="token string">"esri-loader"</span><span class="token punctuation">:</span> <span class="token string">"^3.4.0"</span><span class="token punctuation">,</span>    <span class="token string">"postcss-px2rem"</span><span class="token punctuation">:</span> <span class="token string">"^0.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"qs"</span><span class="token punctuation">:</span> <span class="token string">"^6.10.3"</span><span class="token punctuation">,</span>    <span class="token string">"sass"</span><span class="token punctuation">:</span> <span class="token string">"^1.26.5"</span><span class="token punctuation">,</span>    <span class="token string">"sass-loader"</span><span class="token punctuation">:</span> <span class="token string">"^7.3.1"</span><span class="token punctuation">,</span>    <span class="token string">"sass-resources-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.5"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"vue-amap"</span><span class="token punctuation">:</span> <span class="token string">"^0.5.10"</span><span class="token punctuation">,</span>    <span class="token string">"vue-axios"</span><span class="token punctuation">:</span> <span class="token string">"^3.4.1"</span><span class="token punctuation">,</span>    <span class="token string">"vue-router"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0-0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@vue/cli-plugin-babel"</span><span class="token punctuation">:</span> <span class="token string">"~4.5.15"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/cli-plugin-eslint"</span><span class="token punctuation">:</span> <span class="token string">"~4.5.15"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/cli-plugin-router"</span><span class="token punctuation">:</span> <span class="token string">"~4.5.15"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/cli-service"</span><span class="token punctuation">:</span> <span class="token string">"~4.5.15"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/compiler-sfc"</span><span class="token punctuation">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"babel-eslint"</span><span class="token punctuation">:</span> <span class="token string">"^10.1.0"</span><span class="token punctuation">,</span>    <span class="token string">"eslint"</span><span class="token punctuation">:</span> <span class="token string">"^6.7.2"</span><span class="token punctuation">,</span>    <span class="token string">"eslint-plugin-vue"</span><span class="token punctuation">:</span> <span class="token string">"^7.0.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"eslintConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"root"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"plugin:vue/vue3-essential"</span><span class="token punctuation">,</span>      <span class="token string">"eslint:recommended"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"parserOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"parser"</span><span class="token punctuation">:</span> <span class="token string">"babel-eslint"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"browserslist"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"> 1%"</span><span class="token punctuation">,</span>    <span class="token string">"last 2 versions"</span><span class="token punctuation">,</span>    <span class="token string">"not dead"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>**version **表明了当前的版本。</p></li><li><p><strong>name</strong> 设置了应用程序&#x2F;软件包的名称。</p></li><li><p><strong>description</strong> 是应用程序&#x2F;软件包的简短描述。</p></li><li><p>**main **设置了应用程序的入口点。</p></li><li><p><strong>private</strong> 如果设置为 true，则可以防止应用程序&#x2F;软件包被意外地发布到 npm。</p></li><li><p><strong>scripts</strong> 定义了一组可以运行的 node 脚本。</p></li><li><p><strong>dependencies</strong> 设置了作为依赖安装的 npm 软件包的列表。</p></li><li><p>**devDependencies **设置了作为开发依赖安装的 npm 软件包的列表。</p></li><li><p><strong>engines</strong> 设置了此软件包&#x2F;应用程序在哪个版本的 Node.js 上运行。</p></li><li><p><strong>browserslist</strong> 用于告知要支持哪些浏览器（及其版本）。</p><h3 id="package-lock-json-文件"><a href="#package-lock-json-文件" class="headerlink" title="package-lock.json 文件"></a>package-lock.json 文件</h3></li><li><p>记录模块与模块之间的依赖关系</p></li><li><p>锁定包的版本</p></li><li><p>记录项目所依赖第三方包的树状结构和包的下载地址，加快重新安装的下载速度</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2></li><li><p>NODE_ENV是一个环境变量，NODE_ENV&#x3D;“production”表示在开发环境执行代码，NODE_ENV&#x3D;”development”表示在生产环境执行代码</p></li><li><p>stream pipe（流），Node中可以使用流进行数据输入输出（特别是当响应数据是大文件时，可以提高传送效率）</p></li></ul><h1 id="Node重点"><a href="#Node重点" class="headerlink" title="Node重点"></a>Node重点</h1><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><h3 id="什么是事件循环？"><a href="#什么是事件循环？" class="headerlink" title="什么是事件循环？"></a>什么是事件循环？</h3><ol><li>事件循环类型像while循环那样，每执行一次循环体就称为一个Tick，每个 Tick 的过程就是查看是否有事件待处理。如果有就取出事件及其相关的回调函数，然后进入下一个循环，如果不再有事件处理，就退出进程。</li><li>Node的事件循环机制和浏览器是不同的。</li><li>这些事件主要是网络请求、文件I&#x2F;O等等<h3 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h3>Eventloop就是一个循环的一个Tick<br>先上Eventloop图：<pre class="line-numbers language-javascript"><code class="language-javascript">   ┌───────────────────────────┐┌─<span class="token operator">></span>│           timers          ││  └─────────────┬─────────────┘│  ┌─────────────┴─────────────┐│  │     pending callbacks     ││  └─────────────┬─────────────┘│  ┌─────────────┴─────────────┐│  │       idle<span class="token punctuation">,</span> prepare       ││  └─────────────┬─────────────┘      ┌───────────────┐│  ┌─────────────┴─────────────┐      │   incoming<span class="token punctuation">:</span>   ││  │           poll            │<span class="token operator">&lt;</span>─────┤  connections<span class="token punctuation">,</span> ││  └─────────────┬─────────────┘      │   data<span class="token punctuation">,</span> etc<span class="token punctuation">.</span>  ││  ┌─────────────┴─────────────┐      └───────────────┘│  │           check           ││  └─────────────┬─────────────┘│  ┌─────────────┴─────────────┐└──┤      close callbacks      │   └───────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><strong>timer 阶段</strong>：执行到期的<strong>setTimeout</strong> 、<strong>setInterval</strong>回调队列（所以平时定时器执行的时间有时并不准确）</li><li><strong>pending callback阶段</strong>：执行推迟到下一个循环迭代的I&#x2F;O回调</li><li><strong>idle, prepare阶段：</strong>仅内部使用</li><li><strong>poll阶段（轮询）</strong>:取出新的 I&#x2F;O 事件；执行与 I&#x2F;O 相关的回调（除了关闭回调，计时器调度的回调和 setImmediate 之外，几乎所有这些回调） 适当时，node 将在此处阻塞。<br>  如果轮询队列不为空，事件循环将循环访问队列并同步执行直到空。<br>  如果轮询队列是空的：<br>  1.如果脚本被 setImmediate 调度，则事件循环结束轮询，进入 check（检查）阶段执行那些被调度的脚本<br>  2.如果没有被 setImmediate 调度，则事件循环会等待回调被添加到队列中，然后立即执行<br> 在这个过程中，一旦轮询队列为空，事件循环还会检查已经到达时间阈值（或者超时）的计时器，如果有就回到定时器阶段执行对应的回调。  </li><li><strong>check阶段：</strong>执行<strong>setImmediate</strong>回调</li><li><strong>close callbacks阶段：</strong>一些关闭的回调函数</li></ul><h2 id="setTimeOut-与setImmdiate"><a href="#setTimeOut-与setImmdiate" class="headerlink" title="setTimeOut( )与setImmdiate( )"></a>setTimeOut( )与setImmdiate( )</h2><p><strong>执行时机不同</strong></p><ul><li>setImmediate 设计为在当前轮询 poll 阶段完成后执行脚本。</li><li>setTimeout 计划在以毫秒为单位的最小阈值过去之后运行脚本。</li></ul><p><strong>计时器的执行顺序将根据调用它们的上下文而有所不同</strong></p><ul><li>如果两者都是主模块 (main module) 中调用的，则顺序将受到进程性能的限制（这可能会受到计算机上运行的其他应用程序的影响）。</li><li>如果这两个调用在一个 I&#x2F;O 回调中，那么 immediate 总是执行第一。</li></ul><h2 id="process-nextTick-与setImmediate"><a href="#process-nextTick-与setImmediate" class="headerlink" title="process.nextTick()与setImmediate()"></a>process.nextTick()与setImmediate()</h2><ul><li>process.nextTick 是在同一阶段立即触发，setImmediate是在事件循环接下来的阶段迭代中执行 - check 阶段。</li><li><strong>process.nextTick () 比 setImmediate () 触发的更快</strong>。如果想设置立即异步执行一个任务，最好不要使用 setTimeout (fn,0)，而是使用 process.nextTick () 或 setImmediate ()。</li></ul>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery对表单的操作及更多应用</title>
      <link href="/2017/05/26/hello-world/"/>
      <url>/2017/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 表格 </tag>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
